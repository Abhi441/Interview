////////////////////////////////Q> 32

Difference between ArrayList and Hashtable in C#

🔷 1. ArrayList in C#

✅ Simple Meaning:

-->It stores a list of items, even if they are of different types.

-->You can access items by index (like array).

-->Allows duplicate values.

-->Slower for large data sets (it searches by position, not key).


✅ Real-World Analogy:

Imagine a shopping basket — you just throw items in, one after another. You don’t label them, you just remember the position.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}


//You can access items by index (like array)
class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}
---

🔷 2. Hashtable in C#

✅ Simple Meaning:

-->It stores data as Key → Value pairs.

-->Each key must be unique, but values can be repeated.

-->Fast access using the key (uses hash function).

-->Used when you want to look up values based on a name, ID, etc.


✅ Real-World Analogy:

Think of a dictionary: You search a word (key) to get its meaning (value). You don’t care where it is physically — it finds it fast.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        Hashtable phoneBook = new Hashtable();
        phoneBook.Add("John", "123456");
        phoneBook.Add("Alice", "789012");
        phoneBook.Add("Bob", "345678");
        phoneBook["Alice"] = "999999"; // ✅ updates value
        // phoneBook.Add("John", "000000"); ❌ Error – duplicate key

        foreach (DictionaryEntry entry in phoneBook)
        {
            Console.WriteLine($"{entry.Key}: {entry.Value}");
        }
    }
}

✅ Real-Life Use Cases:

ArrayList → Storing a random collection like UI controls, logs, temporary mixed data.

Hashtable → Storing user settings ("Theme" → "Dark"), phone books, ID → Names.

/////////////////////////////////////////////Q40
what is Extensition Methods :::
Extension method is a method injected (added) into an existing class
(or struct or interfaces), without modifying the sourse code of that 
class(or struct or interface).

--> Create the class without extensions method.
--> Create the static class with static method.
-->static class that uses the this keyword before the first parameter 
--> to extend the functionality of an existing type without modifying the original type


///As developer
//
namespace Products
{
    public class Product
    {
        public int WorkingHours ;
        public int WorkingPerWages;
    }
}
//

using Products;

namespace ProductExtensions
{

    public static class ProductExtension
    {
        public static int CalculateSalary(this Product product)
        {
           return  product.WorkingHours * product.WorkingPerWages;
        }
    }
}
//
using Products;

using ProductExtensions;

namespace Programs
{
  class program
  {
        public static void Main(string[] args)
        {
            Product p = new Product() { WorkingHours = 100 ,
         WorkingPerWages = 500 };
            Console.WriteLine(p.CalculateSalary());
        }
  }
}

//As the base library
public static class IntExtensition
{
    public static int DoubleIt(this int number)
    {
        return number * 2;
    }
}

class Program
{
    static void Main()
    {
        int x = 5;
        int result = x.DoubleIt();// Calls the extensitiom method
        Console.WriteLine(result); // Output: 10
    }
}
//////////////////////////////////////////////////////////Q41
=> Delegate is a variable that holds the refrences to a methods.Or you can say it's a pointer to a function.
=> A delegate can  refre to more  than one methods  of same return  type and parameters.

//
👨‍💻 Code Example (Super Easy):

using System;

public class Program
{
    // Step 1: Declare a delegate
    public delegate void GreetDelegate(string name);

    // Step 2: Create a method to point to
    public static void SayHello(string name)
    {
        Console.WriteLine("Hello " + name);
    }

    public static void Main()
    {
        // Step 3: Create delegate instance and assign method
        GreetDelegate greet = SayHello;

        // Step 4: Call method using delegate
        greet("Abhishek");
    }
}

Output:

Hello Abhishek

//

> A delegate is like a function pointer in C#.
It lets us pass methods as arguments or call them indirectly.
It's useful when we want to decouple logic or use event-based programming.
1. Passing methods as arguments using a delegate


2. Decoupling logic via event-like behavior




---

✅ 1. Passing Methods as Arguments (Callback-style)

using System;

public class Program
{
    // Delegate definition
    public delegate void Operation(int a, int b);

    // Method 1
    public static void Add(int a, int b)
    {
        Console.WriteLine("Add: " + (a + b));
    }

    // Method 2
    public static void Multiply(int a, int b)
    {
        Console.WriteLine("Multiply: " + (a * b));
    }

    // A method that takes a delegate (method) as argument
    public static void Calculate(int x, int y, Operation op)
    {
        op(x, y); // Indirectly calling the passed method
    }

    public static void Main()
    {
        Calculate(5, 3, Add); // Output: Add: 8
        Calculate(5, 3, Multiply); // Output: Multiply: 15
    }
}

🎯 What’s Happening:

Calculate method is reusable for different operations.

We are passing Add and Multiply as arguments using delegate Operation.



---

✅ 2. Decoupling Logic Using Delegates (Real-Life Style)

using System;

public class PaymentService
{
    public delegate void PaymentHandler(string message);

    public void ProcessPayment(PaymentHandler notify)
    {
        // Business logic
        Console.WriteLine("Processing payment...");

        // Notify after success
        notify("Payment successful!");
    }
}

public class Program
{
    public static void ShowMessage(string msg)
    {
        Console.WriteLine("Notification: " + msg);
    }

    public static void Main()
    {
        var service = new PaymentService();

        // Pass ShowMessage as delegate (event-style decoupling)
        service.ProcessPayment(ShowMessage);
    }
}

🎯 What’s Happening:

PaymentService doesn’t care how the notification is shown — it's decoupled.

We just inject the logic using a delegate
////////////////////////////////////////////////////////////////Q 42
//What is Multiple delegate 
=>A multiple Delegate is a delegate that holds the refrences of more than one function.
✅ Real-Life Analogy

> Imagine one button click is connected to 3 things:

✅ Show message
✅ Save to database
✅ Send email

One action → many methods = Multicast Delegate




---

✅ Code Example (C#)

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void Notify();

    // Step 2: Define methods to link
    public static void Message1()
    {
        Console.WriteLine("Message 1: Logging info...");
    }

    public static void Message2()
    {
        Console.WriteLine("Message 2: Sending email...");
    }

    public static void Main()
    {
        // Step 3: Create multicast delegate
        Notify notify = Message1;
        notify += Message2; // Add second method

        // Step 4: Invoke delegate → both methods will run
        notify();
    }
}

✅ Output:

Message 1: Logging info...
Message 2: Sending email...


---

✅ Summary for Interview (One-liner):

> A multicast delegate holds multiple methods and calls them in order when the delegate is invoked. Useful when one action should trigger many things.

////////////////////////////////////////////////////////Q43
//What are ANonymous delegate in C#
In Anomyous Delegate, you can create a delegate, but there is no  need to declare the method associated with it.

✅ Interview-Ready Definition:

> Anonymous delegates are methods without a name, used directly where they are needed.



They are useful when:

You want to write a small method on the spot.

You don’t want to define a separate named method.



---

✅ Super Simple Explanation:

Imagine instead of creating a named function like AddNumbers(), you just write the logic right where it’s needed — that’s an anonymous delegate.


---

✅ Code Example:

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void GreetDelegate(string name);

    public static void Main()
    {
        // Step 2: Use an anonymous delegate directly
        GreetDelegate greet = delegate(string name)
        {
            Console.WriteLine("Hello " + name);
        };

        // Step 3: Call the delegate
        greet("Abhishek");
    }
}


---

✅ Output:

Hello Abhishek


---

✅ Real-World Use Case:

Let’s say you’re writing code to log a message or handle a button click quickly — you don’t need a separate method, just use an anonymous delegate right there.


---

✅ Summary for Interview:

> Anonymous delegate = a method without a name, written inline where it's used.
Saves time and makes code shorter and cleaner, especially for small logic blocks.

/////////////////////////////////////////////////////////////////////Q44)
//What is the diffrence between Events And Delegate.
->A Delegate is a variable that hold the refrence to a method or pointer to a function.
->The event is a notification mechanism 

//yet to fill the kindle answer.

---

✅ Interview-Ready Explanation (in Human Words)

🎯 Delegate is like a reference to a method — it knows how to call a method.

🎯 Event is a wrapper built on top of a delegate, used when something happens (like a button click). It helps restrict who can trigger the action.


---

✅ Simple Analogy:

Delegate is like your mobile phone — you can call anyone if you have their number (method).

Event is like a doorbell — others can press it (subscribe), but only the house (class) can decide what happens when it rings (raise the event).



---

✅ Real-Life Example in Code:

using System;

public delegate void Notify(); // Delegate declaration

public class Process
{
    // EVENT based on delegate
    public event Notify OnCompleted;

    public void StartProcess()
    {
        Console.WriteLine("Process Started...");
        // Do some work here...
        Console.WriteLine("Process Completed.");
        
        // Raise the event
        OnCompleted?.Invoke(); // Only this class can raise it
    }
}

public class Program
{
    public static void Main()
    {
        Process process = new Process();

        // Subscribe to the event
        process.OnCompleted += () => Console.WriteLine("Notification: Process finished!");

        process.StartProcess(); // This will trigger the event
    }
}


---

✅ Output:

Process Started...
Process Completed.
Notification: Process finished!


---

✅ Summary for Interview:

Feature Delegate Event

What it is A pointer to a method A message broadcaster built on delegates
Who can call Anyone with reference Only the class that declares it
Use case When you want to pass a method When you want to notify subscribers



---

✅ 1-Line Answer:

> Delegates hold a reference to methods; Events use delegates to notify when something happens, and only the class that defines the event can raise it.






///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////END OF KINDLE
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////Singleton
✅ Interview-Friendly Answer:
Q: What is a Singleton Class in C#?

A Singleton is a special class where only one object (instance) can be created during the application's lifetime.
It's useful when you need just one shared thing, like a single database connection, a logging service, or a settings manager.

💡 Real-World Analogy:
Think of a TV Remote in a room — you don’t need 10 remotes.
Everyone uses the same one to control the TV.
That’s how a Singleton works — one object shared everywhere.

🧠 Why use Singleton?
To share data across multiple places.
To save memory and avoid creating duplicate objects.
To make sure there’s only one access point to something.
✅ Simple Code Example:
public class SingletonLogger
{
    private static SingletonLogger _instance;

    // Private constructor: no one can create from outside
    private SingletonLogger() { }

    // Public method to get the single instance
    public static SingletonLogger GetInstance()
    {
        if (_instance == null)
        {
            _instance = new SingletonLogger();
        }

        return _instance;
    }

    public void Log(string message)
    {
        Console.WriteLine("Log: " + message);
    }
}
🔄 How to Use It:
class Program
{
    static void Main()
    {
        var logger1 = SingletonLogger.GetInstance();
        var logger2 = SingletonLogger.GetInstance();

        logger1.Log("App started");
        logger2.Log("Something happened");

        Console.WriteLine(logger1 == logger2); // true — same object
    }
}
✅ Summary (for Interview):
Singleton ensures only one instance of a class exists.
Useful for things like Logger, Config Manager, DB Connection.
It helps avoid duplication and keeps things centralized.
Would you like me to show the Thread-safe version or how Singleton is used in ASP.NET Core (like in services)?





Great question! Interviewers love asking about Thread-Safe Singleton — especially for multithreaded apps.





---



✅ Interview-Friendly Explanation:



Q: How to make Singleton thread-safe in C#?



> In multithreaded apps, multiple threads might try to create the Singleton at the same time — which can break the "only one object" rule.

So, we use locking to make sure only one thread can create the object — this is called thread-safe Singleton.







////////////////////
//How to make Signaloton Thread Safe
---



💡 Think of a Bank ATM



Only one person can withdraw at a time.

If two people try at once, the system must lock the ATM temporarily — that’s thread safety.





---



✅ Code: Thread-Safe Singleton (with lock)



public class SingletonLogger

{

    private static SingletonLogger _instance;

    private static readonly object _lock = new object();



    // Private constructor

    private SingletonLogger() { }



    public static SingletonLogger GetInstance()

    {

        // Lock to allow only one thread inside this block at a time

        lock (_lock)

        {

            if (_instance == null)

            {

                _instance = new SingletonLogger();

            }

        }



        return _instance;

    }



    public void Log(string message)

    {

        Console.WriteLine("Log: " + message);

    }

}





---



🧪 How to Use:



class Program

{

    static void Main()

    {

        var logger1 = SingletonLogger.GetInstance();

        var logger2 = SingletonLogger.GetInstance();



        Console.WriteLine(logger1 == logger2); // ✅ true: same object

    }

}





---



✅ Summary (for interview):



Use lock to make Singleton thread-safe.



lock ensures only one thread creates the object.



This avoids race conditions in multithreaded environments.



////////////////////////////////////////////////////////////////
//What is reference type and Value Type
--> “Value types store actual values in stack memory . Reference types store the memory address and point to shared data in heap. 

-->with value types, changes don’t affect others. But with reference types, changes reflect across all references.”

-->🔍 Common Value Types in C#:

int, float, bool, char, double, struct


-->🔍 Common Reference Types in C#:

class, string, array, object, interface

-->
EXAMPLE : 
Code Example (Value Type):

int a = 5;
int b = a;
b = 10;

Console.WriteLine(a); // Output: 5
Console.WriteLine(b); // Output: 10

📌 a and b are separate copies, so changing b does not affect a.
-->
 Code Example (Reference Type):

class Person
{
    public string Name;
}

Person p1 = new Person { Name = "Abhishek" };
Person p2 = p1;
p2.Name = "Sunil";

Console.WriteLine(p1.Name); // Output: Sunil
Console.WriteLine(p2.Name); // Output: Sunil


