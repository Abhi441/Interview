1)Kindle Question 200. 
2)Angular Question.
3)Coding Question , C#(Sheet) , Sql(Sheeet) , Linq Query (sheet). , Angular(Sheet). 
4)Most asked Question.(apart from I do not have kindle).
5) Solid Preciple , Design patter , Creating Api (frontend ,backend , database). ,  Prepare for all the coding question that you have incounter(security + performance), cors, cross question. AI innterview question
6)EF and Ado.net.

///////////////////////////////////////////////////////////////////////////////////////////Q)1
What are the Main Concept of OOPS ? WHAT ARE CLASSES AND OBJECTS ?

//Class : A class is a LOGICAL UNIT OR BLUEPRINT that contains feilds, methods , and Properties
-> It doesn't occupy memory until an object is crated.
1) Constructor is a method in the class which gets excuted when a class object is created.
2) A feilds is avariable of any type. It is basically the data.
3) A property  is a member that provides helps in read and write of private feilds.
4) A methods is a code blocks that contains a series of statement.
//
OBJECT - An object is an INSTANCE of a class.
-> It is a real-world entity created based on the class blueprint.
->It occupies memory and can have unique value for its properties.


//Real-World Example
Example 1 : Car Blueprint
Class : A blueprint of a Car defines.
properties : Color , brand , engine type.
methods : start(), sleep() , accelerator().

Object : A specific car type
car1 : Red, Tesla, Electric.
Car2 : Blue , BMW, Diesel.

///
Code Example
Public Class Car
{
public string Colour {get ; set ;}
public string Brand  {get ; set; }

public void Start()
{
Console.WriteLine("Car Started");
}
Car car1 = new Car{colour = "Red" , Brand = "Tesla"};
Car car2 = new Car{Colour = "Blue" , Brand = "BMW"};

car1.Start();

}
Output : Car started;
//
EXAMPLE 2 : In Book


////////////////////////////////////////////////////////////////////////////////////2)
What is Inheritance ? Why INHERITANCE IS IMPORTANT ?
-> Inheritance is creating a PARENT-CHLD relationship between two classes where child automaticallyy get the properties and
get the properties and methods of the parent.

-> It allows you to reused code and establish a relatiship between classes(e.g., is-a relationship).
//
Why is Inheritance Impotant ?
1) Code Reusability : Avoid duplicating code across related classes.
2) Abraction of code.
2) Extensibility : Enables adding new features to existing code without modification it.

Example
//namespace Pro
//{ 

//class Employee
//{
//    int a = 10;
//    public  void CalculateSalary()
//    {
//        Console.WriteLine("CalculateSalary");
//    }
//}

//class Department : Employee
//{
//    int b = 20;
//    public  void Depart()
//    {
//        Console.WriteLine("This  is DepartMent");
//    }
//}

//class Program
//{
//    public static void Main()
//    {
//        Department Dm = new Department();

//           Dm.CalculateSalary(); // CalculateSalary method is not present Department class but we can call the CalculateSalary() by refrences of Department class.

//    }
// }
//}

/////////////////////////////////////////////////////////////////////////////////3)
What are the diffrence type of inheritance ?
-> Single Inheritance : One bae class with one derived class
Example : 
class BaseClass1
{
public void Animal()
{
Console.WriteLine("Animals");
}
}
class DerivedClass1 : BaseClass
{
public void Dog()
{
Console.WriteLine("Dog");
}
}

->Multiple Inheritance :Multiple Inheritance - In this case Multiple Base classes can be there for single derived class. Remember in C#,
multiple inheritance can only be achieved with the help of interfaces. Which means only one base or
abstract class is allowed, and rest must be interfaces.

Example:
class BaseClass2
{
public void Animal() {
Console.WriteLine("Animal");
}
}
interface I2
{
public void Fly();
}

class DerivedClass2: BaseClass2, I2
{
public void Eagle() {
Console.WriteLine("Eagle");
}
public void Fly() {
Console.WriteLine("Fly");

}
}

->Multilevel inheritance – In this, there is a GrandParent class then there is a Parent class which is derived from GrandParent class and then there is Child class which is derived from Parent class.
Grandparent class -> Parent class -> Child class Here the Child class will get the properties
of both Parent class and GrandParent class automatically.

class BaseClass2
{
public void Animal() {
Console.WriteLine("Animal"); }
}
class DerivedClass3: BaseClass2
{
public void Dog() {
Console.WriteLine("Dog");
}
}
class DerivedClass4 : DerivedClass3
{
public void Labrador() {

 Console.WriteLine("Labrador");
}

->Hierarchal inheritance - In this One, child class is derived more from than one base class. This is the most used type of inheritance.
EXAMPLE :
class BaseClass4
{
public void Animal() {
Console.WriteLine("Animal");
}
}

class DerivedClass5: BaseClass4
{
public void Dog() 
{
Console.WriteLine("Dog");
}
}
class DerivedClass6: BaseClass4
{
public void Cat() {
Console.WriteLine("Dog");
}
}

///////////////////////////////////////////////////////////////////////////////////////Q4)
//HOW TO PREVENT A CLASS FROM BEING INHERITED?

By using SEALED keyword in class.

See the screenshot below, you marked the class ABC as sealed. If you will try to derive this class "ABC" in a child class "XYZ" then
it will give a compiler error because ABC is marked as Sealed.

EXAMPLE : 
sealed class ABC {}
class XYZ: ABC { } //Invalid
class Sealed ClassEx.ABC
CS0509: 'XYZ': cannot derive from sealed type 'ABC

///////////////////////////////////////////////////////////////////////////////////////Q5)
WHAT IS ABSTRACTION? 
Defination :-
Abstraction means showing only required things and hide the BACKGROUND details.
->It allows you to focus on what an object does, not how it does it.

//Why is Abraction Important
->Simplifies complex system by breaking them into smaller , more manageable parts.
-> Hides unnessary implemention details , reducing.
-> promotes code reusability and maintainbility.

Example :
//using System;
//public abstract class Vehicle
//{
//    public abstract void StartEngine();// only the declaration is provided; the implementation 

//    public void DisplayInfo()
//    {
//        Console.WriteLine("This is a vehicle");
//    }
//}

//public class Car : Vehicle
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Car engion started");
//    }
//}

//public interface IRefuelable
//{
//    void Refuel();
//}

//public class Bike : Vehicle , IRefuelable
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Bikes engion started");
//    }

//    public void Refuel()
//    {
//        Console.WriteLine("Bike refueled.");
//    }
//}

//public class Program
//{
//   public static void Main(string[] args)
//    {
//        Vehicle car = new Car();
//        car.StartEngine(); // Car engine started.
//        car.DisplayInfo(); // This is a vehicle.

//        Bike bike = new Bike();
//        bike.StartEngine();  //Bike engion started.
//        bike.Refuel();       //Bike refueled
//    }
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////Q6)
Encapsulation means WRAPPING of data and methods/properties into a single unit. Why I included properties 
here because properties are nothing else but special methods only. Why they special methods, 
because they just do one thing and that is getting and setting private fields.

Example : 
//    //
// class Employee
//{
//    private int experience; //This feild can not be excess without Property.
//    public int Experience
//    {
//        get
//        {
//            return experience;
//        }
//        set
//        {
//            experience = value;
//        }
//    }
//}

//class Program
//{
//    public static void Main(string[] args)
//    {
//        Employee em = new Employee();
//        em.Experience = 10;
//    }

//}

///////////////////////////////////////////////////////////////////////////////////Q7)
//WHAT IS POLYMORPHISM AND WHAT ARE ITS TYPES? ❖      
Polymorphism is the ability of a variable, object, or function to take on MULTIPLE FORMS. 
What is multiple forms? For example, in English “RUNNING” word can be used for “running a race” or “running a business”. 
In both cases the meaning is different but the name “RUNNING” is same.

///Overloading (compile time check)
//class Employee
//{
//    public void ClaculateSalary(int a, int b)
//    {
//        Console.WriteLine(a * b);
//    }
//    public void ClaculateSalary(int a, int b, int c) // changing the number of parameter
//    {
//        Console.WriteLine(a * b * c);
//    }
//    public void ClaculateSalary(long a, int b, int c)
//    {
//        Console.WriteLine(a * b * c);
//    }

//}

//class Program
//{
// public static void Main(string[] args)
//   {
//        Employee Em = new Employee();

//        Em.ClaculateSalary(3, 4);
//        Em.ClaculateSalary(3, 4 , 5);
//        Em.ClaculateSalary(300000000000, 4, 5);

//    }
//}

//Overrding
//Overriding in c# allows a subclass(derived class) to provide a specific implementation of a method that is already defind in its base class.
//It is achieved using the virtual keyword in the base class and the override keyword in the derived class.

////Example:
//using System ;

//public class Animal
//{
//   public virtual void MakeSound()
//    {
//        Console.WriteLine("Animal makes the sound");
//    }
//}

//public class Dog : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Dog barks");
//    }
//}

//public class Cat : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Cat meows");
//    }
//}

//public class Program
//{
//    public static void Main(string[] args)
//    {
//        Animal myDog = new Dog();
//        Animal myCat = new Cat();
//        // Polymorphic behavior - the method called is determined at runtime
//        myDog.MakeSound(); //Dog bargs  // Method selection is based on object type not refrence type.
//        myCat.MakeSound(); //Cat meows  // Even when refrence as Animal , the overriden method in Dog or cat is called.
//        // when overriden is not used the base class method is called.
//    }
//}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////8)
//What is Method Overloading ? In How many ways a methods can be overloaded ?
-> Method Overloading is a type of polymorphism in which we can create multiple methods of the same name in the same class, 
and all the methods works diffrent ways.
->The Compiler determines which method to invoke based on the arguments passed at compile time(hence it's part of Compiler-Time Polymorphism)

//Why is methods Overloading is important ?
Code Readability :-> use the same methods name for similar operations.
Flexibility : Allows calling methods with diffrent types or numbers of arguments.
//How many ways can a Methods Be Overloaded?
1)By Changing the Number of Parameters.
Example : Add(int a , int b) and Add(int a , int b , int c).
2)By changing the Number of Prameters : 
Example : Add(int a , int b) and Add(double a , double b)
3)By Changing the Order of Parameters :
Example : Print(string name , int age) and Print(int age , string name)
//Example:
public class MethodOverloading
{
public int Add(int a, int b)
{
return a + b;
}
public int Add(int a, int b, int c)
{
return a + b + c;
}
public double Add(double a, double b, int c)
{ return a + b + c;
}

public double Add(double a, int c, double b)
{
return a + b + c;
}
}

////////////////////////////////////////////////////////////////////////////////////9)
//WHAT IS THE DIFFERENCE BETWEEN OVERLOADING AND OVERRIDING?

1. Method overloading is a type polymorphism, in which we can create multiple methods of the same name in the same class, and all methods work in different ways.
1. Method overriding is having methods with the SAME NAME and SIGNATURE but in different classes.

2.Method Overloading will not use any special keywords.
2. Overriding uses VIRTUAL keyword for base class method and OVERRIDE keyword for derived class method. 

3. Method overloading doesn’t need inheritance. It is in same class. 
3. Method overriding NEEDS INHERITANCE (Base class/ Derived class). It is not possible in same class.


////////////////////////////////////////////////////////////////////////////////////////////////////10)
//What is the diffrence between method Overriding and Method Hiding.
//Method Overloading
What :-> Ref Redefining a method in derived classe that exists in the base class.

When :-> used to change or extend the behavior of a base method.

How  :-> it Achieved resing virtual (in the base clans/ and override (in the derived class),

Binding :-> Resolved at runtime (runtime polymorphism).
//Method Hiding
Whet :-> Hiding a method in the base class by a neur method in the derived class with the the same home.
When :-> used to replace a baser class meshed in the derived class without affecting ther bate class.

How :-> Achieved sesing the now keyword.

Bindings Resolved at compile time.

//Kindle Answer
Q)An method overriding is having method with the Some Nome and Signature but in different classe

public class Base Class
{
public virtual void print ()
{
Condole.WriteLine("BaseClass Print");
}
}
Pubile public class Scrived Class: Base class
{
public public override void print()
{
Console.WriteLine(" Child Clals Print");
}
}

-->Method Hiding, you can hide ther & implementation of the method of a base class from the derived class dlong the now keyword.

public class Base Class
{
public void Print()
{
Condole.WriteLine("Baseclass Print ");
}
}
Public public class Derived Class: BaseClass.
{
public now void Print()
{
Console.WriteLine("childrenllall Print");
}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////What is the diffrence between An Abstract class and An Interface ?
1) 1. Abstract class contains both DECLAR-ATION & DEFINITION of methods.
1) Interface contains ONLY DECLARATION of methods.

public abstarct class Employee
{
public Employee()
{
}
private string Name;
public abstract void Project(); // Method Declare

public void Role()    // Method Define
{
Console.WriteLine(""Software Engineer);
}
}


//
interface IEployee
{
public void Project();
public void Manager();
}
2. Abstract class keyword: ABSTRACT, Inter-face keyword: INTERFACE

3. Abstract class can contain methods, fields, constants, constructor.

Interface can contain undefined methods only nothing else.

4. Abstract class does not Support MULTIPLE INHERITANCE

Interface supports multiple inheritance


///why
Perfect 👍 — let’s simplify that with easy language + C# example so even a beginner or interviewer feels your clarity.


---

🧠 Simple Explanation

👉 Abstract Class —
Use it when you have similar classes that share some common code (logic) but also need their own special behaviors.
You can write shared code once in the abstract class, and force child classes to fill in the details.

👉 Interface —
Use it when you just want to say:

> “Whoever uses me must promise to do these actions.”
It’s only a contract — no code inside, just rules.




---

💻 Example in C#

🟢 Abstract Class Example

public abstract class Vehicle
{
    public void StartEngine()
    {
        Console.WriteLine("Engine started!");
    }

    public abstract void Drive(); // child class must define this
}

public class Car : Vehicle
{
    public override void Drive()
    {
        Console.WriteLine("Car is driving on the road 🚗");
    }
}

public class Bike : Vehicle
{
    public override void Drive()
    {
        Console.WriteLine("Bike is moving on two wheels 🏍️");
    }
}

✅ Why Abstract?

Both Car and Bike share common logic (StartEngine()).

Each has its own Drive() logic.



---

🔵 Interface Example

public interface IPay
{
    void PayMoney();
}

public class CreditCardPayment : IPay
{
    public void PayMoney()
    {
        Console.WriteLine("Payment done using Credit Card 💳");
    }
}

public class UpiPayment : IPay
{
    public void PayMoney()
    {
        Console.WriteLine("Payment done using UPI 📱");
    }
}

✅ Why Interface?

IPay is just a contract — any class (UPI, CreditCard, Wallet) can follow it.

Promotes flexibility — different payment types follow same pattern but no shared code.



---

🎯 Summary in One Line

Use When

Abstract Class When you want shared code + common structure.
Interface When you want different classes to follow the same rules without sharing code.
////////////////////////////////////////////////////////////////////////////////////////////////////Q) 18 Boxing and UnBoxing
🧠 Definition (Easy Words)

👉 Boxing is the process of converting from value type to refrence type.
👉 Unboxing is the process of converting refrence type to value type.


---

🧩 Example (With Explanation)

using System;

class Program
{
    static void Main()
    {
        int num = 10; // ✅ Value type
        object obj = num; // ✅ Boxing — num is boxed into object
        int newNum = (int)obj; // ✅ Unboxing — object is converted back to int

        Console.WriteLine($"Original: {num}, After Unboxing: {newNum}");
    }
}

💬 Step-by-Step Explanation:

1. int num = 10; → This is a value type (stored in stack memory).


2. object obj = num; → Boxing happens — it puts num into an object box (stored in heap).


3. int newNum = (int)obj; → Unboxing happens — the value is taken out of the box and converted back to int.




---

🏗️ Project Use (Buy & Sell Properties App)

In your Buy & Sell Property Application, boxing/unboxing can happen:

When you store values (like PropertyID, Price, etc.) in a collection like ArrayList or object type, because those store objects, not value types.

When you log numeric data or send it as an object to some generic function.


Example:

ArrayList propertyData = new ArrayList();
propertyData.Add(1001); // Boxing: int → object
int id = (int)propertyData[0]; // Unboxing: object → int


---

⚖️ Trade-offs

👍 Advantage 👎 Disadvantage

Allows value types to be used where objects are required Slower performance (extra memory + CPU overhead)
Useful for generic or flexible data storage Too much boxing/unboxing can hurt app speed



---

💼 Business Impact

In enterprise apps, boxing/unboxing should be avoided in performance-critical code (like APIs that fetch thousands of records).

Instead, use Generics (List<T>, Dictionary<TKey, TValue>) to prevent unnecessary boxing and make code faster.



---

🎯 Interview-Ready Summary

> “Boxing is when a value type is wrapped inside an object, and unboxing is when we extract it back.
In my project, I faced this while using non-generic collections like ArrayList, so I moved to generic List<int> to improve performance and avoid unnecessary boxing and unboxing.”
////////////////////////////////Q> 32

Difference between ArrayList and Hashtable in C#

🔷 1. ArrayList in C#

✅ Simple Meaning:

-->It stores a list of items, even if they are of different types.

-->You can access items by index (like array).

-->Allows duplicate values.

-->Slower for large data sets (it searches by position, not key).


✅ Real-World Analogy:

Imagine a shopping basket — you just throw items in, one after another. You don’t label them, you just remember the position.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}


//You can access items by index (like array)
class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}
---

🔷 2. Hashtable in C#

✅ Simple Meaning:

-->It stores data as Key → Value pairs.

-->Each key must be unique, but values can be repeated.

-->Fast access using the key (uses hash function).

-->Used when you want to look up values based on a name, ID, etc.


✅ Real-World Analogy:

Think of a dictionary: You search a word (key) to get its meaning (value). You don’t care where it is physically — it finds it fast.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        Hashtable phoneBook = new Hashtable();
        phoneBook.Add("John", "123456");
        phoneBook.Add("Alice", "789012");
        phoneBook.Add("Bob", "345678");
        phoneBook["Alice"] = "999999"; // ✅ updates value
        // phoneBook.Add("John", "000000"); ❌ Error – duplicate key

        foreach (DictionaryEntry entry in phoneBook)
        {
            Console.WriteLine($"{entry.Key}: {entry.Value}");
        }
    }
}

✅ Real-Life Use Cases:

ArrayList → Storing a random collection like UI controls, logs, temporary mixed data.

Hashtable → Storing user settings ("Theme" → "Dark"), phone books, ID → Names.

/////////////////////////////////////////////Q40
what is Extensition Methods :::
Extension method is a method injected (added) into an existing class
(or struct or interfaces), without modifying the sourse code of that 
class(or struct or interface).

--> Create the class without extensions method.
--> Create the static class with static method.
-->static class that uses the this keyword before the first parameter 
--> to extend the functionality of an existing type without modifying the original type


///As developer
//
namespace Products
{
    public class Product
    {
        public int WorkingHours ;
        public int WorkingPerWages;
    }
}
//

using Products;

namespace ProductExtensions
{

    public static class ProductExtension
    {
        public static int CalculateSalary(this Product product)
        {
           return  product.WorkingHours * product.WorkingPerWages;
        }
    }
}
//
using Products;

using ProductExtensions;

namespace Programs
{
  class program
  {
        public static void Main(string[] args)
        {
            Product p = new Product() { WorkingHours = 100 ,
         WorkingPerWages = 500 };
            Console.WriteLine(p.CalculateSalary());
        }
  }
}

//As the base library
public static class IntExtensition
{
    public static int DoubleIt(this int number)
    {
        return number * 2;
    }
}

class Program
{
    static void Main()
    {
        int x = 5;
        int result = x.DoubleIt();// Calls the extensitiom method
        Console.WriteLine(result); // Output: 10
    }
}
//////////////////////////////////////////////////////////Q41
=> Delegate is a variable that holds the refrences to a methods.Or you can say it's a pointer to a function.
=> A delegate can  refre to more  than one methods  of same return  type and parameters.

Think of it like :
"You give someone your contact number(delegate), they can call you(method) when needed".

//
👨‍💻 Code Example (Super Easy):

using System;

public class Program
{
    // Step 1: Declare a delegate
    public delegate void GreetDelegate(string name);

    // Step 2: Create a method to point to
    public static void SayHello(string name)
    {
        Console.WriteLine("Hello " + name);
    }

    public static void Main()
    {
        // Step 3: Create delegate instance and assign method
        GreetDelegate greet = SayHello;

        // Step 4: Call method using delegate
        greet("Abhishek");
    }
}

Output:

Hello Abhishek

//

> A delegate is like a function pointer in C#.
It lets us pass methods as arguments or call them indirectly.
It's useful when we want to decouple logic or use event-based programming.
1. Passing methods as arguments using a delegate


2. Decoupling logic via event-like behavior




---

✅ 1. Passing Methods as Arguments (Callback-style)

using System;

public class Program
{
    // Delegate definition
    public delegate void Operation(int a, int b);

    // Method 1
    public static void Add(int a, int b)
    {
        Console.WriteLine("Add: " + (a + b));
    }

    // Method 2
    public static void Multiply(int a, int b)
    {
        Console.WriteLine("Multiply: " + (a * b));
    }

    // A method that takes a delegate (method) as argument
    public static void Calculate(int x, int y, Operation op)
    {
        op(x, y); // Indirectly calling the passed method
    }

    public static void Main()
    {
        Calculate(5, 3, Add); // Output: Add: 8
        Calculate(5, 3, Multiply); // Output: Multiply: 15
    }
}

🎯 What’s Happening:

Calculate method is reusable for different operations.

We are passing Add and Multiply as arguments using delegate Operation.



---

✅ 2. Decoupling Logic Using Delegates (Real-Life Style)

using System;

public class PaymentService
{
    public delegate void PaymentHandler(string message);

    public void ProcessPayment(PaymentHandler notify)
    {
        // Business logic
        Console.WriteLine("Processing payment...");

        // Notify after success
        notify("Payment successful!");
    }
}

public class Program
{
    public static void ShowMessage(string msg)
    {
        Console.WriteLine("Notification: " + msg);
    }

    public static void Main()
    {
        var service = new PaymentService();

        // Pass ShowMessage as delegate (event-style decoupling)
        service.ProcessPayment(ShowMessage);
    }
}

🎯 What’s Happening:

PaymentService doesn’t care how the notification is shown — it's decoupled.

We just inject the logic using a delegate

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 22 )Explain Generics in C# ? When And why to use Them ?
Definition (In Easy Words)

Generics in C# means — writing code once that can work with any data type.

💬 Like saying:

> “I don’t care whether it’s int, string, or Customer — I’ll handle it in a type-safe way.”



So instead of creating multiple methods or classes for different data types, you can write one generic method or class that works for all types.


---

🧩 Example

❌ Without Generics (Old Way)

public class DataStore
{
    public object Data { get; set; }
}

You can store anything, but you lose type safety and need to do casting:

DataStore store = new DataStore();
store.Data = "Hello";
string value = (string)store.Data; // Need casting — risky


---

✅ With Generics (Modern Way)

public class DataStore<T>
{
    public T Data { get; set; }
}

Now you can do this:

DataStore<string> nameStore = new DataStore<string>();
nameStore.Data = "Abhishek"; // Type-safe — only string allowed

DataStore<int> ageStore = new DataStore<int>();
ageStore.Data = 25; // Type-safe — only int allowed

✅ No casting
✅ Type safety
✅ Reusable code


---

🧱 Types of Generics

1. Generic Classes

Example: List<T>, Dictionary<TKey, TValue>, DataStore<T>



2. Generic Methods

public void Print<T>(T value)
{
    Console.WriteLine(value);
}


3. Generic Interfaces

Example: IRepository<T> for data access.



4. Generic Delegates

Example: Func<T>, Action<T>, Predicate<T>





---

💼 Project Use (Buy & Sell Property Application)

In your Buy & Sell Property App, you might use Generics in:

1. Repository Pattern

public interface IRepository<T>
{
    IEnumerable<T> GetAll();
    T GetById(int id);
    void Add(T entity);
}

public class Repository<T> : IRepository<T>
{
    // Common DB logic for Property, User, Payment, etc.
}

✅ You write database logic once and reuse it for all entities.


2. Response Wrappers

public class ApiResponse<T>
{
    public bool Success { get; set; }
    public string Message { get; set; }
    public T Data { get; set; }
}

✅ You can return ApiResponse<Property> or ApiResponse<User> easily.




---

⚖️ Trade-offs

Pros Cons

Type-safe and reusable Can get complex to read for beginners
No boxing/unboxing overhead Harder debugging in advanced nested types
Cleaner and DRY code Reflection and serialization sometimes tricky



---

💡 Business Impact

✅ Less Code, Fewer Bugs: Reduces duplication in large-scale apps.
✅ Better Performance: Type safety and no boxing/unboxing.
✅ Easier Maintenance: One fix updates all types.


---

🎯 Interview-Ready Short Answer

> “Generics in C# let us create classes, methods, and interfaces that can work with any data type in a type-safe way.
In my Buy & Sell Property app, I used Generics in Repository and API Response classes to make my data layer reusable and maintainable.
It reduced code duplication and improved performance.”


////////////////////////////////////////////////////////////////Q 42
//What is Multiple delegate 
=>A multiple Delegate is a delegate that holds the refrences of more than one function.
✅ Real-Life Analogy

> Imagine one button click is connected to 3 things:

✅ Show message
✅ Save to database
✅ Send email

One action → many methods = Multicast Delegate




---

✅ Code Example (C#)

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void Notify();

    // Step 2: Define methods to link
    public static void Message1()
    {
        Console.WriteLine("Message 1: Logging info...");
    }

    public static void Message2()
    {
        Console.WriteLine("Message 2: Sending email...");
    }

    public static void Main()
    {
        // Step 3: Create multicast delegate
        Notify notify = Message1;
        notify += Message2; // Add second method

        // Step 4: Invoke delegate → both methods will run
        notify();
    }
}

✅ Output:

Message 1: Logging info...
Message 2: Sending email...


---

✅ Summary for Interview (One-liner):

> A multicast delegate holds multiple methods and calls them in order when the delegate is invoked. Useful when one action should trigger many things.

////////////////////////////////////////////////////////Q43
//What are ANonymous delegate in C#
In Anomyous Delegate, you can create a delegate, but there is no  need to declare the method associated with it.

✅ Interview-Ready Definition:

> Anonymous delegates are methods without a name, used directly where they are needed.



They are useful when:

You want to write a small method on the spot.

You don’t want to define a separate named method.



---

✅ Super Simple Explanation:

Imagine instead of creating a named function like AddNumbers(), you just write the logic right where it’s needed — that’s an anonymous delegate.


---

✅ Code Example:

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void GreetDelegate(string name);

    public static void Main()
    {
        // Step 2: Use an anonymous delegate directly
        GreetDelegate greet = delegate(string name)
        {
            Console.WriteLine("Hello " + name);
        };

        // Step 3: Call the delegate
        greet("Abhishek");
    }
}



---

✅ Output:

Hello Abhishek


---

✅ Real-World Use Case:

Let’s say you’re writing code to log a message or handle a button click quickly — you don’t need a separate method, just use an anonymous delegate right there.


---

✅ Summary for Interview:

> Anonymous delegate = a method without a name, written inline where it's used.
Saves time and makes code shorter and cleaner, especially for small logic blocks.

/////////////////////////////////////////////////////////////////////Q44)
//What is the diffrence between Events And Delegate.
->A Delegate is a variable that hold the refrence to a method or pointer to a function.
->The event is a notification mechanism 

//yet to fill the kindle answer.

---

✅ Interview-Ready Explanation (in Human Words)

🎯 Delegate is like a reference to a method — it knows how to call a method.

🎯 Event is a wrapper built on top of a delegate, used when something happens (like a button click). It helps restrict who can trigger the action.


---

✅ Simple Analogy:

Delegate is like your mobile phone — you can call anyone if you have their number (method).

Event is like a doorbell — others can press it (subscribe), but only the house (class) can decide what happens when it rings (raise the event).



---

✅ Real-Life Example in Code:

using System;

public delegate void Notify(); // Delegate declaration

public class Process
{
    // EVENT based on delegate
    public event Notify OnCompleted;

    public void StartProcess()
    {
        Console.WriteLine("Process Started...");
        // Do some work here...
        Console.WriteLine("Process Completed.");
        
        // Raise the event
        OnCompleted?.Invoke(); // Only this class can raise it
    }
}

public class Program
{
    public static void Main()
    {
        Process process = new Process();

        // Subscribe to the event
        process.OnCompleted += () => Console.WriteLine("Notification: Process finished!");

        process.StartProcess(); // This will trigger the event
    }
}


---

✅ Output:

Process Started...
Process Completed.
Notification: Process finished!


---

✅ Summary for Interview:

Feature Delegate Event

What it is A pointer to a method A message broadcaster built on delegates
Who can call Anyone with reference Only the class that declares it
Use case When you want to pass a method When you want to notify subscribers



---

✅ 1-Line Answer:

> Delegates hold a reference to methods; Events use delegates to notify when something happens, and only the class that defines the event can raise it.


////////////////////////////////////////////////////81>
What is CLUSTRED INDEX ?
--> A clustered indexdefines the order in which  data is physically stored into table.
--> only one clustered index allowed per table.
Example :
CREATE TABLE EMPLOYEE(
ID INT PRIMARY KEY , // By default create a clusred indes
NAME  VARCHAR(100),
Salary INT
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////51)
🧩 Definition

The .NET Framework is a software platform by Microsoft that helps developers build and run applications easily using languages like C#, VB.NET, etc.

It provides all the tools — like a big toolbox — to write, compile, and run code safely.


---

💡 Main Components of .NET Framework & Their Roles

1️⃣ CLR (Common Language Runtime)

CLR - Common Language Runtime(CLR) manages the excution of programs written in any language that  uses the .Net Framework, for example c# ,VB.Net , F# and so on .

Memory (Garbage Collection)

Exception handling

Security

Thread management


🧠 In short: You write code → CLR runs it safely.

Project use example:
In your Buy & Sell Property Application, CLR helps execute all your backend C# logic — like validating property data or saving property details to the database — safely and efficiently.


---

3️⃣ CTS (Common Type System) :

CTS - CTS stands for Common Type System. It has a set of rules  which state how a data type should be declared, defined  and used in the program.

In project:
If another team writes a module in VB.NET (say reporting) and you use C#, CLS ensures both talk properly.


---

 2️⃣ CLS (Common Language Specification) :

CLS - CLS stands for Common Language Specification and it is a subset of CTS. It defines a set of rules and restriction that every language must follow which runs under .net 
framework.

For example, you write a program in diffrent .Net language c#, VB.Net, J# but if their logic and output is same, then the compiled
 output is same, then the compiled output assembly wil be same  for all of them.

In project:
When property data (like price or area) is passed between different services, CTS ensures data types stay consistent.


---

4️⃣ BCL (Base Class Library) or FCL :

Framework Class Library is the collection of classes, namesspaces, interfaces  and value types that are used for .NET applications.
Reading/writing files

Working with strings, collections, dates

Database connectivity (ADO.NET)


In project:
You use List<Property>, File.ReadAllText(), or SqlConnection from BCL to simplify coding.


---

5️⃣ FCL (Framework Class Library)

👉 Think of it like: “BCL + Extra features.”
It’s a bigger library that includes:

ASP.NET

ADO.NET

Windows Forms

WCF, WPF


In project:
You use ASP.NET Core for your web APIs — it’s part of FCL.


---

6️⃣ Compiler

👉 Think of it like: “The Translator.”
It converts your C# code into MSIL (Microsoft Intermediate Language) which CLR can run.


---

7️⃣ Assemblies & Metadata

👉 Think of it like: “Your packed code + labels.”
Assemblies (.dll or .exe) contain your compiled code and metadata (info about your classes, methods).


---

⚙️ Trade-off / Business Impact

✅ Advantages ⚠️ Trade-offs

Provides strong memory management (less crashes) Can be slower than native code sometimes
Easier debugging and exception handling CLR overhead in high-performance systems
Multi-language support (C#, VB.NET, etc.) Large framework size
Secure and stable for enterprise apps Less flexible for non-Windows systems (Framework, not .NET Core)



///////////////////////////////////////////////////////////////////////////////////////////////68>
what is the diffrence between DBMS And RDBMS.
//DBMS
1) DBMS stores data as file.
2) No relationship between data.
3)Normilation is not present.
4) It deals with small quantity of data.
5)Examples : XML.

//RDBMS
1)RDBMS stores data in Tabular form.
2)Data is stored in the  form of table which are RELATED to each other. Eg: Foreign key reelationsheep.
3)Normalization is present.
4)It deals with LARZE amount of data.
5)Example : MySql, PostSql, SqlServer, Oracle.

///////////////////////////////////////////////////////////////////////////69)
//What is a Constrains in SQL? What are its TYPE.
Sql constrains are used to specify rules for the data in a table.
Constrains are used to limit the type of data that can go into a table.

Example

LA PRIMARY KEY field which can uniquely identify each tow in a table

LA FOREIGN Plaid which can uniquely idently sad row in in another table,

4. CHECK constraint helps to validate the valves of cuta meet a particular condition.

CREATE TABLE Students(

10 In NOT NULL PRIMARY KEY

Nase varchar(255) NOT NULL,

CoursaID int FOREIGN REFERENCES Courses (CourseID)。

Age Int NOT NULL CHECK (AGE 18),

AdmissionDate date DEFAULT GETDATE().

CONSTRAINT UC Student UNIQUE (ID, Nane)

6.UNIQUE constraint tells that all the values in the column must be unique

2. NOT NULL maint telh that we cannot store a null value in a

DEFAULT specifies a default value for the colume when on value i specified by the e

//////////////////////////////////////////////////////////////////////////////////70)
//WHAT IS THE DIFFERENCE BETWEEN PRI-MARY KEY AND UNIQUE KEY?

Primary Key

1 Primary Key Can't Accept Null Values.

2 Creates Clustered Index

3

Only One Primary key in a Table

Unique Key

Unique Key Can Accept Only One Null Value

Creates Non-Clustered Index

More than One Unique Key in a Table.
///////////////////////////////////////////////////////71


What is a Trigger in SQL Server?

Triggers are stored programs, which are AUTOMATIC-ALLY executed or fired when some events (insert, delete and update) occur.



---

✅ Why Do We Use Triggers?

To enforce business rules automatically

To log changes or maintain audit trails

To prevent invalid data from being inserted

To enforce relationships or complex constraints

To automatically update other tables



---

📚 Types of Triggers in SQL Server

Category Trigger Type When it Fires

🔁 DML Triggers AFTER Triggers After INSERT/UPDATE/DELETE operations
 INSTEAD OF Triggers Replaces INSERT/UPDATE/DELETE operation
⏱️ DDL Triggers ON DATABASE / ON ALL SERVER On schema changes like CREATE, ALTER
💣 Logon Triggers AFTER LOGON Fires when a user logs in to SQL Server



---

🔁 1. DML Triggers (Data Manipulation Language)

These are most commonly used.

✅ a) AFTER Trigger

Executes after the operation (INSERT, UPDATE, DELETE).


CREATE TRIGGER trg_AfterInsert
ON Employees
AFTER INSERT
AS
BEGIN
   PRINT 'A row was inserted in Employees table.'
END

✅ b) INSTEAD OF Trigger

Executes instead of the operation — can be used on views too.


CREATE TRIGGER trg_InsteadOfDelete
ON Employees
INSTEAD OF DELETE
AS
BEGIN
   PRINT 'Delete operation blocked on Employees table.'
END


---

⏱️ 2. DDL Triggers (Data Definition Language)

Fires when you run commands like CREATE, DROP, or ALTER.

CREATE TRIGGER trg_DDL_Log
ON DATABASE
FOR CREATE_TABLE, DROP_TABLE
AS
BEGIN
   PRINT 'DDL Change detected on the database!'
END


---

💣 3. Logon Triggers

Used to control or monitor SQL Server logins.

CREATE TRIGGER trg_LogonCheck
ON ALL SERVER
FOR LOGON
AS
BEGIN
   PRINT 'A user just logged in.'
END


---

🔍 Trigger Concepts to Understand Deeply

Concept Explanation

INSERTED table Contains new rows being inserted or updated
DELETED table Contains old rows being deleted or updated
Can't call triggers manually Triggers are automatic, not manually executable
Triggers are transactional If a trigger fails, the whole operation rolls back

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////72)
View : view is Virtual table which contains of a subset of data contains in a table of more than one table.

-->View are not stored in memory like table then why to use views :
1> Views can be easily Indexed to improve the performance.
2>Extra security - DBA can hide the actual table names and expose views for read only operation 
3> User don't need to know where data comes from.
4>Don't repeat the same JOINS or filters in 10 places.
--> Remember, in a view query is stored but the data is never stored like a table.


Example :
CREATE VIEW vw_ActiveEmployees AS
SELECT EmpID , FullName ,Department
from Employees
WHERE Status = 'Active';

Select * From vw_ActiveEmployees;

//////////////////////////////////////////////////////////////////////////////////////73)
WHAT IS THE DIFFERENCE BETWEEN HAV-ING CLAUSE AND WHERE CLAUSE?

1. WHERE Clause is used before GROUP BY Clause.

HAVING Clause is used after GROUP BY Clause.

2. WHERE Clause cannot contain AGGREGATE function. HAVING Clause can contain aggregate function.

SELECT COUNT(CustomerID), Country FROM Customers

WHERE Country = "India"

GROUP BY Country

HAVING COUNT (CustomerID) > 5;

////////////////////
WHAT IS SUB QUERY OR NESTED QUERY OR INNER QUERY IN SQL?

A Subquery or Inner query or a Nested query is a query within another SQL query and embedded within the WHERE clause.
///////////////////////////75)
WHAT IS AUTO INCREMENT/ IDENTITY COLUMN IN SQL SERVER?

Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

CREATE TABLE Persons (

Personid int IDENTITY(1,1) PRIMARY KEY,

FirstName varchar(255),

Age int

);

///////////////////////////////////76)
WHAT ARE JOINS IN SQL?

A join clause is used to COMBINE rows from two or more tables, based on a related column between them.

///////////////////////////////////////////////77)
What is join and type ?
LEFT OUTER JOIN: As you can see in the diagram It returns all records from the

left table, and the matched records from the right table.

RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched rec-ords from the left table.

FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.

(INNER) JOIN: Returns records that have matching values in both tables. Inner join is the mostly used join in all joins.

///////////////////////////////////78
WHAT IS SELF-JOIN?

A self-join is a join of a table to itself.

//////////////////////////////////80
WHAT ARE INDEXES IN SQL SERVER?

SQL Indexes are used in relational databases to retrieve data VERY FAST.

They are like indexes at the start of the BOOKS, which pur-pose is to find a topic quickly.

//////////////////////////////81)
WHAT IS CLUSTERED INDEX?

CLUSTERED INDEX

A clustered index defines the order in which data is phys-ically stored in a table.

Clustered index are similar to the Dictionary. See how you will find any word.

There is only one way to find a word so similarly there can be only one clustered index per table possible.

In SQL Server, if you set a primary key on a column then it will automatically create a clustered index on that col-umn.

//////////////////////////82)
WHAT IS NON-CLUSTERED INDEX? NON-CLUSTERED INDEX A non-clustered index is stored at one place and table data is stored in another place. So, this index is not physically stored. It is like the index of a BOOK.

///////////////////////83)
WHAT IS THE DIFFERENCE BETWEEN CLUSTERED AND NON-CLUSTERED INDEX? 1. A clustered index defines the order in which data is physically stored in a table. For example, Dictionary. A non-clustered index is stored at one place and table data is stored in another place. For example, Book Index. 2. A table can have only one clustered index. A table can have multiple non-clustered index. 3. Clustered index is faster. Non-clustered index is slower.


//////////////////////////////84)
HOW TO CREATE CLUSTERED AND NON-CLUSTERED INDEX IN A TABLE? CLUSTERED INDEX When you create a PRIMARY KEY constraint, a clustered  index on the column or columns is automatically created. NON-CLUSTERED INDEX


//////////////////////////85)
IN WHICH COLUMN YOU WILL APPLY THE INDEXING TO OPTIMIZE THIS QUERY. “select id, class from student where name=”happy””? The column after WHERE condition, which is “name” here.


/////////////////////86)
WHAT IS THE DIFFERENCE BETWEEN STORED PROCEDURE AND FUNCTIONS?

/////////////////////87)
HOW TO OPTIMIZE A STORED PROCEDURE OR SQL QUERY? Below are some techniques to optimize a stored procedure: Use SET NOCOUNT ON Specify column names instead of using * in SELECT statement. Use schema name before objects or table names. Example: SELECT EmpID, Name FROM dbo.Employee Do not use DYNAMIC QUERIES. They are vulnerable to SQL Injections. Use EXISTS () instead of COUNT (). Example: IF( EXISTS (SELECT 1 FROM db.Employees)) is better than SELECT Count(1) FROM dbo. Employee Use TRANSACTION when required only
//Got it Abhishek 👍 Let’s make your answer interview-ready with Definition + Project Use + Trade-offs + Business Impact in very simple words.

❓ Interview Question: “How do you optimize a Stored Procedure or SQL Query?”
1. Definition (Easy Words)
👉 Query optimization means: “Making your SQL run faster and use fewer resources (CPU, memory, disk).”
It’s like cooking food quickly without wasting gas or ingredients.

2. Project Use (Buy & Sell Properties App Example)
💡 In our Buy & Sell Property app, we had:

A Property Search Query → Users search by price, city, status (active/sold).
If query is slow → users wait longer, bad experience.
So, we optimized queries to make property search faster.
3. Techniques + Easy Human Explanation
Use SET NOCOUNT ON
👉 Stops sending “rows affected” messages.
Example: 5 rows affected → we don’t need this in API, it just wastes network.

Specify column names instead of SELECT *
👉 Instead of bringing all columns, bring only what you need.
Example: SELECT EmpID, Name FROM dbo.Employee
(In property app: SELECT PropertyName, Price not SELECT *).

Use schema name before table
👉 Example: dbo.Employee
It makes SQL Server find the table faster (like giving full address, not just name).

Avoid Dynamic Queries
👉 Example: Don’t build query with string concat → risk of SQL Injection.
Use parameters instead.

Use EXISTS() instead of COUNT()
👉 If you just want to check if record exists, use EXISTS (stops after first match) → faster.

Use Transactions only when needed
👉 Transactions lock tables. If you don’t need them, avoid them → less blocking.

4. Trade-offs (Things to Consider)
Optimization makes query faster, but sometimes requires more developer effort.
Example: Instead of SELECT *, we write 5–6 column names → a bit longer code, but worth it.
Using indexes helps speed, but takes extra space in database.
5. Business Impact (Easy Words)
Faster query = Faster property search.
Faster = Happy users → More sales.
Less CPU/Memory = Lower server cost for company.
Secure queries = No data leaks / hacking risk.
✅ Final Interview Line:
“In our Buy & Sell Property project, we optimized queries by avoiding SELECT *, using schema names, replacing COUNT with EXISTS, and using transactions carefully. This improved property search speed, reduced server cost, and made the system more secure for customers.”

👉 Do you want me to also add Indexes optimization (clustered vs non-clustered) into this answer? That often comes as a cross-question in SQL interviews.
/////////////////////////////88)
WHAT IS A CURSOR? WHY TO AVOID THEM? A database Cursor is a control which enables traversal/ iteration over the rows or records in the table. It’s a 5-step process: 1. Declare 2. Open 3. Fetch using while loop 4. Close 5. Deallocate

/////////////////////////////89)
WHAT IS THE DIFFERENCE BETWEEN SCOPE_IDENTITY AND @@IDENTITY? scope_identity and @@identity, both are used to get the last value entered in the identity column of the table. The @@identity returns the last identity created in the same session. The session is the database connection. The scope_identity() function returns the last identity created in the same session and the same scope. The scope is the current query or the current stored procedure. Normally we have to use scope_identity() function inside stored procedures.


//////////////////////////90)
WHAT IS CTE IN SQL SERVER? A Common Table Expression, is a TEMPORARY named result set, that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement.

//////////////////////91)
WHAT IS THE DIFFERENCE BETWEEN DELETE, TRUNCATE AND DROP COMMANDS? 

DELETE

1. It is a DML.

2. It is used to delete the one or more rows(data) of a table.

3. It can be rollback.

DELETE FROM Employees WHERE Emp_Id = 7;

TRUNCATE

1. It is a DDL.

2. It is used to delete all rows from the table.

3. It can be rollback.

4. Trincate will remove all the records from the table Employees but not the structure/ schema.

TRUNCATE TABLE Employees;

DROP

1. It is a DDL.

2. It is used to drop the whole table with STRUCTURE/SCHEMA.

3. It can not be rollback.

4. It will remove the structure/schema also.

DROP TABLE Employees;


/////////////////////////////
WHAT ARE ACID PROPERTIES?

ACID properties are used when you are handling transac-tions in SQL.

Atomicity

Each transaction is "all or nothing"

Consistency

Data should be valid according to all defined rules

Isolation

Transactions do not affect each other

Durability

Committed data would not be lost, even after power failure.

//////////////////////////////94
WHAT ARE MAGIC TABLES IN SQL SERVER? Magic tables are the temporary logical tables that are created by the SQL server whenever there are insertion or deletion or update( D.M.L) operations. Types of magic tables: INSERTED – The recently inserted row gets added to the
INSERTED magic table. DELETED – The recently deleted row gets added to the DELETED magic table. The use of magic tables are TRIGGERS.

////////////////////////////////////////////82>
What is NON-CLUSTERED INDEX ?
A non -clustred index is stored at one place and table is stored in another place.So this is not physically stored.

Example :
CREATE TABLE EMPLOYEE(
ID INT PRIMARY KEY , // By default create a clusred indes
NAME  VARCHAR(100),
Salary INT
)
//Example
Non-Clustered Index

CREATE NONCLUSTERED INDEX IX_Employee_Name
ON Employee(name);

Clustered Index = Sorted actual data.
Non-Clustored Index = Pointer to actial data.

//ADVANTAGES
Use it
-> You Serch frequently by coloumns other than the primary key.
Example : SELECT * FROM EMPLOYEE WHERE Name = 'Abhishek';



////////////////////////////////////////////////////////////////////////////////83>
What is the diffrence between clustered and non clustored index ?
=>
A clustered index defines the order in which data is physically stored in a table. for example Dictionary.
A non-clustred index is stored at one place and table data is stored in another place. for example , Bookplace

A table can have only one clustred index.
Atable can have multiple non-clustred index.

Clustered index is faster.
Non-Clustered index is slower.

////////////////////////////////////////////////86>
1. SP may or may not return a value, but Function must return a value
🔸 Stored Procedure Example:
CREATE PROCEDURE sp_GetEmployee
AS
BEGIN
    SELECT * FROM Employees; -- No return needed
END
✅ Here, it just performs an action, doesn't return any single value.

🔹 Function Example:
CREATE FUNCTION fn_GetTotalSalary()
RETURNS INT
AS
BEGIN
    DECLARE @total INT;
    SELECT @total = SUM(Salary) FROM Employees;
    RETURN @total;
END
✅ Function must return a value (here: total salary).

2. SP can have input/output parameters, Function only has input parameters
🔸 Stored Procedure with Output:
CREATE PROCEDURE sp_GetEmployeeCount
    @DeptId INT,
    @Count INT OUTPUT
AS
BEGIN
    SELECT @Count = COUNT(*) FROM Employees WHERE DepartmentId = @DeptId;
END
🔹 Function can only have input:
CREATE FUNCTION fn_GetDeptSalary(@DeptId INT)
RETURNS INT
AS
BEGIN
    DECLARE @salary INT;
    SELECT @salary = SUM(Salary) FROM Employees WHERE DepartmentId = @DeptId;
    RETURN @salary;
END
❌ You cannot use OUTPUT parameters in a function.

3. We can call a Function inside a SP, but cannot call SP inside a Function
✅ Call function inside SP:
CREATE PROCEDURE sp_ShowSalary
AS
BEGIN
    DECLARE @total INT;
    SET @total = dbo.fn_GetTotalSalary(); -- calling function
    PRINT @total;
END
❌ Cannot do this in function:
-- INVALID:
-- You cannot write this inside a FUNCTION

-- EXEC sp_GetEmployee; -- ❌ Not allowed inside a function
4. Cannot use SP in SELECT/INSERT/UPDATE — but can use Function
❌ SP cannot be used:
-- INVALID:
SELECT *, sp_GetEmployee() FROM Employees; -- ❌ Error
✅ Function can be used:
-- Valid:
SELECT Name, dbo.fn_GetDeptSalary(DepartmentId) AS TotalDeptSalary FROM Employees;
✅ Functions can be used inside SELECT, WHERE, JOIN, etc.

5. TRY-CATCH works in SP, not in Function
✅ TRY-CATCH in SP:
CREATE PROCEDURE sp_TryCatchDemo
AS
BEGIN
    BEGIN TRY
        SELECT 1 / 0; -- Will cause error
    END TRY
    BEGIN CATCH
        PRINT 'Error occurred!';
    END CATCH
END
❌ NOT allowed in Function:
-- TRY-CATCH is not allowed inside a FUNCTION in SQL Server
6. Transactions possible in SP, not in Function
✅ SP with transaction:
CREATE PROCEDURE sp_UpdateSalary
AS
BEGIN
    BEGIN TRANSACTION
        UPDATE Employees SET Salary = Salary + 1000;
    COMMIT TRANSACTION
END
❌ Transactions NOT allowed in function:
-- BEGIN TRAN / COMMIT TRAN are not allowed inside FUNCTION
🔚 Summary Table:
Feature	Stored Procedure (SP)	Function
Return Value	Optional	Must return something
Parameters	Input + Output	Input only
Callable from SQL query	❌ No	✅ Yes
Use in SELECT/UPDATE/DELETE	❌ No	✅ Yes
Use inside Function	❌ No	✅ Function only
TRY-CATCH / Transactions	✅ Yes	❌ No


///////////////////////////////////////////////////////////////////////////////////////////////////102> What is the diffrence between ViewData,  ViewBAG And TempData
--> ViewData and ViewBag are used to pass data from CONTROLLER TO VIEW.
--> TempData is used to pass data from Controller TO Controller.

//ViewData REQUIRES TYPECASTING for comming data types whereas ViewBag Doesn't required typecasting for the complex data type.


///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////.NetCore
///////////////////////////////////////////////////////////////////164
//what is .Net Core
=> .Net Core is completely a New framework , which is a Free and Open-Source platorm developed and maintained by Microsoft.
=> Cross Plateform(Windows , Linux , MacOS) 
=> Open Source(Free to use , Modify , Distribute)
=> Hosting(Kestral ,IIS , Nagix)
=> Build-In Dependency Injection(Loosely Coupled Design , Reusability , Testability)
=> Support Multiple IDE(Visual Studio, Visual Studio for Mac , Visual Studio Code).

//////////////////////////////////////////////////////////////165
What is .Net STANDARN ?
=>.Net Standard is not a framework. .Net Standard define a set of API's or you can say libraries or set of rules.
If any Framework will follow these rules that  means it is compliant with .NET standard Right now .NET Framework, .NET Core
and Xamarin follow .Net standard.
/////////////////////////////////////////////////////////////////166
//What is the Advantages of .NetCore OVER .NET FRAMEWORK
.Net core
Cross Plateform => Window ,Linux ,MacOS
OPEN SOURCE => Free to use , Modify, Distribution
HOSTING =>Kestrel , IIS, Nginx.
BUILD-IN DEPENDENCY INJECTION => Loosely Coupled Design, Reusability, Tesability.
Support Multiple IDE => Visual Studio, Visual Studio for Mac , Visual Studio Code.


.NETFRAMEWORK
.Net Framework only supports Windows.
.NET Framework is paid.
.NET Framework only support IIS Hosting.
.NET framework don't have build in dependency injection.
.NET framework only support Visual Studio IDE.

//.NET 5 /.NET 6 /.NET 7
///.                       .NET 5       .Net 6          .Net 7
Release Year              2020          2021             2022
Support Type              STS           LTS              STS
C# Version                 9             10              11
Minimal Api                no            yes            yes(Improved)
Hot Reload                 no            yes           yes(Improved)
Performance                Good          Excellent       Best

/////////////////////////////////////////////////////////////////////////////////////////170
What is the role of configuration methods ? 
=>Configuration method specifies how the app responds to Http request and responde .It is used to setup request pipeline. 
it is not optional
//Example :

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
if (env.IsDevelopment())
{
app. UseDeveloperExceptionPage();
}
else
{
}

app.UseExceptionHandler("/Home/Error");

app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.UseEndpoints (endpoints =>

{

endpoints.MapControllerRoute(

name: "default",

pattern: "(controller-Home}/{action-Index}/{id?)");

});

/////////////////////////////////////////////////////////////////////////////////////////Dependency Injection
What is Dependency Injection

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////195 In-Memory Caching (local to one server) , Distributed Caching , Redis
In-Memory Caching (local to one server)

Cache is stored in the memory (RAM) of the application server.

Very fast, but available only to that server.

Real-world example:

Imagine you run a blog website hosted on a single server.

You want to show the Top 10 Most Read Articles.

These results don't change very often, so instead of hitting the database each time, you store them in the server's memory (cache).

Every time a user requests, you just return the cached result very fast.

Best when:

App runs on a single server.

Data is small, frequent, and not critical to be shared across multiple servers.

//////
Distributed Caching (shared across servers/nodes)

← Cache is stored in an external system (like Redis, SQL Server, or NCache).

Accessible by multiple servers.

Real-world example:

Imagine you run an E-commerce app like Amazon hosted on multiple servers.

Thousands of users add products to their shopping cart.

If you store the cart in In-Memory cache, and the user's next request goes to a different server X their cart will be empty!

Solution: Use a Distributed Cache (like Redis).

Now all servers share the same cache store no matter which server the user lands on, their cart will be there.

Best when:

App runs on multiple servers (load balanced).

Data is critical & needs to be consistent across servers.


////Redis
 Definition (like a 5-year-old can say)

> “Redis is like a super-fast notebook where your computer keeps things it wants to remember for a short time, so it doesn’t have to go find them again and again.”




---

💡 Slightly more technical definition (interview-friendly)

Redis is an in-memory data store used for caching, session storage, and real-time data processing.
It stores data in RAM (memory), not on disk, which makes it very fast for reading and writing.

Redis = Remote Dictionary Server.


---

🧩 Example (with detailed explanation)

Imagine your Buy & Sell Property App where users search for properties.
If 1000 users search for “2BHK Flats in Mumbai”, your app should not call the database 1000 times — that’s slow.

So what we do:

1. The first time someone searches, we get data from the database and store it in Redis cache.


2. Next time, when users search the same thing — we get data from Redis (memory) instantly instead of going to the database again.


3. This makes the application faster and more scalable.




---

🧑‍💻 Code Example (C# – Using Redis in .NET)

// Step 1: Install Microsoft.Extensions.Caching.StackExchangeRedis package

public class PropertyService
{
    private readonly IDistributedCache _cache;

    public PropertyService(IDistributedCache cache)
    {
        _cache = cache;
    }

    public async Task<string> GetPropertiesAsync()
    {
        string cacheKey = "property_list";
        var cachedData = await _cache.GetStringAsync(cacheKey);

        if (cachedData != null)
        {
            // ✅ Return from Redis cache
            return $"From Redis Cache: {cachedData}";
        }

        // 🚀 Simulate data from database
        string dbData = "2BHK Flats, 3BHK Villas, Farmhouses";

        // 🧠 Save to Redis for next time
        await _cache.SetStringAsync(cacheKey, dbData, new DistributedCacheEntryOptions
        {
            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)
        });

        return $"From Database: {dbData}";
    }
}


---

🏗️ Project Use (Buy & Sell Properties App)

In your project, Redis can be used for:

Property search caching → to reduce DB load and speed up search results.

User session storage → store user login info temporarily.

Chat messages → for real-time buyer–seller communication.



---

⚖️ Trade-offs

Advantage Disadvantage

Super fast (in-memory) Data lost if Redis server restarts (unless persisted)
Reduces database load Requires additional setup & maintenance
Supports distributed apps easily Slight learning curve for configuration



---

💼 Business Impact

✅ Faster application performance → Better user experience
✅ Handles heavy traffic easily → More users can search at once
✅ Reduces database cost → Fewer calls to SQL Server
🚀 Direct impact: Your property platform feels instant and professional, like big apps (99acres, MagicBricks).

///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////END OF KINDLE
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////Singleton
✅ Interview-Friendly Answer:
Q: What is a Singleton Class in C#?

A Singleton is a special class where only one object (instance) can be created during the application's lifetime.
It's useful when you need just one shared thing, like a single database connection, a logging service, or a settings manager.

💡 Real-World Analogy:
Think of a TV Remote in a room — you don’t need 10 remotes.
Everyone uses the same one to control the TV.
That’s how a Singleton works — one object shared everywhere.

🧠 Why use Singleton?
To share data across multiple places.
To save memory and avoid creating duplicate objects.
To make sure there’s only one access point to something.
✅ Simple Code Example:
public class SingletonLogger
{
    private static SingletonLogger _instance;

    // Private constructor: no one can create from outside
    private SingletonLogger() { }

    // Public method to get the single instance
    public static SingletonLogger GetInstance()
    {
        if (_instance == null)
        {
            _instance = new SingletonLogger();
        }

        return _instance;
    }

    public void Log(string message)
    {
        Console.WriteLine("Log: " + message);
    }
}
🔄 How to Use It:
class Program
{
    static void Main()
    {
        var logger1 = SingletonLogger.GetInstance();
        var logger2 = SingletonLogger.GetInstance();

        logger1.Log("App started");
        logger2.Log("Something happened");

        Console.WriteLine(logger1 == logger2); // true — same object
    }
}
✅ Summary (for Interview):
Singleton ensures only one instance of a class exists.
Useful for things like Logger, Config Manager, DB Connection.
It helps avoid duplication and keeps things centralized.
Would you like me to show the Thread-safe version or how Singleton is used in ASP.NET Core (like in services)?





Great question! Interviewers love asking about Thread-Safe Singleton — especially for multithreaded apps.





---



✅ Interview-Friendly Explanation:



Q: How to make Singleton thread-safe in C#?



> In multithreaded apps, multiple threads might try to create the Singleton at the same time — which can break the "only one object" rule.

So, we use locking to make sure only one thread can create the object — this is called thread-safe Singleton.







////////////////////
//How to make Signaloton Thread Safe
---



💡 Think of a Bank ATM



Only one person can withdraw at a time.

If two people try at once, the system must lock the ATM temporarily — that’s thread safety.





---



✅ Code: Thread-Safe Singleton (with lock)



public class SingletonLogger

{

    private static SingletonLogger _instance;

    private static readonly object _lock = new object();



    // Private constructor

    private SingletonLogger() { }



    public static SingletonLogger GetInstance()

    {

        // Lock to allow only one thread inside this block at a time

        lock (_lock)

        {

            if (_instance == null)

            {

                _instance = new SingletonLogger();

            }

        }



        return _instance;

    }



    public void Log(string message)

    {

        Console.WriteLine("Log: " + message);

    }

}





---



🧪 How to Use:



class Program

{

    static void Main()

    {

        var logger1 = SingletonLogger.GetInstance();

        var logger2 = SingletonLogger.GetInstance();



        Console.WriteLine(logger1 == logger2); // ✅ true: same object

    }

}





---



✅ Summary (for interview):



Use lock to make Singleton thread-safe.



lock ensures only one thread creates the object.



This avoids race conditions in multithreaded environments.



////////////////////////////////////////////////////////////////
//What is reference type and Value Type
--> “Value types store actual values in stack memory . Reference types store the memory address and point to shared data in heap. 

-->with value types, changes don’t affect others. But with reference types, changes reflect across all references.”

-->🔍 Common Value Types in C#:

int, float, bool, char, double, struct


-->🔍 Common Reference Types in C#:

class, string, array, object, interface.

-->
EXAMPLE : 
Code Example (Value Type):

int a = 5;
int b = a;
b = 10;

Console.WriteLine(a); // Output: 5
Console.WriteLine(b); // Output: 10

📌 a and b are separate copies, so changing b does not affect a.
-->
 Code Example (Reference Type):

class Person
{
    public string Name;
}

Person p1 = new Person { Name = "Abhishek" };
Person p2 = p1;
p2.Name = "Sunil";

Console.WriteLine(p1.Name); // Output: Sunil
Console.WriteLine(p2.Name); // Output: Sunil


/////////
Definition (in simplest words)
🧱 Value Type
Think of a Value Type as a real object kept inside your own box.
When you give it to someone, they get a copy of it — not the same box.
🧠 Example:
If you have one toy (like a car) and your friend wants one, you make a copy and give it.
Both play separately — one breaks, the other is fine.

📘 In C#:
int, float, bool, struct, enum are Value Types.

🔗 Reference Type
Think of a Reference Type as a note with directions to where the object is kept.
When you give that note to someone, you both point to the same object.
🧠 Example:
You and your friend both share one remote car — if your friend changes its color, you’ll see the same color change, because it’s the same object.

📘 In C#:
class, array, string, interface, delegate are Reference Types.

💻 Example in Code
int a = 10;
int b = a;
b = 20;
Console.WriteLine(a); // Output: 10 — Value Type makes a copy

Person p1 = new Person { Name = "Abhishek" };
Person p2 = p1;
p2.Name = "John";
Console.WriteLine(p1.Name); // Output: John — Reference Type shares the same memory
🏢 Project Use (Buy & Sell Properties App)
When storing property details (like Price, Area, Id), you use Value Types because each property has its own independent value.
When dealing with objects like User, Owner, or PropertyModel, you use Reference Types, since you want to work with shared data objects across layers (Controller → Service → Repository).
⚖️ Trade-offs (Pros & Cons)
Type	Pros	Cons
Value Type	Faster to access (stored in stack), no side effects	Copies use more memory if many duplicates
Reference Type	Can share data easily	Changes in one place affect all references, needs Garbage Collection
💼 Business Impact
✅ Using Value Types for independent data (like property price) keeps performance fast.
✅ Using Reference Types for shared entities (like user sessions, property models) helps reuse data and avoid duplication.
⚠️ But mixing them wrongly can lead to bugs or unnecessary memory use.

////////////////////////////////////////////////////////////////////////////All the satus code

//Frequently used
200 OK. You'll hopefully see this response code in the majority of your API calls. ...
201 Created. ...
301 Moved Permanently. ...
302 Found. ...
404 Not Found. ...
429 Too Many Requests. ...
401 Unauthorized. ...
500 Internal Server Error.

//All Satus code


1xx Informational:
Indicates that the request was received and understood. These are temporary responses and consist of a Status-Line and optional headers, and are terminated by an empty line.
100 Continue: The client should continue with its request.
101 Switching Protocols: The server is switching protocols.
2xx Success:
Indicates that the client's request was successfully received, understood, and accepted. 
200 OK: Standard success response for various requests.
201 Created: The request has succeeded and a new resource has been created. Commonly used after a POST request. 
202 Accepted: The request has been accepted for processing, but the processing is not yet complete.
204 No Content: The server successfully processed the request, but is not returning any content.
3xx Redirection:
Indicates that further action needs to be taken by the user agent to fulfill the request.
301 Moved Permanently: The resource has been permanently moved to a new URI.
302 Found: The resource is temporarily located at a different URI.
304 Not Modified: The client's cached version of the resource is still valid.
4xx Client Error:
Indicates that the client's request contains bad syntax or cannot be fulfilled. 
400 Bad Request: The server cannot process the request due to a client error (e.g., malformed syntax).
401 Unauthorized: The request requires user authentication.
403 Forbidden: The server understood the request but refuses to authorize it.
404 Not Found: The server cannot find the requested resource.
405 Method Not Allowed: The HTTP method used is not supported for the requested resource.
409 Conflict: The request could not be completed due to a conflict with the current state of the resource.
429 Too Many Requests: The user has sent too many requests in a given amount of time.
5xx Server Error:
Indicates that the server failed to fulfill an apparently valid request. 
500 Internal Server Error: A generic error message, given when an unexpected condition was encountered by the server.
501 Not Implemented: The server does not support the functionality required to fulfill the request.
503 Service Unavailable: The server is currently unable to handle the request due to temporary overloading or maintenance.

/////////////////////////////////////////////////////////////////////////Web Api Security
1. Authentication (Who are you?)
This step checks who the user is.
Example: Login with username/password → API gives a token (JWT or OAuth2).
Every time the user calls API, they must send this token in the request header.
If token is missing or fake → API rejects.
👉 This makes sure only real users can call the API.

2. Authorization (What can you do?)
After knowing the user, we check what permissions they have.
Example:
A buyer can view properties but cannot delete.
An admin can manage users and listings.
This is usually role-based or policy-based in .NET.
👉 This makes sure users cannot do operations outside their role.

3. Data Protection (Keep data safe in travel)
Use HTTPS so data is encrypted while moving between server and client.
Use password hashing & encryption in database (never store plain text).
Example: bcrypt, SHA-256.
👉 This protects from hackers stealing sensitive info.

4. Other API Security Best Practices
CORS Policy → Only allow trusted websites/apps to use your API.
Rate Limiting / Throttling → Prevent misuse by limiting requests per user.
Input Validation → Avoid SQL Injection, XSS by cleaning user input.
Logging & Monitoring → Keep track of suspicious activities.
API Gateway / Firewall → Extra shield for enterprise systems.
🚀 Example (in .NET + Angular project like yours):
User logs in → API checks credentials → API returns a JWT token.
Angular app stores token (in memory/local storage).
For every API call → Angular sends token in Authorization header.
.NET API middleware validates token → allows or denies request.

////////////////////////////////////////////////////////////////////////////////////////Performance
1. Use Asynchronous Code (async/await) –

Don’t block the thread. Example: Instead of waiting for a database call to finish, let the app do other work in parallel.





2. Caching –

Store frequently used data in memory (like Redis or In-Memory Cache) so we don’t always hit the database.





3. Database Optimization –



Use AsNoTracking() in EF Core for read-only queries (it avoids unnecessary tracking).



Write efficient SQL queries and indexes.







4. Use Dependency Injection Wisely –

Register services with correct lifetimes (Singleton, Scoped, Transient) so memory is not wasted.





5. Reduce Startup Time –

Only load what is needed when the application starts.





6. Compression & Minification –

Enable response compression (gzip/brotli) so data transfer is smaller.





7. Logging & Monitoring –

Use structured logging (Serilog, Application Insights) to find performance bottlenecks.





8. Use Background Services –

Heavy tasks (like sending emails, reports) should run in background jobs (Hangfire, Quartz) instead of blocking user requests.


////////////////////////////////////////////////////////////////////////////////////////////.Single() and Include()
.Include() is used in Entity Framework(EF/EF core) to eager load relatedd entities(like a SQL JOIN) .
.Include() = eager loading (load related data immediately).
////////////////////////////////////////////////////////////////////////////////////////////Thread and vax thread.
////////////////////////////////////////////////////////////////////////////////////////////Condition aggretion  (sql)
SUM() , Count() , AVG() .
////////////////////////////////////////////////////////////////////////////////////////////Single IR 
Single IR in live data processing means using a single integration Runtime(the engine of ADF / Synapse) to fetch transform ,and load live seaming data with low latency and less overhead , instead of manahging multiple IRs. 
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////What are design patter used in making Stock market application.
1. Observer Pattern (very important in stock market apps)
Why: Stock prices keep changing in real time. If one price changes, all users looking at that stock should get updated immediately.
How: Observer pattern allows me to notify all users automatically whenever there is a change.
Example in app: When the price of TCS shares changes, all traders' dashboards update instantly.
2. Factory Pattern
Why: The application might need to create different types of financial instruments (Stocks, Bonds, Mutual Funds, Options). Instead of writing messy new everywhere, a Factory can create objects in a clean way.
Example in app: If tomorrow a new type of asset is added, we don’t have to change everywhere, just extend the factory.
3. Singleton Pattern
Why: Some components like logging service, configuration, cache, or database connection should have only one instance across the whole app.
Example in app: One global configuration for connecting to stock market APIs.
4. Strategy Pattern (optional, but good to mention)
Why: Different users might have different order execution strategies (e.g., Market Order, Limit Order, Stop Loss). Strategy pattern allows plugging in new algorithms without rewriting code.
Example in app: A trader can switch between "Market order" and "Limit order" easily.
🎯 Final Easy Answer (interview-ready):

"For a stock market application, I would use the Observer pattern to handle real-time stock price updates to all users, the Factory pattern to create different financial instruments cleanly, and the Singleton pattern for shared resources like logging or database connections. If we need different trading strategies, I can also use the Strategy pattern. These patterns will keep the system scalable, easy to maintain, and ready for future changes."

/////////////////////////////////////////////////////////////////////////////////Observable Patter
👉 "Observer Pattern is like a WhatsApp group.

When the admin posts a message (event), all group members (subscribers) get notified immediately.
In stock market applications:
 1. Observer

👉 An Observer is like a person waiting for updates.
It says: “Tell me when something changes.”

Example:
You (Observer) subscribe to a YouTube channel. You don’t keep checking daily—YouTube tells you when a new video is uploaded.


---

🔹 2. Observable

👉 An Observable is the thing that produces updates.
It’s the source of truth that others can watch.

Example:
The YouTube channel is the Observable. It produces videos (data/events) and notifies all subscribers (Observers).


---

🔹 3. Subscriber

👉 A Subscriber is the one who connects to the Observable to actually receive the updates.

Example:
When you click “Subscribe” on YouTube, you become a Subscriber. Now whenever a video is uploaded, you’ll get notified.


The Stock is the subject (Observable).
Investors/Traders are observers (Subscribers).
When a stock price changes, the Stock notifies all Investors instantly.
This way, we avoid checking prices again and again, and changes are pushed in real-time."
---
🏢 Enterprise-Level Example: Stock Market
We’ll implement a Stock Price Notification System using the Observer Pattern.
Step 1: Create Observer Interface
// IObserver.cs

public interface IObserver

{

    void Update(string stockName, decimal price);

}



Step 2: Create Subject (Observable) Interface



// IStock.cs

public interface IStock

{

    void Attach(IObserver observer);

    void Detach(IObserver observer);

    void Notify();

}



Step 3: Concrete Subject (Stock)



// Stock.cs

using System.Collections.Generic;



public class Stock : IStock

{

    private List<IObserver> _observers = new();

    private string _stockName;

    private decimal _price;



    public Stock(string stockName, decimal price)

    {

        _stockName = stockName;

        _price = price;

    }



    public void Attach(IObserver observer) => _observers.Add(observer);

    public void Detach(IObserver observer) => _observers.Remove(observer);



    public void SetPrice(decimal price)

    {

        _price = price;

        Notify(); // Notify observers whenever price changes

    }



    public void Notify()

    {

        foreach (var observer in _observers)

        {

            observer.Update(_stockName, _price);

        }

    }

}



Step 4: Concrete Observer (Investor)



// Investor.cs

public class Investor : IObserver

{

    private string _name;



    public Investor(string name)

    {

        _name = name;

    }



    public void Update(string stockName, decimal price)

    {

        Console.WriteLine($"Notification for {_name}: {stockName} is now ₹{price}");

    }

}



Step 5: Test Implementation



// Program.cs

using System;



class Program

{
    static void Main()

    {

        // Create Stock (Observable)

        Stock reliance = new Stock("Reliance", 2500);



        // Create Investors (Observers)

        Investor abhishek = new Investor("Abhishek");

        Investor rahul = new Investor("Rahul");



        // Attach observers

        reliance.Attach(abhishek);

        reliance.Attach(rahul);



        // Price Change -> Notifies Investors

        reliance.SetPrice(2600);

        reliance.SetPrice(2700);



        // Rahul leaves the subscription

        reliance.Detach(rahul);



        // Only Abhishek gets notified

        reliance.SetPrice(2800);

    }

}





---



✅ Output



Notification for Abhishek: Reliance is now ₹2600

Notification for Rahul: Reliance is now ₹2600

Notification for Abhishek: Reliance is now ₹2700

Notification for Rahul: Reliance is now ₹2700

Notification for Abhishek: Reliance is now ₹2800





---



🏆 Where is this used in real enterprise apps?



Stock Market / Trading Apps (price updates → traders)



News Feeds (new post → followers)



E-commerce (stock available → notify users)



Event-driven Microservices (publish/subscribe model)

////////////////////////////////////////////////////////////////////////////////Factory
The Factory Pattern is one of the most commonly asked design patterns in interviews, especially for enterprise-level applications.


---

🔹 What is Factory Pattern (easy words)

Think of a Factory as a machine that creates objects for you.

Instead of using new everywhere in your code, you tell the factory:
👉 "Hey, I need an object of type X."
👉 The factory decides which class to create and gives it to you.


This makes your code:
✅ Clean
✅ Flexible
✅ Easy to extend (you just add new products without changing existing code).


---

🔹 Real-World Enterprise Example: Payment System

Imagine you’re building an E-commerce application.

Payment can be done via Credit Card, PayPal, or UPI.

Instead of writing new CreditCardPayment() everywhere,
we create a PaymentFactory that gives the right object.



---

🔹 Step 1: Define Payment Interface

public interface IPayment
{
    void Pay(decimal amount);
}


---

🔹 Step 2: Implement Different Payment Methods

public class CreditCardPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using Credit Card.");
    }
}

public class PayPalPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using PayPal.");
    }
}

public class UpiPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using UPI.");
    }
}


---
🔹 Step 3: Create Factory

public class PaymentFactory
{
    public static IPayment GetPayment(string paymentType)
    {
        return paymentType.ToLower() switch
        {
            "creditcard" => new CreditCardPayment(),
            "paypal" => new PayPalPayment(),
            "upi" => new UpiPayment(),
            _ => throw new ArgumentException("Invalid payment type")
        };
    }
}


---

🔹 Step 4: Use Factory in Application

public class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Enter Payment Method (CreditCard / PayPal / UPI):");
        string method = Console.ReadLine();

        Console.WriteLine("Enter amount:");
        decimal amount = Convert.ToDecimal(Console.ReadLine());

        IPayment payment = PaymentFactory.GetPayment(method);
        payment.Pay(amount);

        Console.ReadKey();
    }
}


---

🔹 Example Run

Enter Payment Method (CreditCard / PayPal / UPI):
paypal
Enter amount:
1500
Output → Paid 1500 using PayPal.


---

🔹 How This Helps in Enterprise Applications

Suppose tomorrow your company adds Bitcoin Payment 🚀
👉 You just add a new BitcoinPayment class and extend the factory.
👉 No need to touch existing code → Open/Closed Principle (SOLID).



---

✅ Easy answer for manager/interviewer:
"I’ll use the Factory Pattern whenever I need to create objects of different types, like different payment methods in a stock market or e-commerce application. This way, adding new types is easy, and I don’t repeat object creation logic everywhere."

////////////////////////////////////////////////////////////////////////////////Signalton
💡 Easy Explanation (Human-Friendly)

Singleton Pattern means → Only one object (instance) of a class exists in the whole application.

It’s like:

A Government → only one Prime Minister exists.

A Logger Service → only one logging instance writing to the file.

A Database Connection Pool → only one shared object controlling all DB connections.



So, instead of creating multiple objects again and again, we use one shared object everywhere.


---

🏗️ C# Singleton Code (Basic)

public sealed class Logger
{
    // 1. Create a private static instance (only one)
    private static readonly Logger _instance = new Logger();

    // 2. Private constructor (nobody can create object from outside)
    private Logger() 
    {
        Console.WriteLine("Logger instance created!");
    }

    // 3. Public property to access the instance
    public static Logger Instance
    {
        get
        {
            return _instance;
        }
    }

    // 4. Example method
    public void Log(string message)
    {
        Console.WriteLine($"[LOG]: {message}");
    }
}


---

🏢 Enterprise-Level Example (Real Use Case)

Let’s say we are building a Stock Market Application.
We need one central Logger to log all buy/sell activities.

public class StockMarket
{
    public void BuyStock(string stock, int quantity)
    {
        Logger.Instance.Log($"Buying {quantity} shares of {stock}");
    }

    public void SellStock(string stock, int quantity)
    {
        Logger.Instance.Log($"Selling {quantity} shares of {stock}");
    }
}


---

✅ Testing the Singleton

class Program
{
    static void Main(string[] args)
    {
        StockMarket market1 = new StockMarket();
        StockMarket market2 = new StockMarket();

        market1.BuyStock("AAPL", 50);
        market2.SellStock("GOOG", 20);

        // Both are using the same Logger instance
        Logger logger1 = Logger.Instance;
        Logger logger2 = Logger.Instance;

        Console.WriteLine(Object.ReferenceEquals(logger1, logger2) 
            ? "Both are same instance (Singleton works!)"
            : "Different instances (Singleton failed!)");
    }
}


---

🏆 Output

Logger instance created!
[LOG]: Buying 50 shares of AAPL
[LOG]: Selling 20 shares of GOOG
Both are same instance (Singleton works!)


---

🎯 Interview Answer (Easy Words)

👉 “I will use the Singleton Pattern when I want only one object in the whole system. For example, in a Stock Market application, I can have only one Logger instance to track all buy/sell transactions. This ensures consistency, saves memory, and prevents conflicts.”


///////////////////////////// 
///////////////////////////////C#
////////////////////////////////
What is latest version of c#
What is Managed and umanged code
What is use of delegate 
What is diffrence between early and late binding.
`What happens if the inherited interfaces have conflicting method names ?
what is the Constructor Chaining in c#
what the diffrence between the Arrays.CopyTo() and Array.Clone()?
what is Indexers in c#
what is the diffrence between the Is and As operators in c#
What is an Object Pooling
what is virtual method in c#
what are Anonymous type in c#
what is the file handling in c#
What are the type of classes in c#


Great that you asked this, Abhishek 👍 because this is a classic real-world scenario interview question. Let me explain step by step in super easy words how Authorization works in your Buy & Sale Property Application.

1️⃣ First Step – Authentication (Who are you?)
When the user logs in (Buyer, Seller, or Admin), they enter username + password.
The backend checks in the database if the credentials are correct.
If correct, the backend issues a JWT Token that contains user info + role (Buyer, Seller, Admin).
👉 Example of JWT payload:

{
  "id": 101,
  "username": "abhishek",
  "role": "Admin",
  "exp": 1736022000
}
2️⃣ Second Step – Token Sent with Requests
Every time the frontend (Angular) calls an API (like /properties, /transactions), it attaches the JWT token in the request header:
Authorization: Bearer eyJhbGciOiJIUzI1...
3️⃣ Third Step – Authorization (What can you do?)
Now the backend checks the role inside the token.
Based on the role, it allows or denies access.
👉 Example in .NET Core API:

[Authorize(Roles = "Admin")]
[HttpPost("approve-property")]
public IActionResult ApproveProperty(int propertyId)
{
    // Only admin can approve properties
    return Ok("Property approved!");
}

[Authorize(Roles = "Seller")]
[HttpPost("add-property")]
public IActionResult AddProperty(Property property)
{
    // Only sellers can add property
    return Ok("Property added!");
}

[Authorize(Roles = "Buyer,Seller")]
[HttpGet("view-properties")]
public IActionResult GetProperties()
{
    // Both buyers and sellers can view properties
    return Ok();
}
4️⃣ Example Flow in Your App
Buyer logs in → gets token with role = "Buyer".
They can search, view properties, chat with sellers, but cannot approve or reject listings.
Seller logs in → gets token with role = "Seller".
They can add new property, update price, but cannot view payment reports.
Admin logs in → gets token with role = "Admin".
They can approve/reject properties, manage users, view reports.
🎯 Interview-Friendly Short Answer
👉 “In my property buy/sell app, we use JWT Authentication to identify the user. The JWT contains the role (Buyer, Seller, Admin). On each API call, the backend checks this role and applies [Authorize(Roles="...")].
This way, the application knows who the user is and what they are allowed to do. For example, only admins can approve listings, only sellers can add properties, and buyers can only view and purchase properties.”

Would you like me to also show you step-by-step Angular code (like how you store the JWT in localStorage and check role in guards for routing)? That’s another interview follow-up they usually ask.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////State Management

Great question, Abhishek 👍 because state management comes up a lot in interviews when they want to test whether you understand how web applications keep track of user data between requests.


---

🌍 First, Why State Management?

HTTP is stateless → every request from the client to the server is independent.

That means, by default, the server doesn’t remember who you are between two requests.


👉 Example: You log in → request is done → on the next request, server doesn’t know you’re logged in unless you manage state.

So, State Management = techniques to store and retrieve user/session data across requests.


---

🏗️ State Management in ASP.NET Core

1. Client-Side State Management

Data is stored on the client (browser).

Examples:

Cookies – small data stored in browser, can persist even after closing the browser.

Response.Cookies.Append("UserRole", "Admin");

Local Storage / Session Storage (Angular/JS) – used to store JWT tokens, user info.

Hidden Fields in forms.



✅ Advantage: reduces server load.
❌ Disadvantage: can be tampered if not encrypted.


---

2. Server-Side State Management

Data is stored on the server.

Examples:

Session State

Stores data per user session on the server.

Works using a cookie (Session ID) to identify the session.


HttpContext.Session.SetString("UserRole", "Admin");
var role = HttpContext.Session.GetString("UserRole");

Cache / MemoryCache / Distributed Cache

Store frequently used data to improve performance.

Distributed cache (like Redis, SQL Server) is used in load-balanced apps.


services.AddDistributedMemoryCache();
services.AddSession();



✅ Advantage: safer, more control.
❌ Disadvantage: consumes server memory.


---

3. Token-Based State (Modern Approach)

Instead of session storage, in modern apps we often use JWT tokens.

The token contains the state (user id, roles, expiry) and is stored client-side.

Server doesn’t store session data, just validates the token with a secret key.


✅ Advantage: scalable, no server memory usage.
❌ Disadvantage: Token size can grow, needs refresh token strategy.


---

🎯 Interview-Friendly Answer

👉 “State management in .NET Core means maintaining user data across multiple requests because HTTP is stateless.
We can manage state client-side using cookies, local storage, or hidden fields, and server-side using session state, cache, or distributed cache.
In modern apps, I mostly use JWT token-based state management, where the token carries user info like ID and roles, and the server validates it on each request.
For example, in my property app, once a user logs in, we issue a JWT token stored in localStorage. The backend extracts the user’s role from the token to handle authorization.”


---

⚡Abhishek, do you want me to also prepare scenario-based cross-questions that interviewers might ask on state management (like Session vs JWT, when to use Cache, etc.)?


Show quoted text
What is latest version of c#

The latest stable version of C# is C# 13.0, released with .NET 9. 

If you need, I can also mention what new features came with C# 13 so it sounds strong in an interview.

Perfect 👍 Let’s make this interview-ready and easy to remember.


---

🔥 New Features in C# 13 (with .NET 9)

Here are the highlight updates:

1. Field keyword in Primary Constructors

You can directly create a field inside a primary constructor parameter.


class Student(string name, int age)
{
    private field int age = age; // new keyword 'field'
}


2. Partial Properties

Just like partial classes, now properties can be declared as partial and implemented in another part of the class.


partial class Person
{
    public partial string Name { get; }
}


3. Lock Object Simplification

You can now lock on a value directly without creating a separate object.


lock (someLock)
{
    // thread-safe code
}


4. ref readonly Parameters

Allows passing parameters by reference without allowing modification.


void Print(ref readonly int number)
{
    Console.WriteLine(number);
}


5. Method Group Natural Type Improvements

Better support for method group conversions when passing methods as delegates.



6. Improved Interpolated Strings

More performance improvements when using $"..." interpolations.





---

🎯 Interview-Friendly Answer

> “The latest version of C# is 13, released with .NET 9. It introduced useful features like the field keyword in primary constructors, partial properties, ref readonly parameters, and better support for locks and interpolated strings. These updates make code more concise, safe, and developer-friendly.”




---

👉 Do you want me to also make a simple diagram or table comparing C# 12 vs C# 13 so you can quickly revise before interviews?


/////////////////////////////////////////
What is Managed and umanged code interview questions


Great one 👍 This is a very common C# interview question. Let’s break it down in simple words + interview style.


---

⚡ Managed Code vs Unmanaged Code

🔹 Managed Code

Code that runs under the control of the .NET runtime (CLR).

CLR takes care of memory management, garbage collection, type safety, and security.

Example: Any C# or VB.NET code.


// Example of Managed Code
public class Test
{
    public void SayHello()
    {
        Console.WriteLine("Hello, Managed World!");
    }
}


---

🔹 Unmanaged Code

Code that runs directly on the operating system (outside CLR).

You need to manually handle memory allocation and cleanup.

Example: C, C++, COM components, Win32 APIs.


// Example of Unmanaged Code (C++)
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, Unmanaged World!";
    return 0;
}


---

🎯 Interview-Friendly Answer

> “Managed code is the code that runs under the control of CLR in .NET, where memory management and garbage collection are automatic. Unmanaged code runs directly on the OS, like C or C++ code, where the developer must manually manage memory and resources.”




---

🤔 Possible Cross Questions

1. Can .NET work with unmanaged code?
✔ Yes, using P/Invoke (Platform Invocation Services) and COM Interop.


2. Why is managed code safer?
✔ Because CLR ensures type safety, garbage collection, and prevents memory leaks.


3. Can you give an example where you need unmanaged code in a .NET project?
✔ For performance-critical operations or using existing C/C++ libraries (like image processing, hardware drivers).




---

👉 Do you want me to also prepare a short diagram showing CLR in between managed and unmanaged code for quick revision?


Show quoted text

/////////////////////////////////////////////
////////////////////////////////////////////SQL
///////////////////////////////////////////
//////////////////////////////////////////////////What is the Window Authentication Mode in SQL.
-> It is one of the authentication methods used by SQL Server to control how users connect to the database.
-> In Windows Authentication Mode, Sql  Server relies on the Windows operating system credential(username & password of the logged-in Windows user).
That means we 
//////////////////////////////////////////////Give an example of a function in an SQL server that return the first non-null expression from more than one coloum in argument.
Explain the one-to-many relationship in the SQL Server database.
what is the significance of CHECK in SQL Server ?
What is the significance of CHECK in SQL Server ?
When the records be deleted from a view in SQL Server ?
List down some of the feature of MS SQL Server ?
Which command can be used to get the version of SQL Server ?
In SQL Server, which is a user defined function ?
Explain the replicated in SQL Server
Define the referential integration.
What are TCL Command? and List down the the TCL Command available on SQL Server ?
Write a SQL Server Query to get the letter 'e' in the name 'Jenna' from  the student table.
As a SQL developer , how will you ensure that SQL server-based application  and database perform well ?
when should Server-based cursors be used ?   
Tell us about the working of the FLOOR function.       
What do you know about scheduled tasks in SQL Server ?  
Mention a query that return the list of triggers in a database 
Diffrence between rollback and commit.                    
Explain how to create a table in SQL ?
what is the function of a foreign key in a database
Tell us the steps to hide SQL Server Instances.
Explain the DBCC command and its use.
Describe the SIGN function.
Define alternate key.
Define Join. What are the diffrence types of Joins ?
Tell about the use of UPDATE STATICS.
Define Full backup.
In SQL, what is meant by the identity column ?
Explain the UNIQUE KEY constraint.
Define the process of de-normalization.
Show how table type constraint can be applied to a table.
35. Differentiate between derived persistent attribute and derived attribute.


///////////////////////////////////////////////////////////////////////////
How you have implemented Microservices.
Have you used any static tools.
What are you following to make the standard.
Tell me about the Project.
What kind of work you are doing for in Angular.



//////////////////////////////////////////Microservices 
Great 👍 this is one of the hot interview questions for full-stack developers. Let’s break it down into 4 simple parts:


---

🔑 1. Definition (Easy Word)

Microservices means:
👉 Instead of building one big application (monolith), we break it into small, independent services.

Each service does one job (example: User Service, Payment Service, Property Service).

They can run independently, talk to each other through APIs (usually REST or gRPC).


Think of it like an apartment building:

Each flat (microservice) is separate but together they make the building (application).



---

🏠 2. How I used Microservices in my Buy & Sell Properties Application

In my project, I divided the system into microservices like this:

User Service → Handles registration, login, roles (buyer, seller, admin).

Property Service → Manages property listing, details, search.

Payment Service → Handles property payments, transactions, EMI calculation.

Notification Service → Sends emails, SMS, push alerts when property is listed/sold.


Example Flow:

Buyer logs in → Auth Service checks role.

Buyer views properties → Property Service provides data.

Buyer makes payment → Payment Service processes.

Notification Service sends confirmation message.


This way, if one service (like Payment) is down, the rest still work.


---

⚖️ 3. Trade-offs (Pros & Cons)

✅ Advantages

Scalable → You can scale one service (e.g. Payment during high sales).

Independent Deployment → Teams can update services without breaking others.

Resilient → One service failure won’t break the whole app.

Technology Freedom → Each service can use best suited language/DB.


❌ Challenges (Trade-offs)

Complexity → Harder to manage than one app.

Communication Overhead → Services must talk over network (slower than in-process).

Data Consistency → Each service has its own DB, so syncing can be tricky.

Deployment Cost → Needs containers, orchestration (Docker, Kubernetes).



---

💼 4. Business Impact

For a Property Buy & Sell application, microservices help the business grow faster because:

New features (like chat or payments) can be added without touching the old system.

The system can handle more users and properties as the company grows.

Downtime is reduced → better customer trust.




---

🎯 Interview-Ready Short Answer

> “Microservices is an architecture where we split our big application into small, independent services. In my Buy & Sell Properties project, we used microservices like User Service, Property Service, Payment Service, and Notification Service. This gave us scalability, flexibility, and resilience. The trade-off is added complexity and deployment overhead, but the business impact was faster delivery of features and better reliability.”




---

👉 Do you want me to also give you a small code flow (API gateway + one service) so you can demonstrate technically how microservices work in your project?

//api gateways
Perfect 👍 Let’s make it interview-ready with small code flow for Microservices + API Gateway in your Buy & Sell Properties app.

We’ll keep it super simple (not full Kubernetes 😅) → just .NET 8 Web API microservices + API Gateway.


---

🔹 Step 1: API Gateway (Entry Point for Clients)

👉 In real-world, we don’t expose all microservices directly to Angular app.
We put an API Gateway in front → it routes requests to correct service.

Example:

// Program.cs (API Gateway using YARP in .NET 8)
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddReverseProxy()
    .LoadFromMemory(new[]
    {
        new Yarp.ReverseProxy.Configuration.RouteConfig
        {
            RouteId = "users",
            ClusterId = "userCluster",
            Match = new() { Path = "/users/{**catch-all}" }
        },
        new Yarp.ReverseProxy.Configuration.RouteConfig
        {
            RouteId = "properties",
            ClusterId = "propertyCluster",
            Match = new() { Path = "/properties/{**catch-all}" }
        }
    },
    new[]
    {
        new Yarp.ReverseProxy.Configuration.ClusterConfig
        {
            ClusterId = "userCluster",
            Destinations = new Dictionary<string, Yarp.ReverseProxy.Configuration.DestinationConfig>
            {
                { "d1", new() { Address = "https://localhost:5001/" } }
            }
        },
        new Yarp.ReverseProxy.Configuration.ClusterConfig
        {
            ClusterId = "propertyCluster",
            Destinations = new Dictionary<string, Yarp.ReverseProxy.Configuration.DestinationConfig>
            {
                { "d1", new() { Address = "https://localhost:5002/" } }
            }
        }
    });

var app = builder.Build();
app.MapReverseProxy();
app.Run();

✅ Now → Angular app calls only API Gateway → gateway routes /users/... to UserService, /properties/... to PropertyService.


---

🔹 Step 2: User Service (Microservice 1)

// UserService - Program.cs
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/users", () =>
{
    return new[] {
        new { Id = 1, Name = "Abhishek", Role = "Buyer" },
        new { Id = 2, Name = "Rahul", Role = "Seller" }
    };
});

app.Run("https://localhost:5001");


---

🔹 Step 3: Property Service (Microservice 2)

// PropertyService - Program.cs
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/properties", () =>
{
    return new[] {
        new { Id = 101, Name = "Luxury Villa", Price = 5000000 },
        new { Id = 102, Name = "2BHK Apartment", Price = 2000000 }
    };
});

app.Run("https://localhost:5002");


---

🔹 Step 4: Angular Side (Call Gateway, not direct services)

// property.service.ts
@Injectable({ providedIn: 'root' })
export class PropertyService {
  constructor(private http: HttpClient) {}

  getProperties() {
    // Call API Gateway, not property service directly
    return this.http.get<any[]>('https://localhost:5000/properties');
  }
}


---

🔹 Final Flow

1. Angular → calls https://localhost:5000/properties (Gateway).


2. Gateway → routes to Property Service (5002).


3. Property Service → returns JSON data.


4. Gateway → sends response back to Angular.




---

✅ Business Thinking (Interview Answer):
“In our Buy & Sell Properties app, we used Microservices with an API Gateway. The gateway handled routing and security, while each service (User, Property, Payment, Notification) worked independently. This allowed us to scale services individually and keep the system resilient. For example, if Payment Service is down, Property browsing still works.”


---

👉 Do you want me to also show how JWT authentication fits into this Microservices Gateway setup (so only logged-in users can access services)?


////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////Capgemini
//////////////////////////////////////////////////////////////////////////

1. Diff of const, static
2. ⁠Can we create object of it
3. ⁠What is constructor
4. ⁠Diff between truncate and delete
5. ⁠Decorator in angular
6. ⁠What is middleware 
7. ⁠What is middlelayer
8. ⁠Stored procedure 
What is middleware
Extension method 
Ref and out different 
Read-only and constant difference 
Routing
Interceptor 
Delegates
Garbage collector in .net
Idisposable interface 
Directives
Standalone component and how it improves application 
Explain Database first approach

 
Opps concept
Abstraction nd inheritance
Routing
Diff btw Prinary key unique
Diff btw stored procedure and functions
What is view
Coding :Try catch output
Mvc lifecycle
Sessions
Exception handling 
Usage of using block in dot net
Unit testing
Types of routing 
Authentication in dot net

Questions:
The questions were based on more real time.
How do you overcome production issues.
What is diff const read static
What are the generics and its types
What is DI and it's types 
Write code to change color of text red and green if any error occurs 
What are types of exception handler and what are custom exception handler

How connect Angular to API?
How pass data component to component Angular?
What is standard alone in Angular and Implementation?
What is App model in Angular?
What is Auth guard and implementation in Angular?
Custom middleware
How handled the exception in .Net Core?
Explain Project
How implement Authentication in .Net Core?
How many types in Routing?
How implement dp in Angular?

Basically on authentication and authorisation, 
exception handling, middlewares, 
oops, 
solid principles, 
sprin boot and functions
some coding questions based on abstraction and inheritance

What is IConfiguration in .net core.
How to implement Caching.
How to use IMemory Caching.
A C# program to send a zero to end in a array.
A C# program to Reverse the sentence.
What is Dense_Rank, Rank, row number.
What is WildCard Routing in Angular.
Which Design pattern you word.
explain CQRS Desing pattern.
Which is better Monolotic or Microservices.


////////////////////////////////////////////
////////////////////////What is IConfiguration in .net core,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.




Perfect 👌 let’s break IConfiguration in .NET Core in very easy words with definition, project use, trade-offs, and business impact 👇


---

📝 Definition

IConfiguration is a built-in service in .NET Core used to read settings (like DB connection string, API keys, feature flags) from appsettings.json, environment variables, or other sources.

Instead of writing values directly in code (hardcoding), we keep them in a configuration file and access them using IConfiguration.


👉 Think of it like a remote control for your app — you can change channels (settings) without opening the TV (code).


---

💻 Project Use (Buy & Sell Properties App)

In your property application, you might have settings like:

Database connection string

Email service API key (for sending notifications)

Payment gateway credentials (Razorpay, Stripe, etc.)

Cache timeout values


All of these are stored in appsettings.json and accessed using IConfiguration.

✅ Example Code:

// appsettings.json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;"
  },
  "PaymentGateway": {
    "ApiKey": "test_key_123",
    "Secret": "test_secret_456"
  }
}

// Startup or Program.cs
public class Startup
{
    private readonly IConfiguration _config;

    public Startup(IConfiguration config)
    {
        _config = config;
    }

    public void ConfigureServices(IServiceCollection services)
    {
        string conn = _config.GetConnectionString("DefaultConnection");
        string paymentApiKey = _config["PaymentGateway:ApiKey"];
    }
}

So if tomorrow you change your DB server or Payment Gateway key, you don’t need to touch the code → just update appsettings.json.


---

⚖️ Trade-offs

✅ Pros:

Centralized place for all configuration.

Easy to switch values across environments (Dev, QA, Prod).

More secure (secrets can be stored in environment variables or Azure Key Vault).

No code change needed for small adjustments.


❌ Cons:

If sensitive data (passwords, keys) is not secured properly, it can be leaked.

If configs are mismanaged, the app may fail to start.

New developers need to know where configs are stored.




---

💼 Business Impact

🚀 Faster deployments → Business can switch from Test Payment Gateway to Live Payment Gateway without new code release.

💰 Cost saving & flexibility → One codebase, multiple environments (Dev, QA, Prod) by just changing config files.

🔒 Security → Better handling of secrets reduces risk of hacks/data leaks.

📈 Scalability → Easier to manage large applications with multiple services.



---

👉 In short:
IConfiguration = Remote control of your app settings.
It makes your application flexible, secure, and environment-ready without code changes.


---

Do you want me to also explain how IConfiguration is different from Options Pattern (IOptions) since both are often asked together in interviews?


///////////////////////How to use IMemory Caching.(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.



Great question 👍 Let’s break down IMemoryCache in simple words with definition, project use, trade-offs, and business impact 👇


---

📝 Definition

IMemoryCache is a feature in .NET that stores data in the server’s memory (RAM).

Instead of going again and again to the database or API, you keep frequently used data in memory and fetch it faster.


👉 Think of it like keeping important items on your desk instead of opening the cupboard every time.


---

💻 Project Use (Buy & Sell Properties App)

In your property application, imagine:

Every time a user searches for "Flats in Bangalore under 50 Lakhs", if you go to the database again and again, it’s slow and puts load on the DB.

With IMemoryCache, you can store the result of this search in memory for 5–10 minutes.

So, when the next user searches the same thing, the result comes super fast (from memory, not database).


✅ Example Code:

using Microsoft.Extensions.Caching.Memory;

public class PropertyService
{
    private readonly IMemoryCache _cache;
    private readonly PropertyRepository _repository;

    public PropertyService(IMemoryCache cache, PropertyRepository repository)
    {
        _cache = cache;
        _repository = repository;
    }

    public List<Property> GetProperties(string city)
    {
        string cacheKey = $"Properties_{city}";

        if (!_cache.TryGetValue(cacheKey, out List<Property> properties))
        {
            // Fetch from DB
            properties = _repository.GetPropertiesByCity(city);

            // Store in cache for 5 minutes
            _cache.Set(cacheKey, properties, TimeSpan.FromMinutes(5));
        }

        return properties;
    }
}


---

⚖️ Trade-offs

✅ Pros:

Faster performance (no repeated DB calls).

Reduces load on database.

Improves user experience (quick results).


❌ Cons:

Data in cache may become stale/outdated if property updates happen frequently.

Uses server RAM, so large data in cache may cause memory issues.

Best only for read-heavy, less-changing data.




---

💼 Business Impact

🚀 Speed: Search results load in milliseconds → happier users.

💰 Cost Saving: Less DB hits → reduced infrastructure cost.

📈 Scalability: Can handle more users at once without DB overload.

⚠️ Risk: If property data changes often, users might see old info unless cache is refreshed smartly.



---

👉 In short: IMemoryCache = Super-fast desk drawer for hot data.
Perfect for frequent, less-changing queries like property search results, dropdown lists (cities, states), featured ads, etc.


---

Do you want me to also show you the difference between IMemoryCache vs Distributed Cache (like Redis) so you’ll know when to use which in a real-world project?


////////////////////////////
Perfect 👌 This is a classic SQL Server interview question. Let’s explain Dense_Rank, Rank, and Row_Number with Definition → Project Use (Buy & Sell Properties App) → Trade-offs → Business Impact in easy human words.


---

🏗 Definition

1. ROW_NUMBER()



Gives a unique serial number to each row.

Always increments by 1.

Example: 1, 2, 3, 4, …


2. RANK()



Gives a rank based on sorting.

If two rows have the same value, they get the same rank, but the next rank is skipped.

Example: 1, 2, 2, 4 (rank 3 is skipped).


3. DENSE_RANK()



Similar to RANK, but it does not skip ranks.

Example: 1, 2, 2, 3.



---

🛠 Project Use (Buy & Sell Properties App)

In our Buy & Sell Properties Application:

1. ROW_NUMBER()
👉 When showing property list → we can number each property in order (1, 2, 3, …).



SELECT 
    ROW_NUMBER() OVER (ORDER BY Price DESC) AS RowNo, 
    Name, Price 
FROM Properties;

2. RANK()
👉 When we want to rank properties by highest price, but if two have same price, they share rank, and next rank is skipped.



SELECT 
    RANK() OVER (ORDER BY Price DESC) AS RankNo, 
    Name, Price 
FROM Properties;

3. DENSE_RANK()
👉 When we want to rank properties by highest price, but keep ranks continuous without gaps.



SELECT 
    DENSE_RANK() OVER (ORDER BY Price DESC) AS DenseRankNo, 
    Name, Price 
FROM Properties;


---

⚖️ Trade-offs

Function Behavior Use Case Trade-off

ROW_NUMBER Always unique numbers Numbering records in a list Doesn’t handle duplicates logically
RANK Skips numbers for ties Leaderboards where tie ranks matter Can confuse business users (missing ranks)
DENSE_RANK No skipped numbers Continuous ranks for grouped data Different from traditional ranking (some users expect skips)



---

💼 Business Impact

ROW_NUMBER():
👉 Makes UI listing clean (users can see position of each property).

RANK():
👉 Useful in leaderboards → “Top sellers” ranking → If 2 sellers tie, they get the same position, but next rank is skipped.

DENSE_RANK():
👉 Useful in reports → “Top 3 property prices” → Ensures ranking continues without confusion.


If we use the wrong one → business reports may confuse management or mislead customers.


---

✅ Interview-Friendly Short Answer

> “In SQL, ROW_NUMBER() gives a unique sequence, RANK() gives rank but skips numbers for ties, and DENSE_RANK() gives continuous rank without skipping.
In our Property Buy & Sell App, we used ROW_NUMBER() to number properties in UI, RANK() to prepare seller leaderboards, and DENSE_RANK() to generate pricing reports.
The trade-off is choosing the right one — wrong choice can lead to incorrect or confusing business reports. Correct use ensures clarity for both users and management.”




---

👉 Do you want me to also draw a small table example (input vs output with ROW_NUMBER, RANK, DENSE_RANK) so you can visualize it instantly in interviews?


/////////////////////////////
What is Dense_Rank, Rank, row number.(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.



Perfect 👌 This is a classic SQL Server interview question. Let’s explain Dense_Rank, Rank, and Row_Number with Definition → Project Use (Buy & Sell Properties App) → Trade-offs → Business Impact in easy human words.

🏗 Definition
ROW_NUMBER()
Gives a unique serial number to each row.
Always increments by 1.
Example: 1, 2, 3, 4, …
RANK()
Gives a rank based on sorting.
If two rows have the same value, they get the same rank, but the next rank is skipped.
Example: 1, 2, 2, 4 (rank 3 is skipped).
DENSE_RANK()
Similar to RANK, but it does not skip ranks.
Example: 1, 2, 2, 3.
🛠 Project Use (Buy & Sell Properties App)
In our Buy & Sell Properties Application:

ROW_NUMBER()
👉 When showing property list → we can number each property in order (1, 2, 3, …).
SELECT 
    ROW_NUMBER() OVER (ORDER BY Price DESC) AS RowNo, 
    Name, Price 
FROM Properties;
RANK()
👉 When we want to rank properties by highest price, but if two have same price, they share rank, and next rank is skipped.
SELECT 
    RANK() OVER (ORDER BY Price DESC) AS RankNo, 
    Name, Price 
FROM Properties;
DENSE_RANK()
👉 When we want to rank properties by highest price, but keep ranks continuous without gaps.
SELECT 
    DENSE_RANK() OVER (ORDER BY Price DESC) AS DenseRankNo, 
    Name, Price 
FROM Properties;
⚖️ Trade-offs
Function	Behavior	Use Case	Trade-off
ROW_NUMBER	Always unique numbers	Numbering records in a list	Doesn’t handle duplicates logically
RANK	Skips numbers for ties	Leaderboards where tie ranks matter	Can confuse business users (missing ranks)
DENSE_RANK	No skipped numbers	Continuous ranks for grouped data	Different from traditional ranking (some users expect skips)
💼 Business Impact
ROW_NUMBER():
👉 Makes UI listing clean (users can see position of each property).

RANK():
👉 Useful in leaderboards → “Top sellers” ranking → If 2 sellers tie, they get the same position, but next rank is skipped.

DENSE_RANK():
👉 Useful in reports → “Top 3 property prices” → Ensures ranking continues without confusion.

If we use the wrong one → business reports may confuse management or mislead customers.

✅ Interview-Friendly Short Answer

“In SQL, ROW_NUMBER() gives a unique sequence, RANK() gives rank but skips numbers for ties, and DENSE_RANK() gives continuous rank without skipping.
In our Property Buy & Sell App, we used ROW_NUMBER() to number properties in UI, RANK() to prepare seller leaderboards, and DENSE_RANK() to generate pricing reports.
The trade-off is choosing the right one — wrong choice can lead to incorrect or confusing business reports. Correct use ensures clarity for both users and management.”

👉 Do you want me to also draw a small table example (input vs output with ROW_NUMBER, RANK, DENSE_RANK) so you can visualize it instantly in interviews?



////////////////////////////

What is WildCard Routing in Angular.,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.







Great 👍 Wildcard Routing is a very common Angular interview question. Let’s break it down in Definition → Project Use (Buy & Sell Properties App) → Trade-offs → Business Impact with easy words.





---



🏗 Definition



Wildcard Routing in Angular = A special route (**) used to catch all undefined or wrong URLs in your application.



Think of it like a default safety net → If no other route matches, Angular will fall back to the wildcard route.



Usually used to show a 404 Page Not Found or redirect users to a safe page.







---



🛠 Project Use (Buy & Sell Properties App)



In our Property Buy & Sell Application:



Suppose valid routes are:



/properties → shows property list



/property/:id → shows property details



/login → login page







👉 Now if a user types:



/xyz or /random-link (which doesn’t exist)

👉 Wildcard route (**) catches it and shows → “❌ Page Not Found”





Code Example:



const routes: Routes = [

  { path: 'properties', component: PropertyListComponent },

  { path: 'property/:id', component: PropertyDetailComponent },

  { path: 'login', component: LoginComponent },

  

  // Wildcard route for 404 handling

  { path: '**', component: PageNotFoundComponent }

];





---



⚖️ Trade-offs



Aspect Without Wildcard Route With Wildcard Route



User Experience User sees a blank page or Angular error User sees a friendly 404 Page

Navigation User gets confused, thinks site is broken User is guided back to Home or Login

Implementation Less code, but unsafe One extra route, better UX

Business Impact Frustrated users leave site Keeps users engaged & trust high







---



💼 Business Impact



Without Wildcard Routing:

👉 If buyers type a wrong URL → blank screen → frustration → they may leave the platform.



With Wildcard Routing:

👉 Wrong URLs lead to a friendly 404 Page (maybe with a search box to guide them).

👉 This keeps buyers/sellers on the app and improves conversion & trust.







---



✅ Interview-Friendly Short Answer



> “Wildcard Routing in Angular (**) is used as a fallback when no route matches, usually to show a 404 page.

In our Property Buy & Sell App, we used it to catch wrong URLs like /xyz and redirect users to a proper error page with navigation options.

The trade-off is writing one extra route, but the business impact is huge – better user experience, less frustration, and more trust in the platform.”









---



👉 Do you want me to also give you a real-world styled Pag

eNotFoundComponent (Angular 18 standalone) example so you can mention it in interviews?



//////////////////////////

explain CQRS Desing pattern ,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.







Great 👍 Wildcard Routing is a very common Angular interview question. Let’s break it down in Definition → Project Use (Buy & Sell Properties App) → Trade-offs → Business Impact with easy words.

🏗 Definition
Wildcard Routing in Angular = A special route (**) used to catch all undefined or wrong URLs in your application.
Think of it like a default safety net → If no other route matches, Angular will fall back to the wildcard route.
Usually used to show a 404 Page Not Found or redirect users to a safe page.
🛠 Project Use (Buy & Sell Properties App)
In our Property Buy & Sell Application:

Suppose valid routes are:
/properties → shows property list
/property/:id → shows property details
/login → login page
👉 Now if a user types:

/xyz or /random-link (which doesn’t exist)
👉 Wildcard route (**) catches it and shows → “❌ Page Not Found”
Code Example:

const routes: Routes = [
  { path: 'properties', component: PropertyListComponent },
  { path: 'property/:id', component: PropertyDetailComponent },
  { path: 'login', component: LoginComponent },
  
  // Wildcard route for 404 handling
  { path: '**', component: PageNotFoundComponent }
];
⚖️ Trade-offs
Aspect	Without Wildcard Route	With Wildcard Route
User Experience	User sees a blank page or Angular error	User sees a friendly 404 Page
Navigation	User gets confused, thinks site is broken	User is guided back to Home or Login
Implementation	Less code, but unsafe	One extra route, better UX
Business Impact	Frustrated users leave site	Keeps users engaged & trust high
💼 Business Impact
Without Wildcard Routing:
👉 If buyers type a wrong URL → blank screen → frustration → they may leave the platform.

With Wildcard Routing:
👉 Wrong URLs lead to a friendly 404 Page (maybe with a search box to guide them).
👉 This keeps buyers/sellers on the app and improves conversion & trust.

✅ Interview-Friendly Short Answer

“Wildcard Routing in Angular (**) is used as a fallback when no route matches, usually to show a 404 page.
In our Property Buy & Sell App, we used it to catch wrong URLs like /xyz and redirect users to a proper error page with navigation options.
The trade-off is writing one extra route, but the business impact is huge – better user experience, less frustration, and more trust in the platform.”


👉 Do you want me to also give you a real-world styled PageNotFoundComponent (Angular 18 standalone) example so you can mention it in interviews?



///////////////////////////////////

Perfect 👌 CQRS is another hot topic in interviews for .NET developers, especially when backend scalability and performance comes up.

Let’s break it into Definition → Project Use (Buy & Sell Properties App) → Trade-offs → Business Impact in super easy words.





---



🏗 Definition



CQRS (Command Query Responsibility Segregation)

👉 It means separating "read" and "write" operations in your application.



Command = Operations that change data (Insert, Update, Delete).



Query = Operations that read data (Select).





💡 Instead of one model handling both read & write, we use different models (and sometimes even different databases) for better performance.





---



🛠 Project Use (Buy & Sell Properties App)



In our Property Listing App:



Commands:



A seller posts a property (AddPropertyCommand)



A buyer updates their profile (UpdateUserCommand)



Admin deletes a fake listing (DeletePropertyCommand)





Queries:



A buyer searches properties (GetPropertiesQuery)



A user checks payment history (GetTransactionsQuery)









👉 By separating Commands and Queries, we can:



Optimize writes (maybe validate heavily before saving).



Optimize reads (maybe use caching or read replicas).







---



⚖️ Trade-offs



Aspect Without CQRS (Normal CRUD) With CQRS



Simplicity One model does everything Separate models for read/write (a bit complex)

Performance OK for small apps, but slows with heavy load High performance (read and write can be tuned separately)

Scalability Hard to scale read-heavy apps Can scale read side separately (e.g., caching, read replicas)

Maintainability Simple codebase More code, more moving parts

Consistency Always consistent (same DB) May need eventual consistency (writes update reads with delay)







---



💼 Business Impact



Without CQRS:

👉 Fine for small apps (like MVP property portal).

💡 Example: Both property posting and searching hit the same DB model.



With CQRS:

👉 Best for enterprise-level apps with huge traffic.

💡 Example: In our property portal, thousands of users search properties (queries) at the same time while sellers post listings (commands).

Using CQRS, we:



Scale search queries with caching or a separate read DB (fast response).



Keep write operations safe & validated (strong consistency).





This ensures buyers get instant results while sellers’ data is safely stored.





---



✅ Interview-Friendly Short Answer



> “CQRS means separating read and write operations into different models.

In our Buy & Sell Properties app, we used it because property searches (queries) happen far more than property postings (commands).

By applying CQRS, we scaled the read side with caching and replicas, while keeping the write side strongly validated.

The trade-off is more complexity, but the business impact was huge: faster search results for buyers and reliable data updates for sellers.”









---



👉 Do you want me to also give you a small 

C# code example of CQRS (Command + Query handlers) so you can mention it confidently in interviews?



///////////////////////////////

Which is better Monolotic or Microservices,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.







Great question 👌 This one is asked a lot in .NET + Angular full-stack interviews.

Let me break it into Definition → Project Use (Buy & Sell Properties App) → Trade-off → Business Impact in super easy words.





---



🏗 Definition



Monolithic Architecture

👉 One big application where UI, Business Logic, and Database are tightly packed together in a single unit.



Microservices Architecture

👉 Application is divided into small, independent services (like mini-apps), each handling one feature (Payments, Property Listings, Notifications, etc.), and they talk to each other using APIs.







---



🛠 Project Use (Buy & Sell Properties App)



Monolithic:

If our Buy & Sell Property app was monolithic, everything (User Login, Property Listing, Payments, Admin Dashboard) would be inside one big project.

➡️ Example: A single .NET Core MVC + Angular project handling everything together.



Microservices:

We split the app into different services:



User Service → Handles login & registration



Property Service → Manages property listings



Payment Service → Handles property payments



Notification Service → Sends email/SMS alerts





Each service can be built, deployed, and scaled independently.





---



⚖️ Trade-offs



Aspect Monolithic Microservices



Speed of Development Faster for small apps (all in one) Slower at first (needs setup, APIs)

Scalability Hard to scale specific parts Can scale each service separately

Deployment One deployment for everything Independent deployment per service

Complexity Easier to understand initially More complex (needs API communication, service discovery, monitoring)

Fault Isolation One bug may crash the whole app Bug in one service won’t stop others







---



💼 Business Impact



Monolithic:

👉 Best when building small or medium apps quickly (like MVP / initial property portal).

💡 Faster time-to-market but scaling later is painful.



Microservices:

👉 Best for large enterprise apps with many users and features (like OLX, 99Acres, MagicBricks).

💡 Costs more initially (infra + DevOps), but in long run → better performance, scalability, fault-tolerance.







---



✅ Interview-Friendly Short Answer



> “Monolithic is like one big container where everything is together — simple but hard to scale.

Microservices break the app into small independent services — complex to build but better for scalability and enterprise growth.

In our Buy & Sell Properties app, we started with a monolith to go live quickly, but later moved to microservices for Payments, Notifications, and Property Listing so each could scale independently as the business grew.”









---



👉 Do you want me to also create a real diagram (Monolith vs Microservice

s for Property App) so you can visualize and remember it better for interviews?



//////////////////////////////

Write code to change color of text red and green if any error occurs in Angular18







Perfect 👍 let’s solve this step by step.

We’ll make Angular show text red if there is an error and green if success.





---



✅ Step 1: Create a Component (example: status-message.component.ts)



import { Component } from '@angular/core';



@Component({

  selector: 'app-status-message',

  templateUrl: './status-message.component.html',

  styleUrls: ['./status-message.component.css']

})

export class StatusMessageComponent {

  message: string = '';

  isError: boolean = false;



  showSuccess() {

    this.message = 'Property saved successfully!';

    this.isError = false;

  }



  showError() {

    this.message = 'Something went wrong while saving property!';

    this.isError = true;

  }

}





---



✅ Step 2: Template (HTML) → status-message.component.html



<div [ngClass]="{ 'error-text': isError, 'success-text': !isError }">

  {{ message }}

</div>



<button (click)="showSuccess()">Show Success</button>

<button (click)="showError()">Show Error</button>





---



✅ Step 3: CSS → status-message.component.css



.error-text {

  color: red;

  font-weight: bold;

}



.success-text {

  color: green;

  font-weight: bold;

}





---



🔎 How it Works:



When you click Show Success, message appears in green.



When you click Show Error, message appears in red.



ngClass is used to toggle CSS class based on isError flag.







---



💡 Project Example (Buy & Sell Properties App)



When a property is added successfully → show green "Property added successfully".



When API call fails → show red "Failed to add property".







---



👉 Do you want me to also show you the same using directives (ngStyle

) instead of ngClass? This way you’ll have both approaches for interview answers.



////////////////////////////////



Directives,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.







Perfect 👍 let’s solve this step by step.
We’ll make Angular show text red if there is an error and green if success.

✅ Step 1: Create a Component (example: status-message.component.ts)
import { Component } from '@angular/core';

@Component({
  selector: 'app-status-message',
  templateUrl: './status-message.component.html',
  styleUrls: ['./status-message.component.css']
})
export class StatusMessageComponent {
  message: string = '';
  isError: boolean = false;

  showSuccess() {
    this.message = 'Property saved successfully!';
    this.isError = false;
  }

  showError() {
    this.message = 'Something went wrong while saving property!';
    this.isError = true;
  }
}
✅ Step 2: Template (HTML) → status-message.component.html
<div [ngClass]="{ 'error-text': isError, 'success-text': !isError }">
  {{ message }}
</div>

<button (click)="showSuccess()">Show Success</button>
<button (click)="showError()">Show Error</button>
✅ Step 3: CSS → status-message.component.css
.error-text {
  color: red;
  font-weight: bold;
}

.success-text {
  color: green;
  font-weight: bold;
}
🔎 How it Works:
When you click Show Success, message appears in green.
When you click Show Error, message appears in red.
ngClass is used to toggle CSS class based on isError flag.
💡 Project Example (Buy & Sell Properties App)

When a property is added successfully → show green "Property added successfully".
When API call fails → show red "Failed to add property".

👉 Do you want me to also show you the same using directives (ngStyle) instead of ngClass? This way you’ll have both approaches for interview answers.



/////////////////////////////



Delegates,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.





Great 👍 let’s simplify Directives in Angular with the same structure:





---



Definition (Simple Words)



A Directive in Angular is like a special instruction you give to the HTML.



It tells Angular to add some behavior or change the look/structure of the page.



Think of it like: “HTML is the house, directives are the electricians, painters, and decorators who make it smarter.”





Types of directives:



1. Component Directive → custom UI pieces (every Angular component is a directive).





2. Structural Directive → changes structure (like *ngIf, *ngFor).





3. Attribute Directive → changes look/behavior (like [ngStyle], [ngClass]).









---



Project Use (Buy & Sell Properties App)



In your Property Buy & Sell Application:



You can use *ngFor directive to loop through and show a list of properties.





<div *ngFor="let property of properties">

  {{ property.name }} - {{ property.price }}

</div>



You can use *ngIf directive to show "Sold Out" badge only if a property is not available.





<div *ngIf="!property.isAvailable">

   <span class="sold-badge">Sold Out</span>

</div>



You can even create a custom directive → e.g., highlight premium properties in golden color.





@Directive({

  selector: '[highlightPremium]'

})

export class HighlightPremiumDirective {

  constructor(private el: ElementRef) {

    this.el.nativeElement.style.backgroundColor = 'gold';

  }

}



Usage:



<div *ngFor="let property of properties" highlightPremium>

  {{ property.name }}

</div>





---



Trade-offs (Pros & Cons)



✅ Pros



Makes HTML smarter and reusable.



Helps reduce duplicate code (one directive can be used everywhere).



Improves readability and UI maintainability.





⚠️ Cons



Too many custom directives can make code hard to track.



Beginners may find it confusing.



Structural directives like *ngIf / *ngFor can sometimes impact performance if used heavily on large lists.







---



Business Impact (Simple Words)



Directives help your property app show data dynamically and cleanly.



Customers see the latest listings, sold properties, premium highlights in a user-friendly way.



Business benefits: faster development, better user experience, more engagement and trust.



Without directives → UI would be messy, repetitive, and harder to maintain, leading to slower releases and higher cost.







---



✅ In short:

Directive = Instruction to HTML to behave smartly.

In your property app → used for showing property lists, sold badges, highlighting premium listings.

This improves UI, saves time, and directly impacts business growth.





---



Do you want me to also prepare a list of commo

n Angular built-in directives (like ngIf, ngFor, ngClass) with real property app examples for interview answers?



////////////////////////////////////

Perfect 👍 Let’s break down Delegates in the same simple structure:





---



Definition (Simple Words)



A delegate in C# is like a remote control for methods.



It is a type-safe function pointer → meaning, it can hold a reference to a method and call it when needed.



With delegates, you can pass methods as parameters just like passing variables.





👉 Think of it like: “I don’t know which exact function to call now, but I’ll keep a remote control (delegate) that can call the correct one later.”





---



Project Use (Buy & Sell Properties App)



In your Property Buy & Sell Application:



Suppose you have to send a notification when a property is sold. Sometimes it should be an Email, sometimes an SMS, sometimes a Push Notification.



Instead of writing if/else everywhere, you create a delegate like:





public delegate void Notify(string message);



public class NotificationService

{

    public void SendEmail(string msg) => Console.WriteLine("Email: " + msg);

    public void SendSMS(string msg) => Console.WriteLine("SMS: " + msg);

}



Usage:



NotificationService service = new NotificationService();

Notify notifyDelegate = service.SendEmail; // Remote control points to Email

notifyDelegate("Property Sold Successfully!");



// Later we can switch

notifyDelegate = service.SendSMS; // Remote control points to SMS

notifyDelegate("Property Sold Successfully!");



🔹 This makes the app flexible and pluggable without rewriting logic everywhere.





---



Trade-offs (Pros & Cons)



✅ Pros:



Makes code flexible → easy to plug-in different methods.



Good for event-driven programming (like button click, payment success, etc.).



Reduces if/else clutter and improves maintainability.





⚠️ Cons:



Can be confusing for beginners (because methods behave like variables).



Overuse may reduce code readability.



If not handled properly, may lead to runtime errors (null delegate).







---



Business Impact (Simple Words)



With delegates → Notification system becomes scalable. Business can quickly switch from Email to SMS or add new types (like WhatsApp) without rewriting core logic.



This saves time & cost, improves user experience (people get timely updates), and builds trust.



Without delegates → Code becomes hard to manage, making changes costly, which slows down business.







---



✅ In short:

Delegate = Remote control for methods → gives flexibility.

In your property app → used for notifications, events, or callbacks, making the system easy to extend, maintain, and business-friendly.





---



Do you want me to also cover built-in delegates (Action, Func, P

redicate) with real project examples in the same Buy & Sell Properties context?



/////////////////////////////////

Interceptor,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.





Got it 👍 Let’s simplify Interceptor in easy words with Definition, Project Use, Trade-off, and Business Impact.





---



Definition (Simple Words)



Interceptor is like a security guard or filter that stands in the middle whenever your app sends a request or receives a response.



It can check, change, or block the request/response before it reaches its final destination.



Example: Before sending data to the server, you might add a security token. Or before showing data to the user, you might handle errors nicely.







---



Project Use (Buy & Sell Properties App)



In your Property Buy & Sell Application:



When a buyer logs in → Every API call (like /properties or /transactions) goes through an interceptor, which automatically adds the JWT Token for security.



If the server sends back an error (like “Not Authorized”), the interceptor catches it and redirects the user to Login Page instead of showing a confusing error.



Example:



Outgoing: Add Authorization: Bearer <token> in headers.



Incoming: Catch 401 Unauthorized → send user back to login.









---



Trade-offs (Pros & Cons)



✅ Pros:



Centralized logic → No need to add token or error handling in every request.



Improves security (ensures only authenticated users can access APIs).



Cleaner code → Developers focus on features, interceptor handles repeated tasks.





⚠️ Cons:



Debugging is harder if interceptors silently change requests/responses.



If interceptor fails (e.g., wrong token logic), all API calls may fail.



Adds an extra layer, so a slight performance overhead exists.







---



Business Impact (Simple Words)



Good Interceptor → Buyers and sellers feel safe (secure login, smooth navigation, no confusing error screens). Trust increases → more people use the app.



Bad Interceptor → If token is not added properly, all property listings and transactions break → business loss, angry users.



Also improves scalability: once security or logging is added in the interceptor, it applies to all APIs → faster development, less cost.







---



✅ In short:

Interceptor = Middleman / Security Guard → checks, secures, and manages requests & responses.

In your property app → ensures secure transactions, smooth error handling, and professional user experience, which directly impacts trust and sales.





---



Would you like me to also give you a .NET Middleware Interceptor example along

 with the Angular Interceptor example, so you can explain both in interviews?

---

Do you want me to also explain Backend Routing (ASP.NET Core) vs

 Frontend Routing (Angular) separately with examples from your property app?



////////////////////////////

Perfect 👌 Let’s compare readonly vs const in the format you like (Definition → Project Use → Trade-offs → Business Impact) with super easy words.





---



📖 Definition (Easy Words)



const



Value is fixed at compile-time (when you write code).



Cannot change later.



Only simple types allowed (int, string, double, etc.).





readonly



Value is fixed at runtime (when program starts / object created).



Can be assigned in constructor or at declaration.



Can hold even complex objects.







👉 Shortcut Memory Rule:



const → Stone 🪨 (written in code, never changes).



readonly → Wet cement 🏗️ (can set when building object, then freezes).







---



🏗️ Project Use (Buy & Sell Properties App)



👉 Example 1 (Using const):



Suppose we always charge 18% GST tax (fixed by law).





public class Billing

{

    public const decimal GstRate = 0.18m;

}



Here const is perfect because GST won’t change while program is running.





---



👉 Example 2 (Using readonly):



Suppose we want to store the Database Connection String → It may vary per environment (Dev/Prod) but once app starts, it should not change.





public class DatabaseConfig

{

    public readonly string ConnectionString;



    public DatabaseConfig(string connectionString)

    {

        ConnectionString = connectionString;

    }

}



Here readonly is better, because value is decided at runtime (when app starts), not at compile time.





---



⚖️ Trade-offs



✅ Const Pros



Faster (replaced directly in code at compile-time).



Good for universal fixed values.





❌ Const Cons



If value changes (e.g., GST law updates from 18% → 20%), you must recompile and redeploy code.







---



✅ Readonly Pros



Flexible (can assign in constructor at runtime).



Supports both simple and complex types.





❌ Readonly Cons



Slightly slower than const (resolved at runtime).



Cannot change once assigned → you must restart app if wrong.







---



💼 Business Impact (Property App)



Const: Used for fixed rules (e.g., GST rate, max property photo upload = 10).



Readonly: Used for environment-dependent configs (e.g., API keys, DB connections).



This gave us performance + flexibility balance.



Trade-off: Too many consts → need redeploy if law/rule changes. Too many readonly → harder debugging if configs wrong at runtime.







---



✅ Interview-Ready Short Answer



“const is compile-time constant, used for values that never change (like GST rate = 18%).

readonly is runtime constant, assigned in constructor and used for values like DB connection strings.

In my property app, I used const for fixed rules like max photo upload, and readonly for runtime configs like DB connection string.

Const gives performance, readonly gives flexibility. Together, they balanced speed and maintainability.”





---



👉 D

o you want me to also prepare a tiny table (side-by-side comparison of const vs readonly) so you can quickly recall in interviews?



/////////////////////////////

Great question 👍 Let’s break down ref and out in the same structure you like (Definition → Project Use → Trade-offs → Business Impact) with super easy words.





---



📖 Definition (Easy Words)



Both ref and out are used to pass arguments by reference instead of by value.



This means if a method changes the variable, the change also reflects outside the method.





🔑 Difference:



ref → Variable must be initialized before passing. (like giving a filled box 📦 to someone)



out → Variable must be assigned inside the method before returning. (like giving an empty box 📦 and the method must fill it before giving back).







---



🏗️ Project Use (Buy & Sell Properties App)



👉 Example 1 (Using ref):



In our property search, we sometimes need to apply dynamic discounts.





public void ApplyDiscount(ref decimal price, decimal discountPercent)

{

    price = price - (price * discountPercent / 100);

}



// Usage

decimal propertyPrice = 100000;

ApplyDiscount(ref propertyPrice, 10);

Console.WriteLine(propertyPrice); // 90000



Here, ref helped us directly update the property price variable without creating a new return object.





---



👉 Example 2 (Using out):



When validating a buyer, we need both validation result and reason.





public bool ValidateBuyer(int buyerId, out string reason)

{

    if (buyerId <= 0)

    {

        reason = "Invalid Buyer ID";

        return false;

    }

    reason = "Valid Buyer";

    return true;

}



// Usage

string resultMessage;

bool isValid = ValidateBuyer(5, out resultMessage);

Console.WriteLine($"{isValid} - {resultMessage}");



Here, out allowed us to return extra data (reason) without creating a custom object.





---



⚖️ Trade-offs



✅ Pros



ref and out help return multiple values without creating extra classes.



Saves memory & performance in certain cases.



Useful in scenarios like parsing, validation, or updating values directly.





❌ Cons



Can make code harder to read (side effects → variable changed unexpectedly).



Not good for APIs used by other teams (hard to understand).



out requires initialization in the method → may confuse beginners.







---



💼 Business Impact (In Property App)



Performance Gain: We avoided unnecessary object creation when returning multiple values (important when validating 1000+ buyers or applying discounts on 10000+ properties).



Simpler Code: Instead of creating DTOs for small things, ref and out were quick solutions.



Trade-off: For public APIs (e.g., Mobile App API), we avoided using them and returned proper objects → for clarity and long-term maintainability.







---



✅ Interview-Ready Short Answer

“ref passes an already initialized variable by reference, while out passes an uninitialized one that must be set inside the method.

In my Property App, I used ref for updating property prices with discounts and out for returning validation messages with status.

They are efficient, but overusing them can reduce readability, so for larger APIs we used proper objects instead.”





---



👉 Do you want me to also prepare a tiny me

mory diagram (Box before & after method call for ref/out) that will make it 10× easier to explain in interviews?



/////////////////////////////////

Perfect 👌 Let’s explain Extension Method in the 4 parts (Definition → Project Use → Trade-offs → Business Impact) in super easy words.





---



📖 Definition (Easy Words)



An Extension Method is like giving extra power (new methods) to an existing class without changing its code.



It’s just a static method written in a static class, but it looks like a normal method of the class you are extending.





👉 Think of it like adding a new app in your old phone 📱. You didn’t change the phone’s hardware, but you added more functionality.





---



🏗️ Project Use (Buy & Sell Properties App)



Example: Suppose we often display property prices in Indian Rupees format.

Instead of rewriting formatting code everywhere, we create an extension method for decimal.



Extension Method Code



public static class PriceExtensions

{

    public static string ToINR(this decimal price)

    {

        return "₹" + price.ToString("N2"); // Example: 120000 → ₹1,20,000.00

    }

}



Usage in Project



decimal propertyPrice = 120000;

Console.WriteLine(propertyPrice.ToINR());  

// Output: ₹1,20,000.00



👉 In my Property App:



Used ToINR() everywhere in UI (Admin Panel, Buyer Screen, Seller Dashboard) to keep formatting consistent.







---



⚖️ Trade-offs



✅ Pros



Code Reuse: No need to repeat the same logic again and again.



Cleaner Code: Makes code more readable.



No Modifications Needed: You don’t need to edit the original class (which may be sealed or from a library).





❌ Cons



Overuse = Confusion: Too many extension methods can make code confusing.



Discoverability: New developers may not know which extension methods exist.



Name Conflicts: If two libraries add the same extension name, clashes may happen.







---



💼 Business Impact (In Property App)



Saves Development Time: One method (ToINR) reused in 50+ places.



Consistency: All prices look the same across Buyer, Seller, and Admin screens.



Maintainability: If tomorrow formatting changes (e.g., “USD format”), we just update the extension method once.



Business Value: Users see clear, consistent price info → builds trust in the platform.







---



✅ In short (Interview-Ready Answer):

“Extension Methods allow us to add new functionality to existing classes without modifying them.

In my Buy & Sell Property app, I used an extension method ToINR() to format prices consistently.

It improved reusability and readability, though too many extension methods can sometimes cause confusion.”





---



Do you want me to also prepare a small diagram (flow) of how Extension Method works behind the scen

es (Compiler → Static Method → Instance Call)? That helps in interviews when they go deep.



/////////////////////////////

Great question 👌 Let’s break Stored Procedure into the 4 parts you asked for: Definition → Project Use → Trade-offs → Business Impact, all in super easy words.





---



📖 Definition (Easy Words)



A Stored Procedure (SP) is like a pre-saved recipe 🍲 in the database.



Instead of writing the same SQL query again and again, you store it once and just call its name whenever needed.



It can take inputs, do calculations, and return results.





👉 Think of it like ordering “Masala Dosa” in a restaurant. You don’t explain ingredients each time — the chef already knows the stored recipe.





---



🏗️ Project Use (Buy & Sell Properties App)



Example 1: Get all active properties



CREATE PROCEDURE GetActiveProperties

AS

BEGIN

   SELECT Id, Name, Price, Location

   FROM Properties

   WHERE Status = 'Active';

END;



👉 In the app: Instead of writing SELECT ... query in C# every time, we just call EXEC GetActiveProperties;.





---



Example 2: Add a new property



CREATE PROCEDURE AddProperty 

    @Name NVARCHAR(100), 

    @Price DECIMAL(18,2), 

    @Location NVARCHAR(200), 

    @OwnerId INT

AS

BEGIN

   INSERT INTO Properties (Name, Price, Location, OwnerId, Status)

   VALUES (@Name, @Price, @Location, @OwnerId, 'Active');

END;



👉 In the app: When a seller adds a property, we just call AddProperty with inputs.





---



⚖️ Trade-offs



✅ Pros:



Performance: SPs are pre-compiled, so they run faster.



Security: Prevents SQL Injection (safe inputs).



Reusability: Write once, use many times.



Maintenance: If query changes, update only in SP (not in all places in code).





❌ Cons:



Hard to Debug: Debugging inside database is trickier than C#.



Overuse: If too many SPs are created, project becomes harder to manage.



Versioning: Updating SP across environments (Dev, QA, Prod) can cause mismatches.







---



💼 Business Impact (In Your Property App)



Secure & Safe: No direct SQL in code → hackers can’t easily inject queries.



Faster Performance: Buyers see property search results quickly.



Easy Maintenance: If business rules change (e.g., “Show only verified properties”), just update SP in DB, no need to redeploy the app.



Scalable: Thousands of users can use the app, and SPs handle data more efficiently.





👉 Result: Business saves time + money, app is fast + secure, and new rules can be rolled out easily.





---



✅ In short (Interview-ready):

A Stored Procedure is a pre-saved SQL query in the database.

In my Buy & Sell Properties app, I used SPs for property search and adding properties.

They improve performance, security, and maintainability. But if overused, debugging and versioning can be challenging.





---



Do you want me to also give you a C# code example of how I call a s

tored procedure from .NET Core (ADO.NET + EF)? That will make your answer even stronger in interviews.



///////////////////////////////

Perfect 👍 Let’s break Middleware in .NET Core into the four parts you asked for: Definition → Project Use → Trade-offs → Business Impact in very easy words.





---



📖 Definition (Easy Words)



Middleware is like a pipeline in your .NET Core app.



Every request from the user (like “Show me properties”) goes through a series of small steps before reaching your controller.



Each step can check, modify, stop, or pass the request further.





👉 Think of it like security gates in an apartment society 🏢.

When a visitor enters:



1. Security Guard checks ID → (Authentication middleware)





2. Receptionist checks which flat → (Routing middleware)





3. CCTV records entry → (Logging middleware)







Same way, middleware processes each HTTP request.





---



🏗️ Project Use (Buy & Sell Properties App)



Example 1: Authentication Middleware



Used to check if the user is logged in.



app.UseAuthentication();

app.UseAuthorization();



👉 In your app: If someone wants to post a property for sale, middleware first checks → “Are you a valid seller?”





---



Example 2: Custom Logging Middleware



public class RequestLoggingMiddleware

{

    private readonly RequestDelegate _next;



    public RequestLoggingMiddleware(RequestDelegate next)

    {

        _next = next;

    }



    public async Task InvokeAsync(HttpContext context)

    {

        Console.WriteLine($"Request: {context.Request.Method} {context.Request.Path}");

        await _next(context); // pass to next middleware

    }

}



👉 In your app: Every time a buyer opens a property page, you log which property was visited.





---



Example 3: Exception Handling Middleware



app.UseExceptionHandler("/Home/Error");



👉 In your app: If payment API fails, middleware catches the error and shows a friendly error page instead of crashing.





---



⚖️ Trade-offs



✅ Pros:



Centralized → one place to handle cross-cutting concerns (auth, logging, errors).



Easy to add/remove steps without touching all controllers.



Improves security (e.g., blocking unauthorized users).





❌ Cons:



Too many middleware layers → performance may slow down.



Wrong ordering can break functionality.



Custom middleware requires careful coding (bugs affect all requests).







---



💼 Business Impact (In Your Property App)



Secure: Only verified buyers/sellers can access certain features.



Reliable: Errors are handled gracefully (better user trust).



Maintainable: Logging middleware helps business know which properties are most viewed (analytics).



Scalable: New rules (like “check subscription before posting property”) can be added as new middleware.





👉 Result: The business can protect data, understand user behavior, and grow features quickly without rewriting everything.





---



✅ In short (Interview-ready):

Middleware in .NET Core is a pipeline of small components that handle every request before it reaches the controller.

In my Buy & Sell Properties app, I used middleware for authentication (check user role), logging (track property views), and exception handling (payment errors).

This makes the app secure and maintainable, though too many middleware can slow performance.





---





Would you like me to also give you a diagram explanation (pipeline flow) that you can draw quickly in interviews to impress?



////////////////////////////////////////////////////////////////////////////////My Noted Middleware
Middleware (5 your experience)
1>Middleware is a component that is assembled into the application pipeline to handle requests and responses.

1> Handle the request (eg., authentication, logging).

2)Pass the request to the next middleware in the pipeline

///
2.)Key Points to Highlight

 → Middleware Components are executed sequentially.
-> They are added to the pipeline in the program.cs .
-> Middleware enhances modularity and separation of Concerns in application.    

////
→Real-World Analogy

->Middleware is like a series of security checkpoints at an airport.
->One checkpoint verifies your ID (authentication middleware)
->Another Scans your luggage(logging midleware).
->Finally, you proceed to your gate (endpoint).

///Code Example of Middleware
    ////Middleware Extensions
///Middleware extension method is used to invoke the 
///middleware with a single method call.
using MiddlewareExample.CustomMiddleware;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddTransient<MyCustomMiddleware>();
var app = builder.Build();



//middlware 1
app.Use(async (HttpContext context, RequestDelegate next) => {
    await context.Response.WriteAsync("From Midleware 1\n");
    await next(context);
});

//middleware 2
//app.UseMiddleware<MyCustomMiddleware>();
app.UseMyCustomMiddleware();


//middleware 3
app.Run(async (HttpContext context) => {
    await context.Response.WriteAsync("From Middleware 3\n");
});


app.Run();

//
namespace MiddlewareExample.CustomMiddleware
{
    public class MyCustomMiddleware : IMiddleware
    {
        public async Task InvokeAsync(HttpContext context, RequestDelegate next)
        {
            await context.Response.WriteAsync("My Custom Middleware - Starts\n");
            await next(context);
            await context.Response.WriteAsync("My Custom Middleware - Ends\n");
        }
    }

    public static class CustomMiddlewareExtension
    {
        public static IApplicationBuilder UseMyCustomMiddleware(this IApplicationBuilder app)
        {
            return app.UseMiddleware<MyCustomMiddleware>();
        }
    }

}

////
 Features of Middleware

1) Bulld-in Middleware!

Exampled Authentication, CORS, Static File, Routing.

2.) Custom Middlewene"

Created for application-specific needs like request validation on custom logging.

3) chaining.

Middleware passes contral to the next middlearne using await next().

     
     /////////////////////////////////////////////////////////////Common Middleware. Interview Questions Conceptual Orvestions

1) What is Middleware in Asp.NET Core?

→Middleware is a componest in the. request-resp Pipeline that processes HTTP requests and responses.

2)Why is Middleware important?

It provide a Modular approach to add aneu-cutting concerns like legging, authentication, and and handling.

3)Hour does Middleware differ from HttpModules in -.NET framwork?

→ Middleware ind lightweight, modules, and uses an explicit pipeline, unlike  the event-driven approach of HttpModules.

 /////////////////////////////////Practical Oructions

1)How do you create Custom Middleware in ASP.NET Cone?

->Implement a Class with an InvokeAsyn(Http Context)method and register it in the Pipeline using app.UseMiddleware<>().

2)What is the defference between app. Mors, app app. Map() and app.Run(). ?

→app.use(): Adds middleware to the pipeline and allows passing control to the next middleware.
->app. Map(): Grease branches in the pipeline for specific paths.
->app. Run(): Adds terminal middleware, no futher middleware is  executed of after this.

3.)Can you explain how Middleware is ordered in the pipeline?

→Middleware is executed in the order it's registered. in program.cs order matters becausa later middleware depends on earlier ones.

///////Scenaris-Based Questiond

1.)How would you implement logging in Middlewane?

->appluse (async (context, next) =>Console Whiteline($
"Request URL: (Context. Response StatusCodo});

2)How would you handle exceptions globally Middleware?

→ Implement a custom exception-hanelling middleware : 
   app.Use(asyc(context , next)) =>
try
{
    await next();
}
catch(Exception ex)
{
 Console.WriteLine($"Exception : {ex.Message}");
 Console.Response.StatusCode = 500;
 await Context.Response.WriteAsync("An error occured");   
}         








//////////////////////////////////////////////////
/////////////////////////////////////////////////Pls Check Again I have not Corrected it.
/////////////////////////////////////////////////           

/////////Advanced Questiond

2. How der Middleware and Filters diffen in AsSE NET Cone?

ANY

Middle ware Operated globally across all requests. → Executes before the MVC pipeline.

Filters:

Operates cithin the MVC Pipeline...

works at the controllen an action launch (og Action Filters)

2)

What happens if a Middleware does not call awart nextes;

Audio

The request pipeline shops, and no further middleware on endpoints are excauted-

2)

How would you implement Authentication Middlewant?

Wind's

Ude build-in authentication middleware(opp. base methenticatio (app. svAwhentication)).

4

Haur can Middleware be tested?

→

Write unit teves wwing and rougezag Middle behavior with tous licen macks ben HttpContent

>

Real-world Exemple of middleware

1.)

Authentication Middleware:

→ Verifies JWT tokens and checked pomillions.

2)

Rate-Limiting Middleware: the number

ber of requests given timeframe. a user makeu within a

2)

Localization Middleware.

→Reads Accept-Language headers to set the applicationes culture dynamically.

////////////////////////////

Great question 👍 Let’s break Angular Decorators into Definition → Project Use (Buy & Sell Properties) → Trade-offs → Business Impact in very easy words:





---



📖 Definition (Simple Words)



A decorator in Angular is like a special label/tag (@) that gives extra meaning or behavior to a class, method, or property.



It tells Angular how to treat that piece of code.





👉 Think of it like: when selling a flat 🏠, you put a label "For Sale" outside. The house is the same, but the label tells people how to treat it.



Examples of Angular decorators:



@Component → marks a class as a component.



@Injectable → marks a class as a service (so Angular can inject it).



@Input / @Output → mark properties to pass data in/out of components.







---



🏗️ Project Use (Buy & Sell Properties App)



Example 1: @Component



@Component({

  selector: 'app-property-list',

  templateUrl: './property-list.component.html',

  styleUrls: ['./property-list.component.css']

})

export class PropertyListComponent {

   // Shows all properties for sale

}



👉 Used for UI components like Property List, Property Detail, User Profile.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
app





---



Example 2: @Injectable



@Injectable({

  providedIn: 'root'

})

export class PropertyService {

   getAllProperties() {

      return this.http.get('/api/properties');

   }

}



👉 Used for services like fetching property data, handling payments, sending notifications.





---



Example 3: @Input / @Output



@Component({

  selector: 'app-property-detail',

  templateUrl: './property-detail.component.html'

})

export class PropertyDetailComponent {

   @Input() property: any; // property data comes from parent

   @Output() buy = new EventEmitter(); // emit event when buyer clicks Buy

}



👉 Used for passing data between components (Parent → Child, Child → Parent).





---



⚖️ Trade-offs



✅ Pros:



Makes code clean and declarative (easy to read).



Angular knows exactly how to use a class (component, service, directive).



Reduces boilerplate code.





❌ Cons:



Heavy use of decorators may confuse beginners.



Debugging decorator-related issues is sometimes tricky.



Tied to Angular → less reusable outside Angular.







---



💼 Business Impact in your Project



In your Buy & Sell Properties app:



@Component → ensures your app has clear separation of features (listings, details, payments).



@Injectable → ensures services (PropertyService, AuthService, PaymentService) can be reused anywhere → reduces duplicate code.



@Input / @Output → ensures smooth communication between buyer and seller pages.







👉 Business Impact:



Faster development because code is structured and reusable.



Easier maintenance → new developers can quickly understand the system.



Better scalability → you can add new features like Loan Calculator Component without breaking existing code.







---



✅ In short (Interview-ready):

A decorator in Angular is a special label (like @Component, @Injectable, @Input) that tells Angular how to treat a class or property.

In my Buy & Sell Properties project, I used them to create components for listings, services for data fetching, and communication between buyer/seller pages.

This made the system clean and scalable, though too many decorators can confuse beginners.





---



Do you want me to also prepare a cross-question list (l

ike “what if we don’t use decorators?”, “what’s the difference between @Injectable and @Component?”) that interviewers might ask?



/////////////////////////

Perfect 👌 Let’s go step by step with easy words + your Buy & Sell Properties project context:





---



📖 Definition (Simple Words)



A constructor is a special method inside a class that runs automatically when you create an object.



Its job: set up / initialize the object with default values or required data.



It has the same name as the class and has no return type.





👉 Think of it like: when you buy a new flat 🏠, the constructor is the builder who gives you the keys and sets up the basic things (doors, windows, electricity).





---



🏗️ Project Use (Buy & Sell Properties App)



Example: You have a class Property. When a seller adds a new property, you want to make sure some data is always initialized.



public class Property

{

    public int Id { get; set; }

    public string Title { get; set; }

    public string OwnerId { get; set; }

    public DateTime CreatedDate { get; set; }



    // Constructor

    public Property(string title, string ownerId)

    {

        Title = title;

        OwnerId = ownerId;

        CreatedDate = DateTime.Now; // auto set when object is created

    }

}



👉 When a seller lists a new property:



var newProperty = new Property("2BHK Apartment in Delhi", "Owner123");



Title, OwnerId, CreatedDate are automatically set.



No chance to forget initializing them → less bugs.







---



⚖️ Trade-offs



✅ Pros:



Ensures object is always created with required values.



Reduces mistakes (developers don’t forget to set important fields).



Makes code cleaner and more readable.





❌ Cons:



If constructor has too many parameters, it becomes hard to use (messy).



Once values are set in constructor, they may not be easily changeable later.



Overusing constructors for logic (instead of just initialization) can make code heavy.







---



💼 Business Impact in your Project



In your Buy & Sell Properties App:



Every new property or user account gets initialized correctly from the start.



Prevents bugs like "property has no CreatedDate" or "user has no role".



Makes the system more reliable → buyers and sellers trust the platform.







👉 Example:

If a buyer’s account is created, constructor ensures role = "Buyer" and registration date is set.

This avoids confusion like someone missing role and not knowing what access they have.





---



✅ In short (Interview-ready):

A constructor is a special method that initializes an object when it’s created.

In my Buy & Sell Properties project, I use constructors to make sure objects like Property or User are always initialized with correct default values (like CreatedDate, Role).

This makes the app more reliable but we need to avoid making constructors too complex.





---



Do you also want me to cover types of construct

ors (default, parameterized, static) with examples from your project so you’re 100% interview-ready?



//////////////////////////////////

Great question 👍 Let’s break it down step by step with simple words + your Buy and Sell Properties project context:





---



❓ Can we create an object of a static class?



👉 No, we cannot.



A static class in C# is like a toolbox. You don’t need to make a new toolbox every time; you just directly use the tools inside it.



Since all members inside a static class are shared across the whole application, it doesn’t make sense to create separate objects.







---



📖 Definition



Static Class: A class declared with static keyword.



It cannot be instantiated (no object creation).



All methods and variables inside it must be static.



Stored in memory only once for the whole application.









---



🏗️ Project Use (Buy & Sell Properties App)



Example where you might use a static class:



You create a static class called AppConstants to store:



Roles → Admin, Owner, Buyer



Property Status → Available, Sold, Pending







public static class AppConstants

{

    public const string RoleAdmin = "Admin";

    public const string RoleOwner = "Owner";

    public const string RoleBuyer = "Buyer";



    public static string ApplicationName = "Property Marketplace";

}



👉 Anywhere in your app, instead of creating objects, you just call:



if(user.Role == AppConstants.RoleAdmin)

{

    // Admin can approve property

}



So:



No object needed.



Easy to use everywhere.







---



⚖️ Trade-offs



✅ Pros:



Memory efficient (loaded only once).



Easy to share constants/utilities everywhere.



Good for global helper methods (e.g., logging, validation).





❌ Cons:



No flexibility (cannot create different copies/objects).



Hard to test in unit tests (since everything is global).



If misused, can make code tightly coupled (everyone depends on it).







---



💼 Business Impact in your Project



Using static classes for constants, helpers, utilities makes your Buy & Sell Properties app faster and cleaner.



Example: When checking roles or statuses, all developers use the same central place → fewer bugs, easier maintenance.



But for things that change per user (like session, property details, transactions), you must not use static classes. Otherwise, one user’s data could overwrite another’s → big problem for buyers/sellers.







---



✅ In short:



You cannot create objects of static classes.



In your property app, you use them for constants, role checks, helpers.



They give speed and consistency, but you must not use them for user-specific data.







---



Do you want me to also prep

are a small interview-ready 2–3 line answer (like you’d give in real interview), based on this detailed explanation?



/////////////////////////////////

Perfect 👍 Abhishek! Let’s break this into Definition + Project Use (Buy & Sell Properties App) + Trade-offs + Business Impact in very easy human words so you can speak smoothly in interview.





---



❓ Interview Question: What is the difference between const and static in C#? How do you use them in your project?





---



1. Definition (Easy Words)



const (Constant)

👉 A value that never changes once the program is compiled.

It’s fixed, like a birthday – can’t change once set.



static

👉 A member that belongs to the class itself, not to objects.

It’s shared by all objects.

Like a common notice board in an office → everyone can read/write, but there’s only one copy.







---



2. Project Use (Buy & Sell Properties App)



💡 In our Buy & Sell Property app:



Use of const



Example: Defining tax rate, max discount, or fixed strings.





public class PropertyConstants

{

    public const decimal MaxDiscountPercent = 10;

    public const string DefaultCurrency = "INR";

}



These don’t change at runtime, always fixed.





Use of static



Example: Logging service, cache, or utility class.





public static class Logger

{

    public static void Log(string message)

    {

        Console.WriteLine($"[LOG] {message}");

    }

}



All modules (Buyer, Seller, Admin) can use the same logger.









---



3. Trade-offs (Considerations)



Const



✅ Very fast (replaced at compile time).



❌ If value changes later (like tax rate), you must recompile and redeploy.





Static



✅ Saves memory (only one copy).



✅ Good for global utilities (logger, cache).



❌ If misused, can cause state issues (shared data overwritten by multiple users).









---



4. Business Impact (Easy Words)



Using const ensures no accidental changes → safe for business rules (e.g., max discount never exceeded).



Using static reduces memory usage → faster and cheaper server resources.



But misuse of static (shared state) can cause bugs → e.g., two users overwriting each other’s session if not handled properly.







---



✅ Final Interview Line:

“In our Buy & Sell Property project, we used const for fixed rules like max discount and default currency, and static for utilities like logging and caching. Const gave us safety for business rules, and static reduced memory cost by sharing one copy across modules. The trade-off is that const values need redeploy if changed, and static must be carefully managed to avoid shared state issues.”





---



👉 Do you want me to also add code demo where 

both const and static are used together in the same class so you can show it practically in interview?



//////////////////////////////////



Perfect 👍 Abhishek! Let’s break this into Definition + Project Use (Buy & Sell Properties App) + Trade-offs + Business Impact in very easy human words so you can speak smoothly in interview.

❓ Interview Question: What is the difference between const and static in C#? How do you use them in your project?
1. Definition (Easy Words)
const (Constant)
👉 A value that never changes once the program is compiled.
It’s fixed, like a birthday – can’t change once set.

static
👉 A member that belongs to the class itself, not to objects.
It’s shared by all objects.
Like a common notice board in an office → everyone can read/write, but there’s only one copy.

2. Project Use (Buy & Sell Properties App)
💡 In our Buy & Sell Property app:

Use of const

Example: Defining tax rate, max discount, or fixed strings.
public class PropertyConstants
{
    public const decimal MaxDiscountPercent = 10;
    public const string DefaultCurrency = "INR";
}
These don’t change at runtime, always fixed.
Use of static

Example: Logging service, cache, or utility class.
public static class Logger
{
    public static void Log(string message)
    {
        Console.WriteLine($"[LOG] {message}");
    }
}
All modules (Buyer, Seller, Admin) can use the same logger.
3. Trade-offs (Considerations)
Const

✅ Very fast (replaced at compile time).
❌ If value changes later (like tax rate), you must recompile and redeploy.
Static



✅ Saves memory (only one copy).
✅ Good for global utilities (logger, cache).
❌ If misused, can cause state issues (shared data overwritten by multiple users).
4. Business Impact (Easy Words)
Using const ensures no accidental changes → safe for business rules (e.g., max discount never exceeded).
Using static reduces memory usage → faster and cheaper server resources.
But misuse of static (shared state) can cause bugs → e.g., two users overwriting each other’s session if not handled properly.
✅ Final Interview Line:
“In our Buy & Sell Property project, we used const for fixed rules like max discount and default currency, and static for utilities like logging and caching. Const gave us safety for business rules, and static reduced memory cost by sharing one copy across modules. The trade-off is that const values need redeploy if changed, and static must be carefully managed to avoid shared state issues.”


👉 Do you want me to also add code demo where both const and static are used together in the same class so you can show it practically in interview?





////////////////////////////////

Got it Abhishek 👍 Let’s make your answer interview-ready with Definition + Project Use + Trade-offs + Business Impact in very simple words.





---



❓ Interview Question: “How do you optimize a Stored Procedure or SQL Query?”





---



1. Definition (Easy Words)



👉 Query optimization means: “Making your SQL run faster and use fewer resources (CPU, memory, disk).”

It’s like cooking food quickly without wasting gas or ingredients.





---



2. Project Use (Buy & Sell Properties App Example)



💡 In our Buy & Sell Property app, we had:



A Property Search Query → Users search by price, city, status (active/sold).



If query is slow → users wait longer, bad experience.



So, we optimized queries to make property search faster.







---



3. Techniques + Easy Human Explanation



Use SET NOCOUNT ON

👉 Stops sending “rows affected” messages.

Example: 5 rows affected → we don’t need this in API, it just wastes network.



Specify column names instead of SELECT *

👉 Instead of bringing all columns, bring only what you need.

Example: SELECT EmpID, Name FROM dbo.Employee

(In property app: SELECT PropertyName, Price not SELECT *).



Use schema name before table

👉 Example: dbo.Employee

It makes SQL Server find the table faster (like giving full address, not just name).



Avoid Dynamic Queries

👉 Example: Don’t build query with string concat → risk of SQL Injection.

Use parameters instead.



Use EXISTS() instead of COUNT()

👉 If you just want to check if record exists, use EXISTS (stops after first match) → faster.



Use Transactions only when needed

👉 Transactions lock tables. If you don’t need them, avoid them → less blocking.







---



4. Trade-offs (Things to Consider)



Optimization makes query faster, but sometimes requires more developer effort.



Example: Instead of SELECT *, we write 5–6 column names → a bit longer code, but worth it.



Using indexes helps speed, but takes extra space in database.







---



5. Business Impact (Easy Words)



Faster query = Faster property search.



Faster = Happy users → More sales.



Less CPU/Memory = Lower server cost for company.



Secure queries = No data leaks / hacking risk.







---



✅ Final Interview Line:

“In our Buy & Sell Property project, we optimized queries by avoiding SELECT *, using schema names, replacing COUNT with EXISTS, and using transactions carefully. This improved property search speed, reduced server cost, and made the system more secure for customers.”





---



👉 Do you want me to also add Indexes optimization (clustered

 vs non-clustered) into this answer? That often comes as a cross-question in SQL interviews.



//////////////////////////////

Great 👍 this is one of the hot interview questions for full-stack developers. Let’s break it down into 4 simple parts:





---



🔑 1. Definition (Easy Word)



Microservices means:

👉 Instead of building one big application (monolith), we break it into small, independent services.



Each service does one job (example: User Service, Payment Service, Property Service).



They can run independently, talk to each other through APIs (usually REST or gRPC).





Think of it like an apartment building:



Each flat (microservice) is separate but together they make the building (application).







---



🏠 2. How I used Microservices in my Buy & Sell Properties Application



In my project, I divided the system into microservices like this:



User Service → Handles registration, login, roles (buyer, seller, admin).



Property Service → Manages property listing, details, search.



Payment Service → Handles property payments, transactions, EMI calculation.



Notification Service → Sends emails, SMS, push alerts when property is listed/sold.





Example Flow:



Buyer logs in → Auth Service checks role.



Buyer views properties → Property Service provides data.



Buyer makes payment → Payment Service processes.



Notification Service sends confirmation message.





This way, if one service (like Payment) is down, the rest still work.





---



⚖️ 3. Trade-offs (Pros & Cons)



✅ Advantages



Scalable → You can scale one service (e.g. Payment during high sales).



Independent Deployment → Teams can update services without breaking others.



Resilient → One service failure won’t break the whole app.



Technology Freedom → Each service can use best suited language/DB.





❌ Challenges (Trade-offs)



Complexity → Harder to manage than one app.



Communication Overhead → Services must talk over network (slower than in-process).



Data Consistency → Each service has its own DB, so syncing can be tricky.



Deployment Cost → Needs containers, orchestration (Docker, Kubernetes).







---



💼 4. Business Impact



For a Property Buy & Sell application, microservices help the business grow faster because:



New features (like chat or payments) can be added without touching the old system.



The system can handle more users and properties as the company grows.



Downtime is reduced → better customer trust.









---



🎯 Interview-Ready Short Answer



> “Microservices is an architecture where we split our big application into small, independent services. In my Buy & Sell Properties project, we used microservices like User Service, Property Service, Payment Service, and Notification Service. This gave us scalability, flexibility, and resilience. The trade-off is added complexity and deployment overhead, but the business impact was faster delivery of features and better reliability.”









---



👉 Do you want me to also give you a small code flow 

(API gateway + one service) so you can demonstrate technically how microservices work in your project?

//////////////////////////////////////////////////////////////////////Open Connect Id

//////////////////////////////////////
//////////////////////////////////////Tech Mahindra
/////////////////////////////////////

///////////////////////left join of linq query.
///////////////////////Explicit and Explicity type 
//////////////////////


//////////////////////////////////////
/////////////////////////////////////neoSoft
////////////////////////////////////
//what the pakage use for creating new JWT Token.
//find the second highest salary in linq query.
//Angular Fock
//How you are implement the lazy loading in the Angular.



///////////////////////////////////////////////////////
///////////////////////////////////////////////////////HCL
///////////////////////////////////////////////////////
Run.Lock
Cursor
How many multiple ways we can get the data from Stored Procedure.
Rjax
Rjx(state management)


///////////////////////////////////////////////////////////////////////////////////why we are using Non clustered index



/////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////Persistance
////////////////////////////////////////////////////////////////////
///////////////////////////css
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////What is flex box.
Great question 👌 Let’s break Flexbox in CSS into easy words + project use + business impact.


---

📖 Definition (Easy words)

Flexbox (Flexible Box Layout) is a layout system in CSS that helps us arrange items inside a container easily.

Imagine you have a box (container) and many small boxes inside it (items).

Flexbox helps you align, distribute space, and reorder items without writing too much CSS.

It works in one direction at a time → either row (horizontal) or column (vertical).



---

🛠 Simple Example

<div style="display: flex; justify-content: space-between; align-items: center; height: 100px; border: 1px solid black;">
  <div style="background: red; width: 50px; height: 50px;"></div>
  <div style="background: green; width: 50px; height: 50px;"></div>
  <div style="background: blue; width: 50px; height: 50px;"></div>
</div>

👉 In this example:

display: flex; → turns the container into a flexbox.

justify-content: space-between; → spreads the boxes evenly left and right.

align-items: center; → aligns them vertically in the middle.



---

🏗 Project Use (Buy & Sell Properties App)

In my property app frontend (Angular), I use Flexbox for:

Property Listing Page → showing properties in a row with equal spacing.

Header/Navbar → aligning logo on the left and login/profile button on the right.

Chat Box (Real-Time with SignalR) → messages aligned left for buyers and right for sellers.



---

⚖️ Trade-offs

✅ Pros:

Easy to align items without complex CSS.

Works well for responsive designs (mobile, tablet, desktop).

Less code compared to floats or tables.


❌ Cons:

Only works in one direction (row or column). For complex grid layouts, CSS Grid is better.

Older browsers (IE) may not fully support it.



---

💼 Business Impact

Faster UI development → quicker feature delivery.

Cleaner responsive design → better user experience.

Easier maintenance → developers spend less time fixing alignment bugs.
//Rxjs() -->tell more about the things
//Do we nessary to keep constructor in .ts file.
//can we use jquery in javaScript.
//JoSet.
//what the ID that you are using.
//Where does managing your code.
//Can we write the code for generarting jwt token.
//Angular : if I have to send the multiple request(like three times) for checking response will not give the error(same error) , if all the time will give then I will responde to to Ui that error.
////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
////////////
css
//What is flex box.
//Rxjs() -->tell more about the things
//Do we nessary to keep constructor in .ts file.
//can we use jquery in javaScript.
//JoSet.
//what the ID that you are using.
//Where does managing your code.
//Can we write the code for generarting jwt token.

//////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////LTFS
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//////////////////////////////////////abstract factory Design patter.
/////////////////////////////////////What are ways we can return multiple method(tuple) ?
////////////////////////////////////If multiple tread what to access to signaloton how to pretect(lock).
///////////////////////////////////what is output od javascript ?
"Test" + 1 + 2  => "Test12"
1 + 2 + "Test" + 1 + 2 => "3Test12"
/////////////////////////////////////////////////Scedocode in css
//////////////////////////////////////////////bootstrap DTO
/////////////////////////////////////////////JavaScript OOP
/////////////////////////////////////////////Deadlock lock.
////////////////////////////////////////////class and struct 
////////////////////////////////////////////Hashtable and dictionary.


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////ness
///////////////////////////////////////////////////////////////
//How to track the Health of application ?
//Write the dictionary code for , Adding , retriving , removing , without using in build function in c#
//How t


/////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
//////////////////////////////////////////////////////LTFS
///////////////////////////////////////////////////////
Standlone component
Monolotics and Microservices
How the 2 services communicate with each other(if you are bringing data from one services and sending back to another services , How to get this is done from response).


////////////////////////////////////////////////////////////////////////////////MSIL
🧠 Definition (In Easiest Words)

MSIL stands for Microsoft Intermediate Language.
When you write C# code, it is not directly converted into machine code.
Instead, the C# compiler first converts your code into MSIL — a middle language that any .NET platform can understand.

At runtime, the CLR (Common Language Runtime) converts MSIL into machine code (specific to your computer’s processor).

---

🔍 Example

Suppose you wrote this code in C#:

int a = 10;
int b = 20;
int c = a + b;
Console.WriteLine(c);

When you compile this code:

1. It gets converted to MSIL instructions like:

ldloc.0
ldloc.1
add
call WriteLine

These are CPU-independent instructions.


2. Then CLR takes this MSIL and converts it into machine code that your PC understands.




---

🏗️ Project Use (Buy & Sell Properties App)

In your Buy & Sell Property Application, every time you build your project:

Your C# controllers, services, and models are compiled into MSIL.

When a user requests data (like viewing a property), CLR reads the MSIL, converts it to machine code, and executes it efficiently on the server.


So basically, MSIL makes your .NET app portable and fast — it can run on any system where .NET runtime is available (Windows, Linux, macOS).


---

⚖️ Trade-offs

✅ Advantages

Platform independent (runs anywhere with .NET Runtime)

Improves performance through JIT (Just-In-Time) Compilation

Enables cross-language support (C#, VB.NET, F# etc. can work together)


❌ Disadvantages

Adds one extra compilation step (C# → MSIL → Machine Code)

First-time execution may be slightly slower due to JIT compilation



---

💼 Business Impact

Because of MSIL:

Your .NET application becomes cross-platform, reducing development cost.

The runtime automatically optimizes your code for the machine it runs on, giving better performance.

Developers don’t need to rewrite code for different operating systems — saving time and money.


//////////////////////////////////////////////////////////////////////////////////I want to update the data by put request but that data is not available , what will happen ?

Scenario

You are sending a PUT request to update a record in the database —
but the record (data) you are trying to update doesn’t exist.

Example:

PUT /api/users/10
{
  "name": "Abhishek",
  "email": "abhi@test.com"
}

But there is no user with ID = 10 in the database.


---

🧠 What Happens

By default, a PUT request is expected to update an existing resource.

If the resource doesn’t exist, then there are two possible behaviors depending on your API design:



---

🅰️ Case 1: Most Common (Safe) Behavior

✅ The server will return an error — usually HTTP 404 Not Found.
This means:

> “The data you want to update doesn’t exist in the system.”



Example response:

{
  "status": 404,
  "message": "User not found."
}


---

🅱️ Case 2: Alternative Behavior (Upsert)

Some APIs are designed to create the record if it doesn’t exist —
this is called “Upsert” (Update + Insert).

In that case:

The same PUT request will create a new record with ID = 10.

It will return 201 Created or 200 OK.


Example response:

{
  "status": 201,
  "message": "User created successfully."
}


---

🧩 Summary (Easy to Remember)

Situation Result Status Code

Data exists Updated successfully 200 (OK)
Data doesn’t exist Usually error 404 (Not Found)
API supports Upsert Creates new data 201 (Created)



---

🏗️ Project Example (Buy & Sell Properties App)

In your app —
If you send a PUT request to update a property that doesn’t exist:

PUT /api/properties/99

→ Your API should return 404 Not Found,
so that the frontend can show:

> “Property not found. Please check the ID or create a new one.”



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Data Anotation in .net


> “Data Annotations” are small labels (attributes) we put on our model properties to give extra meaning — like saying “this field is required,” “this should look like an email,” or “this number can’t be more than 100.”



In short, they help validate data automatically before saving it to the database or processing it.


---

🧩 Example (with simple explanation):

Let’s say we have a Property model in our Buy & Sell Property Application:

using System.ComponentModel.DataAnnotations;

public class Property
{
    [Key]
    public int Id { get; set; }

    [Required(ErrorMessage = "Property Name is required")]
    [StringLength(100, ErrorMessage = "Property Name can't be longer than 100 characters")]
    public string Name { get; set; }

    [Range(100000, 100000000, ErrorMessage = "Price must be between 1 lakh and 10 crore")]
    public decimal Price { get; set; }

    [EmailAddress(ErrorMessage = "Please enter a valid email address")]
    public string OwnerEmail { get; set; }
}

🔍 Explanation:

[Key] → Marks Id as the Primary Key.

[Required] → Makes sure Name cannot be empty.

[StringLength(100)] → Limits the text length.

[Range()] → Sets a price range.

[EmailAddress] → Ensures a valid email format.



---

🧰 How it works in the project (Project Use):

In the Buy & Sell Property App,

When a user adds a property through a form, these annotations automatically check if the entered data is valid.

If the name or price is missing, the API will return an error message before saving it to the database.

This helps maintain clean and reliable data.



---

⚖️ Trade-Off:

Advantage Disadvantage

✅ Less manual code — validation happens automatically ❌ Only works for simple validation; for complex logic, you need custom validation attributes
✅ Improves data consistency and security ❌ May not cover complex business rules directly



---

💼 Business Impact:

Fewer bugs and cleaner data → users can’t submit wrong info.

Faster development → less manual validation code.

Improves app reliability → fewer crashes due to bad input.



---

🎯 **Interview Answer (Short & Impressive):

> “Data Annotations in .NET Core are attributes we apply on model properties to perform validation automatically.
In my Buy & Sell Property App, I used them to validate property details like price, name, and owner email before saving.
It reduced code, improved data quality, and made the app more user-friendly.”


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Condition Data Annotation
🧠 Definition (Simple words like for a 5-year-old):
Conditional Data Annotation means —
👉 "You apply validation only when a specific condition is true."

For example:
💬 “If IsMarried is true, then SpouseName should not be empty.”
Otherwise, no need to check it.

💻 Example (with explanation):
✅ Step 1: Model class
using System.ComponentModel.DataAnnotations;

public class Person
{
    public bool IsMarried { get; set; }

    [RequiredIf("IsMarried", true, ErrorMessage = "Spouse Name is required when married.")]
    public string? SpouseName { get; set; }
}
✅ Step 2: Create custom attribute
using System;
using System.ComponentModel.DataAnnotations;
using System.Reflection;

public class RequiredIfAttribute : ValidationAttribute
{
    private readonly string _conditionProperty;
    private readonly object _expectedValue;

    public RequiredIfAttribute(string conditionProperty, object expectedValue)
    {
        _conditionProperty = conditionProperty;
        _expectedValue = expectedValue;
    }

    protected override ValidationResult IsValid(object value, ValidationContext context)
    {
        var property = context.ObjectType.GetProperty(_conditionProperty);
        if (property == null)
            return new ValidationResult($"Unknown property: {_conditionProperty}");

        var conditionValue = property.GetValue(context.ObjectInstance);

        if (conditionValue?.ToString() == _expectedValue.ToString())
        {
            if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
            {
                return new ValidationResult(ErrorMessage);
            }
        }

        return ValidationResult.Success!;
    }
}
💼 Project Use (Buy & Sell Property App)
In your Buy & Sell Property application,
you can use Conditional Data Annotation like this:

If IsForRent = true, then RentAmount must be required.
If IsForSale = true, then SellingPrice must be required.
Example:

public class Property
{
    public bool IsForRent { get; set; }

    [RequiredIf("IsForRent", true, ErrorMessage = "Rent amount is required when property is for rent.")]
    public decimal? RentAmount { get; set; }

    public bool IsForSale { get; set; }

    [RequiredIf("IsForSale", true, ErrorMessage = "Selling price is required when property is for sale.")]
    public decimal? SellingPrice { get; set; }
}
⚖️ Trade-Off
✅ Advantages	⚠️ Disadvantages
Keeps model clean and readable	Needs custom attribute logic
Automatically validates based on conditions	Might be harder to test if too many conditions
No extra code in controller	Performance overhead if used heavily
💡 Business Impact (Easy words):
Using conditional data annotations ensures users don’t miss required fields based on their selections.
👉 This improves data accuracy, reduces form errors, and saves developer time in writing manual checks.

Would you like me to show the same validation working with Reactive Forms in Angular (frontend) for your Buy & Sell Property app?


On Wed, 8 Oct, 2025, 4:45 pm abhishek singh, <abhisheksinghchauhan442@gmail.com> wrote:
Here’s a very easy-to-understand explanation of “Data Annotation in .NET Core” — made for interview and real project answers 👇


---

🧠 Definition (5-year-old can understand):

> “Data Annotations” are small labels (attributes) we put on our model properties to give extra meaning — like saying “this field is required,” “this should look like an email,” or “this number can’t be more than 100.”



In short, they help validate data automatically before saving it to the database or processing it.


---

🧩 Example (with simple explanation):

Let’s say we have a Property model in our Buy & Sell Property Application:

using System.ComponentModel.DataAnnotations;

public class Property
{
    [Key]
    public int Id { get; set; }

    [Required(ErrorMessage = "Property Name is required")]
    [StringLength(100, ErrorMessage = "Property Name can't be longer than 100 characters")]
    public string Name { get; set; }

    [Range(100000, 100000000, ErrorMessage = "Price must be between 1 lakh and 10 crore")]
    public decimal Price { get; set; }

    [EmailAddress(ErrorMessage = "Please enter a valid email address")]
    public string OwnerEmail { get; set; }
}

🔍 Explanation:

[Key] → Marks Id as the Primary Key.

[Required] → Makes sure Name cannot be empty.

[StringLength(100)] → Limits the text length.

[Range()] → Sets a price range.

[EmailAddress] → Ensures a valid email format.



---

🧰 How it works in the project (Project Use):

In the Buy & Sell Property App,

When a user adds a property through a form, these annotations automatically check if the entered data is valid.

If the name or price is missing, the API will return an error message before saving it to the database.

This helps maintain clean and reliable data.



---

⚖️ Trade-Off:

Advantage Disadvantage

✅ Less manual code — validation happens automatically ❌ Only works for simple validation; for complex logic, you need custom validation attributes
✅ Improves data consistency and security ❌ May not cover complex business rules directly



---

💼 Business Impact:

Fewer bugs and cleaner data → users can’t submit wrong info.

Faster development → less manual validation code.

Improves app reliability → fewer crashes due to bad input.



---

🎯 **Interview Answer (Short & Impressive):

> “Data Annotations in .NET Core are attributes we apply on model properties to perform validation automatically.
In my Buy & Sell Property App, I used them to validate property details like price, name, and owner email before saving.
It reduced code, improved data quality, and made the app more user-friendly.”



//////////////////////////////////////
//////////////////////////////////////citiesTech
//////////////////////////////////////
How many type of state management will be their in Angular ?
How to improve the perform of entity framework?
What is no tracking in Ef ?


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////Acqueon Technologies
/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Rank and RowNumber.
Excellent question, Abhishek 👏

Let’s break this down in super easy words so that even a 10-year-old can understand it perfectly — and it’s interview-ready too.

🧩 Definition (Easy Words)
👉 ROW_NUMBER()

Gives a unique number to each row — 1, 2, 3, 4, …
Even if two rows have the same value, they get different numbers.
Think of it like giving roll numbers to students — even if marks are the same, roll numbers are unique.
👉 RANK()

Also gives numbers based on sorting order,
But if two rows have the same value, they get the same rank, and the next rank is skipped.
Think of it like Olympic medals — if two players tie for 1st place, the next one is 3rd (2nd is skipped).
🧮 Example
SELECT 
    Name, 
    Marks,
    ROW_NUMBER() OVER (ORDER BY Marks DESC) AS RowNum,
    RANK() OVER (ORDER BY Marks DESC) AS RankNum
FROM Students;
Suppose the table looks like this:
Name	Marks
A	95
B	90
C	90
D	85
Output:
Name	Marks	RowNum	RankNum
A	95	1	1
B	90	2	2
C	90	3	2
D	85	4	4
✅ ROW_NUMBER() → Always unique (1, 2, 3, 4)
✅ RANK() → Same rank for same marks, and skips the next number (1, 2, 2, 4)

🏗 Project Use (Buy & Sell Property App)
In your Buy & Sell Property Application,
you can use RANK() or ROW_NUMBER() for features like:

Ranking properties based on price or rating.
e.g., RANK() OVER (ORDER BY Price DESC) → helps show “Top 10 most expensive properties.”
Showing unique numbers to each property in a search result using ROW_NUMBER().
⚖️ Trade-offs
Case	When to Use
🧮 ROW_NUMBER()	When you just want unique numbering, no skips.
🏆 RANK()	When you want to show equal rank for same values.
💼 Business Impact
Helps users easily view sorted and ranked data (like Top Properties, Top Sellers).
Improves data presentation and analytics, which helps business users take decisions faster.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////PartisionBy

//Angular
Interpretors
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Explain async/await and Task vs ValueTask vs IAsyncEnumerable
1. What is async and await?

👉 Definition (for 5-year-old):
Think of it like — you ask your computer to “do some work in the background,” and you’ll continue doing your own work.
When it’s done, it will tell you (await) — “Hey, I’m ready!”


---

🔹 Example:

public async Task GetPropertyDetailsAsync()
{
    Console.WriteLine("Fetching property details...");
    await Task.Delay(3000); // simulates 3 sec database call
    Console.WriteLine("Property details fetched!");
}

➡️ Here, await pauses this method until the task finishes —
but your application does not freeze.
It can do other work (like loading the UI or another API call).


---

🏠 Project Use (Buy & Sell Properties App)

In our app, we use async/await when:

Fetching property list from API

Uploading images to the server

Sending email or SMS notifications


💡 This keeps the app fast and responsive, even if network calls take time.


---

⚙️ Business Impact

✅ Improves user experience (no freezing UI).
✅ Increases scalability — server can handle more users at once.
✅ Better performance under high load.


---

🧩 2. What is Task?

👉 Think of a Task as a promise that something will finish later.

Example:

public async Task<string> GetPropertyNameAsync()
{
    await Task.Delay(2000);
    return "Luxury Apartment";
}

➡️ Task<string> means — this method will eventually return a string, but not now.


---

⚡ 3. What is ValueTask?

👉 A ValueTask is like a Task, but lighter and faster when the result is already available.

Example:

public ValueTask<string> GetCachedPropertyAsync()
{
    if (_cache != null)
        return new ValueTask<string>(_cache); // already ready, no waiting

    return new ValueTask<string>(GetFromDatabaseAsync());
}

✅ Use ValueTask when result might already be available (like from cache).
❌ Don’t use it everywhere — it adds a bit of complexity if misused.


---

🔁 4. What is IAsyncEnumerable?

👉 It’s like saying:
“Give me the data one by one asynchronously, don’t wait for the full list.”

Example:

public async IAsyncEnumerable<string> GetAllPropertiesAsync()
{
    for (int i = 1; i <= 3; i++)
    {
        await Task.Delay(1000); // simulate delay
        yield return $"Property {i}";
    }
}

➡️ You can consume it like this:

await foreach (var property in GetAllPropertiesAsync())
{
    Console.WriteLine(property);
}

💡 Instead of waiting for all 1000 properties at once, you start displaying results as they arrive.


---

🧠 Trade-Offs

Concept Advantage Trade-Off

Task Simple and widely used Uses more memory for small fast operations
ValueTask Memory efficient More complex to manage
IAsyncEnumerable Streams data live Slightly harder to debug
async/await Makes async code look like normal code Must handle exceptions properly



---

🏢 Business Impact in Real Project

Area Benefit

API Layer Handles more users without slowing down
UI Page loads faster; partial data loads instantly
Resource Usage Server uses fewer threads
Cost Saves hosting cost due to better scalability


///////////////////////////////////////////////////////////////////////////////////////
What are Delegates, Func, Action, Predicate?

////////////////////////////////////////////////////Func
How to Explain Func in C# (L2 Interview Level) Easily:


---

Definition:

A Func is a built-in delegate in C# that represents a method that returns a value. It can accept up to 16 input parameters and one return type.


---

Real-World Analogy:

Think of a Func as a calculator—you give it some numbers (inputs), it processes them, and gives you the result (output).


---

Syntax:

Func<input1, input2, ..., inputN, returnType>

The last type is always the return type.

All types before that are input parameters.



---

Code Example 1: Basic Func with One Parameter

using System;

namespace FuncExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // Step 1: Define a Func that takes one integer and returns its square
            Func<int, int> square = x => x * x;

            // Step 2: Call the Func
            int result = square(5);

            // Step 3: Display the result
            Console.WriteLine("Square of 5 is: " + result);
        }
    }
}

Output:

Square of 5 is: 25


-- -

Code Example 2: Func with Multiple Parameters

using System;

namespace FuncExample
{
    class Program
    {
        static void Main(string[] args)
        {
            // Step 1: Define a Func that takes two integers and returns their sum
            Func<int, int, int> add = (x, y) => x + y;

            // Step 2: Call the Func
            int sum = add(10, 20);

            // Step 3: Display the result
            Console.WriteLine("Sum of 10 and 20 is: " + sum);
        }
    }
}

Output:

Sum of 10 and 20 is: 30


-- -

Explanation:

1.Delegate Declaration:

Func<int, int> means it takes one integer and returns an integer.

Func<int, int, int> means it takes two integers and returns an integer.



2. Lambda Expression:

x => x * x is the logic written in short form.

(x, y) => x + y for addition.



3. Inline and Easy:

You don't need to write a separate method—just define and use.





---

Key Points to Mention in the Interview:

1.Predefined Delegate: No need to create custom delegates.


2. Supports Multiple Parameters: Can handle up to 16 inputs.


3. Always Returns a Value: Unlike Action, Func always returns something.


4. Perfect for LINQ and Functional Programming: Works well with Select(), Where(), and other LINQ methods.




---

Would you like me to explain the difference between Func, Action, and Predicate next? This is a common follow-up in L2 interviews.


///////////////////////////////////////////////////////////////Action
How to Explain Action in C# in the Interview (L2 Round) with Simple Code?


---

What is Action in C#?

Action is a built-in delegate in C# that points to a method that does not return a value (void) but can take 0 to 16 parameters.

Think of it as a way to pass a method as a parameter.



---

Real-World Analogy

If you want someone to execute a task like "Send an Email" or "Print a Document," you give them the action to perform.In C#, you give it as an Action.


---

Example 1: Action with No Parameters

using System;

class Program
{
    static void Main(string[] args)
    {
        // Step 1: Define an Action that points to a method with no parameters
        Action sayHello = () => Console.WriteLine("Hello, World!");

        // Step 2: Invoke the Action
        sayHello();
    }
}

Output:

Hello, World!


-- -

Explanation

1.Action sayHello: This is an Action delegate with no parameters.


2. () => Console.WriteLine("Hello, World!");: This is a lambda expression that gets called.


3. sayHello();: We call the Action like a method.




---

Example 2: Action with Parameters

If you want the Action to take parameters, just specify the types:

using System;

class Program
{
    static void Main(string[] args)
    {
        // Step 1: Define an Action that accepts two parameters
        Action<string, int> displayInfo = (name, age) =>
        {
            Console.WriteLine($"Name: {name}, Age: {age}");
        };

        // Step 2: Invoke the Action with parameters
        displayInfo("Abhishek", 28);
    }
}

Output:
Name: Abhishek, Age: 28
-- -

Key Points to Mention in Interview:

1.Action is a Delegate: It is a predefined delegate for methods with void return type.


2. Supports Multiple Parameters: It can take up to 16 parameters.


3. No Return Value: Unlike Func, it does not return any value.


4. Used for Callbacks: Often used for event handling, callbacks, and invoking methods.




---

Would you like me to explain the difference between Action, Func, and Predicate next?


/////////////////////////////////////////////////////////////////Predicates
How to Explain Predicate in C# in the Interview (L2 Round) with Simple Code?


---

What is Predicate in C#?

A Predicate is a built-in delegate in C# that represents a method that takes one input parameter and returns a boolean value (true or false).

It is generally used to filter or search for items in collections like lists or arrays.



---

Real-World Analogy

Imagine you have a list of students and you want to find out who is above 18 years old. You can use a Predicate to define this condition.


---

Example 1: Basic Predicate Usage

using System;

class Program
{
    static void Main(string[] args)
    {
        // Step 1: Define a Predicate to check if a number is even
        Predicate<int> isEven = number => number % 2 == 0;

        // Step 2: Test the Predicate
        Console.WriteLine(isEven(10)); // Output: True
        Console.WriteLine(isEven(15)); // Output: False
    }
}

Output:

True
False


---

Explanation

1.Predicate<int> isEven: Defines a Predicate that accepts an int and returns a bool.


2. number => number % 2 == 0: This lambda expression checks if the number is even.


3. isEven(10): Invokes the Predicate with the value 10, and it returns true.




---

Example 2: Predicate with List Filtering

using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        List<int> numbers = new List<int> { 5, 10, 15, 20, 25, 30 };

        // Step 1: Define a Predicate to find numbers greater than 15
        Predicate<int> isGreaterThan15 = num => num > 15;

        // Step 2: Find all numbers that match the condition
        List<int> filteredNumbers = numbers.FindAll(isGreaterThan15);

        // Step 3: Display the result
        Console.WriteLine("Numbers greater than 15:");
        filteredNumbers.ForEach(Console.WriteLine);
    }
}

Output:

Numbers greater than 15:
20
25
30


-- -

Explanation

1.FindAll(isGreaterThan15): Uses the Predicate to find all numbers greater than 15.


2. ForEach(Console.WriteLine): Prints each number that matches the condition.

////////////////////////////////////////////////////////////////////////////////////////////////////////////PWC
Type of NgOn Chnages
Object vs Dynamic
Task.Sleep



////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////Most asked Question refine answer
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////Reflection
-->Reflection means loocking inside your code(like classes, methods , properties) at runtime.
It allows your program to know about itself and work types and members dynamically - even if you  didn't hardcode them.

It's like your code holding a miror and saying,
"Hey, what classes, methods , or proprties do I have? Let me check and use them!"

//when to use
Used when your code needs to work with unknown types or flexible data.

code
class program
{
public string Name;
public string Age;
}

class Program
{
static void Main()
{
Type type = typeof(Person);

foreach(var prop in type.GetProperties())
{
 Console.WriteLine(prop.Name);
}
}
}

//
Great 👍 let’s break Reflection in C# into definition, project use, trade-offs, and business impact with very easy words 👇

📝 Definition
Reflection in C# is a feature that lets your program inspect itself at runtime.
Using Reflection, you can look at a class’s properties, methods, constructors, attributes even if you don’t know them at compile time.
You can also create objects, call methods, or access fields dynamically.
👉 Think of it like a mirror 🪞 → your program looks at itself and decides what to do.

💻 Project Use (Buy & Sell Properties App)
In your property application, Reflection can be useful in:

Dynamic Mapping – Suppose you are importing property data from Excel/CSV where column names may change. Using Reflection, you can dynamically map columns to model properties.

Serialization/Deserialization – When converting Property objects into JSON or XML, Reflection is used internally to inspect object properties.

Validation & Custom Attributes – If you create a custom attribute [OwnerOnlyAccess], Reflection helps the system check at runtime whether a user has permission.

✅ Example Code:

public class Property
{
    public int Id { get; set; }
    public string Name { get; set; }
}

var property = new Property { Id = 101, Name = "Luxury Villa" };

// Reflection Example: Get all properties
Type type = property.GetType();
foreach (var prop in type.GetProperties())
{
    Console.WriteLine($"{prop.Name} = {prop.GetValue(property)}");
}
👉 Output:

Id = 101
Name = Luxury Villa
⚖️ Trade-offs
✅ Pros:

Very powerful → dynamic behavior without knowing everything at compile time.
Used in frameworks like ASP.NET Core, Entity Framework, JSON.NET (they all rely on Reflection).
Great for generic solutions (serialization, mapping, dependency injection).
❌ Cons:

Performance overhead → slower than normal method calls.
Harder to debug → since things happen at runtime.
Security risk → can expose private methods/fields if not restricted.
💼 Business Impact
🚀 Flexibility → Your property application can easily handle dynamic data structures without rewriting code.
📉 Risk of slowness → If overused (for every request), it can make the app slower, which may hurt user experience.
🔒 Security concerns → Needs careful handling so attackers can’t misuse Reflection to access private data.
💰 Cost-effective → Reduces development effort because you can build generic reusable logic (e.g., automatic mapping/serialization).
👉 In short:
Reflection = Mirror for your code.
It gives flexibility to inspect and modify objects dynamically, but must be used wisely to avoid performance and security issues.



///////////////////////////
why c# doesnot uses multiple inheritance

-->C# does not support multiple class inheritance to avoid ambiguity(Diamond Problem).
-->But you can use multiple interfaces, which gives flexibility without confusion.
--> Because it can create confusion and conflicts especially when two parent classes have the same method or property name.
--> This is called the diamond Problem - and c# avoids it by not allowing a class to inherit from more than one class.

Real life example
Two bosses -->  diffrent instructions -->  same task --> now you are confuse.

Class A
   /      \
Class B   Class C
   \      /
    Class D

In this scenario, if Class B and Class C both inherit a method from Class A, then Class D could inherit two conflicting versions of that method. C# avoids this ambiguity by allowing only single inheritance,
ensuring that each class has a clear and singular parent class.

//////////////////////////////////////what is diffrence between DbContext and DbSet
DbContext : Manages the connection to the database.
DbSet : Represent a table in the database and provide methods to interact with data in the table
what is DBcontext and DBset.
DbContext :
Think of DbContext as a bridge between your c# code and your database. It is like a manager rthat handles the interaction with database, like retrieving, updating ,and saving data.

what id does : It connects to the database and helps you work the data.
Where it is used : In Entity Framework Core to represent your database connection.

DbSet:
DbSet is like a collection of a special type of data from the database(like a table).It allows yoiu to perform operations(add, delete,update etc.)
on the table.

What it does : Represent a table in your database and gives you access to the rows(records) of the table.
Where it is used : Inside the DbContest to interract with specific table.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////C# bit confusing Concept
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////
Method Hinding

public class Parent
{
    public void Display()
    {
        Console.WriteLine("Parent Display");
    }
}

public class Child : Parent
{
    public new void Display()
    {
        Console.WriteLine("Child Display");
    }
}

Parent p = new Parent();
p.Display(); // Parent Display

Child c = new Child();
c.Display(); // Child Display

Parent pc = new Child();
pc.Display(); // Parent Display

////////////////////////////////////////////
Method Overring

public class Animal
{
    public virtual void Eat()
    {
        Console.WriteLine("This animal eats food.");
    }
}

public class Dog : Animal
{
    public override void Eat()
    {
        Console.WriteLine("Dog barks.");
    }
}

public class Program
{
    public static void Main()
    {
        Animal myDog = new Dog();
        myDog.Eat(); //Output : Dog barks
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Concept Practical Ans Cenario
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////Dependency Injection
////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////Conceptual
/////////////////////////////////////////What is dependency Injection and Why is it important ?
Dependency Injection(DI) is a design patter used in Software developemnt to manage dependencies 
between object and promote loose coupling.

////////////////////////////////////////////////////////////////////Explain the diffrence between Dependency Injection and Inversion of control.
Ioc is a principle that says "a class  should not control its dependencies".
//Imagine you go to a restaturent .Instead of cooking food yourself, the resturent provdes food to you .You  don't contol cooking , you only eat. 
DI ia a ways to implement IOC by injecting dependencies (via constructor , property or method) instead of creating them inside.

////////////////////////////////////////////////////////////////What are the type of Dependency Injection , And When you would each ?
1) Constructor Injection(Most common) : 
1) Most common type.
2) When the dependency is required always.

Example :
public class OrderService
{
private readonly IPaymentService _paymentService;

//Constructor Injection
public OrderService(IPaymentService paymentService)
{
_paymentService = paymentService;
}

public void Placement()
{
 _paymentService.ProcessPayment();
}
}

//Property Injection:
1) When dependency is optional.
2)Example : Logging -> a service can work without logging, but if available, it will use it.


//Method Services :
1) Used when dependency is needed only in one method.

/////////////////////////////////////////////////////What are the some challenges using dependencies Injection ?
Dependency Injection is powerful but has some challenges. It can make code harder for beginners, add some extra complexity in samll apps , 
dedugging issue like missing registrations can be tricky and there's a little performance overhead.Also , if overused , ot can lead to too many hidden dependencies .

//////////////////////////////////////////////////////////////Practicle Question
//////////////////////////////How do you implement DI in .NetCore ?
/////With Dependency Injection
public interface IPaymentService
{
 void ProcessPayment();
}

public void ProcessPayment : IPaymentService
{
Console.WriteLine("Payment process.");
}
//
public class OrderService
{
Private readonly IPaymentService _paymentService;
//Dependency Injection via Constructor.
public OrderService(IPaymentService paymentService)
{
_paymentService = paymentService ;
}
}

--> OrderService depends on the IPaymentService interfaces, not the console process payment class.
--> Easily replaced with a mock implementation during testing.


//////////////////////////////////////////What is diffrence between AddTransient , AddScoped , And AddSingleton.

//Singleton
A single instance is shared across the application life cycle.
Service instances are disposed at application shutdown.

builder.Services.AddSingleton<IService, Service>(); //Singleton Service

Example : Application-wise configuration settings , shared caches,Logger service(N LOG , Serilog)

//Scoped
A Single instance is created of the service is created per Scope(e.g , per HTTP Service in a web application).

builder.Services.AddScoped<IService, Service>(); //Scoped Service

Example : User-specific data , transaction, Database Context
//Transient
A new instance of the service is created every time , it is requested.
builder.Services.AddTransient<IService, Service>(); //Transient Service
Example : helper classes , New GUI Number
/////////////////////////////////////////////////////////////////////////////How would you handle circular dependencies in DI ?
🔄 What is Circular Dependency in DI?

It happens when two or more classes depend on each other directly or indirectly, so DI container gets stuck trying to build them.

Example:

public class ServiceA
{
    private readonly ServiceB _serviceB;
    public ServiceA(ServiceB serviceB) { _serviceB = serviceB; }
}

public class ServiceB
{
    private readonly ServiceA _serviceA;
    public ServiceB(ServiceA serviceA) { _serviceA = serviceA; }
}

Here:

ServiceA needs ServiceB

ServiceB needs ServiceA
➡️ Infinite loop 🔁



---

✅ How to Handle Circular Dependencies in DI?

1. Re-design the classes (Best Solution)

Usually, circular dependencies are a design smell 🚨.

Try to split responsibilities or introduce a third class (mediator).

Example:

Instead of ServiceA ↔ ServiceB, make ServiceC handle coordination.






---

2. Use Interfaces instead of concrete classes

Break direct dependency.


public interface IServiceA { }
public class ServiceA : IServiceA { }
public class ServiceB 
{
    private readonly IServiceA _serviceA;
    public ServiceB(IServiceA serviceA) { _serviceA = serviceA; }
}




---

3. Use Lazy Injection (Lazy<T> or Func<T>)

Load dependency only when it’s really needed, avoiding the infinite loop.


public class ServiceA
{
    private readonly Lazy<ServiceB> _serviceB;
    public ServiceA(Lazy<ServiceB> serviceB) { _serviceB = serviceB; }
}




---

4. Property Injection (rare)

Instead of constructor injection, let DI set the property later.


public class ServiceA
{
    public ServiceB ServiceB { get; set; }
}




---

🏢 Real-World Example

Database + Logging:

If Repository depends on Logger, and Logger depends on Repository for saving logs → circular dependency ❌.

Fix: Let Logger log independently, don’t make it depend on Repository.


🔄 What is Circular Dependency in DI?

It happens when two or more classes depend on each other directly or indirectly, so DI container gets stuck trying to build them.

Example:

public class ServiceA
{
    private readonly ServiceB _serviceB;
    public ServiceA(ServiceB serviceB) { _serviceB = serviceB; }
}

public class ServiceB
{
    private readonly ServiceA _serviceA;
    public ServiceB(ServiceA serviceA) { _serviceA = serviceA; }
}

Here:

ServiceA needs ServiceB

ServiceB needs ServiceA
➡️ Infinite loop 🔁



---

✅ How to Handle Circular Dependencies in DI?

1. Re-design the classes (Best Solution)

Usually, circular dependencies are a design smell 🚨.

Try to split responsibilities or introduce a third class (mediator).

Example:

Instead of ServiceA ↔ ServiceB, make ServiceC handle coordination.






---

2. Use Interfaces instead of concrete classes

Break direct dependency.


public interface IServiceA { }
public class ServiceA : IServiceA { }
public class ServiceB 
{
    private readonly IServiceA _serviceA;
    public ServiceB(IServiceA serviceA) { _serviceA = serviceA; }
}




---

3. Use Lazy Injection (Lazy<T> or Func<T>)

Load dependency only when it’s really needed, avoiding the infinite loop.


public class ServiceA
{
    private readonly Lazy<ServiceB> _serviceB;
    public ServiceA(Lazy<ServiceB> serviceB) { _serviceB = serviceB; }
}




---

4. Property Injection (rare)

Instead of constructor injection, let DI set the property later.


public class ServiceA
{
    public ServiceB ServiceB { get; set; }
}




---

🏢 Real-World Example

Database + Logging:

If Repository depends on Logger, and Logger depends on Repository for saving logs → circular dependency ❌.

Fix: Let Logger log independently, don’t make it depend on Repository.
///////////////////////////////////////////////////////////////////////////What happen if a required denpendencies is not registored in the DI Container.



What happens if a required dependency is NOT registered in the DI container?

👉 If you try to use (resolve) a dependency that is not registered in the DI container, the application will throw an error at runtime.

In .NET, this error usually looks like:

InvalidOperationException: Unable to resolve service for type 'MyApp.Services.IMyService' 
while attempting to activate 'MyApp.Controllers.HomeController'.


---

🧠 Example:

public interface IMyService
{
    string GetData();
}

public class MyService : IMyService
{
    public string GetData() => "Hello from Service!";
}

public class HomeController : ControllerBase
{
    private readonly IMyService _service;

    public HomeController(IMyService service) // dependency needed here
    {
        _service = service;
    }

    [HttpGet]
    public string Get() => _service.GetData();
}

If you forget to register it in Program.cs / Startup.cs like this:

builder.Services.AddScoped<IMyService, MyService>();

When you run the app, it crashes with an exception, because DI container doesn’t know how to create IMyService.


---

🔑 Real-World Impact

If dependency is not registered → App won’t even start properly or API request will fail immediately.

This is why proper DI registration is critical in enterprise apps.



---

✅ Interview-Smart Answer:
"If a required dependency is not registered in the DI container, .NET will throw an InvalidOperationException at runtime because it cannot resolve the service. To avoid this, we must ensure all required dependencies are properly registered in Program.cs or Startup.cs. Tools like unit tests and build-time checks can also help catch missing registrations early."


////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////Middleware
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////Conceptual Middleware Question
///////////////////////////////////////////////////////////////////////////////////What is Middleware in ASP.NetCore

Middleware is software that sits in the request-response pipeline and process HTTP request and response in an application.

///////////////////////////////////////////////////////Why is Middleware importantant ?
It provide a modular approaches to add cross-cutting  concerns like logging , authentication and error handling.

////////////////////////////////////////////////////How does Middleware differ from HttpModules in .Net framework.
Middleware is lightweight , modular and uses an explicit pipeline , unlike the eveny- driven approaches of httpModule.

/////////////////////////////////////////////////////////////////////////////////////////PracticleModule


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////Exception HANDLING
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
 Scenario-Based Questions on try-catch in C#

/////////////////////////////////////////////////////////////////////////1. What happens if an exception occurs and there is no catch block?

👉 Interviewer wants to check if you know about unhandled exceptions.
Answer: The application will crash if the exception is not handled.


---

////////////////////////////////////////////////////////////////////////2. Can we have multiple catch blocks?

👉 Scenario: You’re connecting to a database, and you want to handle SqlException differently from a general Exception.
Answer: Yes, multiple catch blocks are allowed, and they run top-to-bottom, so the most specific exception type should come first.


---

///////////////////////////////////////////////////////////////////////////////3. What if exception occurs inside catch block?

👉 Example: You log the error in a file, but logging itself throws an exception.
Answer: If another exception happens inside catch, and it’s not handled, the program will still crash. That’s why logging frameworks are often used (to minimize this risk).


---

///////////////////////////////////////////////////////////////////////////////////4. Can finally block be skipped?

👉 Scenario: You’re closing a database connection in finally. Will it always run?
Answer: finally always runs except in two cases:

If the program crashes due to Environment.FailFast() or system crash

If the process is terminated (e.g., kill command).



---

///////////////////////////////////////////////////////////////////////////////5. What happens if both catch and finally have return statements?

👉 Example:

try { return 1; }
catch { return 2; }
finally { return 3; }

Answer: The finally return will override everything. Output will be 3.


---

////////////////////////////////////////////////////////////////////////////////////////////////////////////6. Can we use try without catch?

👉 Scenario: You only want to clean up resources.
Answer: Yes, try can be used with finally only, no catch is required.


---

///////////////////////////////////////////////////////////////////////////////////////////////////////////////7. What’s the difference between throw ex; and throw;?

👉 Scenario: You caught an exception, logged it, and want to re-throw.
Answer:

With throw ex;
The stack trace shows the exception originating in MethodA (re-throw line).
With throw;
The stack trace shows the exception originating in MethodB (actual divide by zero line).

///////Example throw ex
using System;

class Program
{
    static void Main()
    {
        try
        {
            MethodA();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Caught in Main:");
            Console.WriteLine(ex);
        }
    }

    static void MethodA()
    {
        try
        {
            MethodB();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Logging in MethodA: " + ex.Message);

            // Try switching between "throw ex;" and "throw;"
            throw ex; // or just throw;
        }
    }

    static void MethodB()
    {
        int x = 0;
        int y = 5 / x; // Exception originates here
    }
}

////////Example throw
using System;

class Program
{
    static void Main()
    {
        try
        {
            MethodA();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Caught in Main:");
            Console.WriteLine(ex);
        }
    }

    static void MethodA()
    {
        try
        {
            MethodB();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Logging in MethodA: " + ex.Message);

            // Try switching between "throw ex;" and "throw;"
            throw ex; // or just throw;
        }
    }

    static void MethodB()
    {
        int x = 0;
        int y = 5 / x; // Exception originates here
    }
}

---

8. Nested try-catch blocks: which one handles exception?

👉 Scenario: You have a try-catch inside another try-catch.
Answer: The nearest catch block that matches the exception type will handle it.


---

9. Can a finally block throw an exception? What happens then?

👉 Scenario: You’re closing a file in finally and that itself throws.
Answer: Yes, it can throw, and if it does, the new exception hides the original one. This can make debugging harder.

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////CLASS And OBJECT
///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////Basic Question
//What is the diffrence between a class and an Object ?
class :-> Blueprint , doesn't occupy memory.
Object :-> Instance of a class. Occupies memory and represent real-world entity.

//////////////////////////////////////////////////////////Can you create an object without a class ?
No, in oops  object are instance f classes . you need a class to create an object.

///////////////////////////////////////////////////////////Can you have multiple Onject





////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////How you can add two coloum in table by Entityframework
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
In Entity Framework Core, you can add columns to an existing table by creating a migration and applying it to the database. Here’s how you can add two new columns to an existing table using Entity Framework in .NET Core.

Step-by-Step Guide:
1. Modify the Model
Assume you have an existing model Employee in your project, and you want to add two new columns MiddleName and DateOfJoining.

Original Model:

csharp
Copy code
public class Employee
{
    public int EmployeeId { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
}
Modify the model to include the new columns:

csharp
Copy code
public class Employee
{
    public int EmployeeId { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    
    // New columns
    public string MiddleName { get; set; }  // New column
    public DateTime DateOfJoining { get; set; }  // New column
}
2. Create a Migration
After modifying the model, you need to create a migration so that Entity Framework can update the database schema to match the model changes.

Run the following command in the Package Manager Console or Terminal:

bash
Copy code
dotnet ef migrations add AddMiddleNameAndDateOfJoiningToEmployee
This will create a new migration file with the necessary code to add the columns to the Employee table.

3. Inspect the Migration File
The migration file will be generated in the Migrations folder. It should look something like this:

csharp
Copy code
public partial class AddMiddleNameAndDateOfJoiningToEmployee : Migration
{
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.AddColumn<string>(
            name: "MiddleName",
            table: "Employees",
            type: "nvarchar(max)",
            nullable: true);

        migrationBuilder.AddColumn<DateTime>(
            name: "DateOfJoining",
            table: "Employees",
            type: "datetime2",
            nullable: false,
            defaultValue: new DateTime(2024, 1, 1));  // Provide a default value for non-nullable column
    }

    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropColumn(
            name: "MiddleName",
            table: "Employees");

        migrationBuilder.DropColumn(
            name: "DateOfJoining",
            table: "Employees");
    }
}
The Up method adds the new columns to the table, while the Down method removes them if the migration is rolled back.

4. Apply the Migration
To apply the migration and update the database schema, run the following command:

bash
Copy code
dotnet ef database update
This will apply the migration, and the Employees table will now have the MiddleName and DateOfJoining columns added.

Conclusion
By following these steps, you can easily add new columns to an existing table using Entity Framework Core in .NET Core. The process involves modifying the model, creating a migration, and applying the migration to update the database schema.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////Interview Question Experience
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
to///////////////////////////////////////////////////OOPs

/////////////////////////////////////////Inheritance
//namespace Pro
//{ 

//class Employee
//{
//    int a = 10;
//    public  void CalculateSalary()
//    {
//        Console.WriteLine("CalculateSalary");
//    }
//}

//class Department : Employee
//{
//    int b = 20;
//    public  void Depart()
//    {
//        Console.WriteLine("This  is DepartMent");
//    }
//}

//class Program
//{
//    public static void Main()
//    {
//        Department Dm = new Department();

//           Dm.CalculateSalary(); // CalculateSalary method is not present Department class but we can call the CalculateSalary() by refrences of Department class.

//    }
// }
//}

///////////////////PolyMorphism
///Overloading (compile time check)
//class Employee
//{
//    public void ClaculateSalary(int a, int b)
//    {
//        Console.WriteLine(a * b);
//    }
//    public void ClaculateSalary(int a, int b, int c) // changing the number of parameter
//    {
//        Console.WriteLine(a * b * c);
//    }
//    public void ClaculateSalary(long a, int b, int c)
//    {
//        Console.WriteLine(a * b * c);
//    }

//}

//class Program
//{
// public static void Main(string[] args)
//   {
//        Employee Em = new Employee();

//        Em.ClaculateSalary(3, 4);
//        Em.ClaculateSalary(3, 4 , 5);
//        Em.ClaculateSalary(300000000000, 4, 5);

//    }
//}

//Overrding
//Overriding in c# allows a subclass(derived class) to provide a specific implementation of a method that is already defind in its base class.
//It is achieved using the virtual keyword in the base class and the override keyword in the derived class.

////Example:
//using System ;

//public class Animal
//{
//   public virtual void MakeSound()
//    {
//        Console.WriteLine("Animal makes the sound");
//    }
//}

//public class Dog : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Dog barks");
//    }
//}

//public class Cat : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Cat meows");
//    }
//}

//public class Program
//{
//    public static void Main(string[] args)
//    {
//        Animal myDog = new Dog();
//        Animal myCat = new Cat();
//        // Polymorphic behavior - the method called is determined at runtime
//        myDog.MakeSound(); //Dog bargs  // Method selection is based on object type not refrence type.
//        myCat.MakeSound(); //Cat meows  // Even when refrence as Animal , the overriden method in Dog or cat is called.
//        // when overriden is not used the base class method is called.
//    }
//}

///////////////////////////////////////////////////////Abstraction
//It is the process of hinding implementation details and showing only the essential features of an object .
// In C# , abstraction is achived using Abstarct Classes and Interfaces.

//1> Abstract Class
//    -> An abstract class is declared with the abstract keyword.
//    -> It cannot be instantiated directly.
//    -> It can contain abstract methods (no implementation) and concrete methods (with Implementation).
//    -> Abstract methods must be overriden in derived classes.
//    

//Interfaces
//An interfaces is a constract that define the signatures of methods , properties , events , or indexers.
//It only contains method declarations, not  implementations.
// Classes that implement the interface must provide implementations for all its methods.

//using System;
//public abstract class Vehicle
//{
//    public abstract void StartEngine();// only the declaration is provided; the implementation 

//    public void DisplayInfo()
//    {
//        Console.WriteLine("This is a vehicle");
//    }
//}

//public class Car : Vehicle
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Car engion started");
//    }
//}

//public interface IRefuelable
//{
//    void Refuel();
//}

//public class Bike : Vehicle , IRefuelable
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Bikes engion started");
//    }

//    public void Refuel()
//    {
//        Console.WriteLine("Bike refueled.");
//    }
//}

//public class Program
//{
//   public static void Main(string[] args)
//    {
//        Vehicle car = new Car();
//        car.StartEngine(); // Car engine started.
//        car.DisplayInfo(); // This is a vehicle.

//        Bike bike = new Bike();
//        bike.StartEngine();  //Bike engion started.
//        bike.Refuel();       //Bike refueled
//    }
//}

//    ///////////////////////////////Encapsulation
//    //
// class Employee
//{
//    private int experience; //This feild can not be excess without Property.
//    public int Experience
//    {
//        get
//        {
//            return experience;
//        }
//        set
//        {
//            experience = value;
//        }
//    }
//}

//class Program
//{
//    public static void Main(string[] args)
//    {
//        Employee em = new Employee();
//        em.Experience = 10;
//    }

//}

//////////////////////////Reflection
/////////what is reflection in c#
reflection in C# is a way for your program to look at itself. It lets you inspect the structure of types (like classes, methods, properties) at runtime
//////////Why we use reflection in c#
We use reflection in C# to dynamically inspect, invoke, and manipulate assemblies, types, methods, and properties at runtime, allowing for more flexible and adaptable code, such as for creating plug-in architectures, dynamic object creation, 
or accessing metadata and invoking methods without knowing the specifics at compile-time.

/////////////////////////////////////////codeforce,Dataforce
////////////////////////which kind of Jwt that you are using.
Explain in JWT.
//////////////////////////////////////////why c# doesnot uses multiple inheritance
/////////////1>Avoiding the Diamond Problem
    Class A
   /      \
Class B   Class C
   \      /
    Class D

The diamond problem occurs when a class inherits from two classes that both inherit from a common base class.
This can cause ambiguity in determining which version of a method or property should be inherited from the base class.
In this scenario, if Class B and Class C both inherit a method from Class A, then Class D could inherit two conflicting versions of that method. C# avoids this ambiguity by allowing only single inheritance,
ensuring that each class has a clear and singular parent class.
2>Simplicity and Maintainability
////////////////////////////////////////////what is DBcontext and DBset.
DBcontest - An instance of DbContext is responsible to hold a set of DbSets' and represent a connection with database.
DBset - Represents a single database table; each column is represented as a model property.
/////////////////////////////////////what is dataset and dataadaptet
DataSet class - A DataSet is basically a container which gets the data from one or more then one tables from the database.
It follows disconnected architecture.

dataadaptet - A DataAdapter bridges the gap between the disconnected DataSet/ DataTable objects and the physical database. 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////What is filter and types.
Definition (In very simple words):

> ASP.NET MVC Filter is a custom class where you can write custom logic to excute before an after an action method executes.


Think of them like security guards or quality checkers standing at different doors of your MVC pipeline.


---

⚙️ Why we use Filters:

✅ To perform common logic across multiple controllers/actions (without repeating code).
✅ To apply cross-cutting concerns such as:

Authentication & Authorization

Logging

Exception handling

Caching

Validation



---

🧩 Types of Filters in ASP.NET Core

Filter Type When It Runs Common Use Example

1️⃣ Authorization Filter Before anything else (first checkpoint) Checks if user is authorized [Authorize]
2️⃣ Resource Filter Before & after model binding Handle caching, performance optimization Custom caching filter
3️⃣ Action Filter Before & after controller action executes Logging, validation, modify input/output [ActionFilter]
4️⃣ Exception Filter When an exception occurs Handle exceptions globally [CustomExceptionFilter]
5️⃣ Result Filter Before & after result (like View or JSON) executes Modify or format result [ResultFilter]



---

💻 Example (Custom Action Filter)

using Microsoft.AspNetCore.Mvc.Filters;
using System.Diagnostics;

public class LogActionFilter : ActionFilterAttribute
{
    private Stopwatch stopwatch;

    public override void OnActionExecuting(ActionExecutingContext context)
    {
        stopwatch = Stopwatch.StartNew();
        Console.WriteLine($"Action {context.ActionDescriptor.DisplayName} started at {DateTime.Now}");
    }

    public override void OnActionExecuted(ActionExecutedContext context)
    {
        stopwatch.Stop();
        Console.WriteLine($"Action {context.ActionDescriptor.DisplayName} finished in {stopwatch.ElapsedMilliseconds} ms");
    }
}

Usage:

[LogActionFilter]
public class PropertyController : ControllerBase
{
    [HttpGet("get-properties")]
    public IActionResult GetProperties()
    {
        return Ok(new { message = "Property list fetched successfully!" });
    }
}


---

🏠 Project Example (Buy & Sell Properties App):

Scenario:
In your property application, you need to log each API call made by users to track performance and detect issues.

✅ You can use an Action Filter to log every request.
✅ You can use an Exception Filter to log and return friendly messages when something crashes.
✅ You can use a Result Filter to format all responses in a standard JSON format.


---

⚖️ Trade-Off:

✅ Pros: Clean, reusable, centralized logic (no code duplication).

⚠️ Cons: Too many filters can make debugging hard — because code runs before/after controller automatically.



---

💼 Business Impact:

Using filters helps your project:

Improve security (Authorization filters)

Improve user experience (Exception filters for friendly errors)

Improve maintainability (Centralized logic)

Improve performance tracking (Action filters)
///////////////////////////////////What is Inheritance and Type of Inheritance
The following are some key points about inheritance:

C# does not support multiple inheritances of classes, the same thing can be done using interfaces.
Private members are not accessed in a derived class when one class is derived from another.

//////////////////////////////////////////////What are the differences between method hiding and overriding in C#?
////////////method hiding
the implementation to call is based on the compile-time type
New is reference-type specific
///////////////overriding
the implementation to be called is based on the run-time
, overriding is object-type specific

//////////////////////////////////////////////////////////////What is Boxing and UnBoxing.
value type - int, char, double, and bool are built-in value types in C#.
refrence type - string and object are built-in reference types in C#.

//////////////////////Difference between ArrayList and Hashtable in C#
//////ArrayList
The arraylist is useful to store the collection of elements of different types.
The arraylist elements can be accessed either by using loops or index values.
The performance of the arraylist is less because it will iterate through the collection of items.
In arraylist you are allowed to add duplicate values.
////////HashTable
The hashtable is useful to store the collection of key/value pairs of different types.
The hashtable elements can be accessed by using a key or DictionaryEntry object.
The hashtable uses a hash function to find the elements with a key so it will return the data faster.
In hashtable, the value can be duplicated but the key shouldn't be duplicated.

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////Deloide
1>Middleware

/////////////////////////Hyland Interview Question
///////coding interview
Arrays and string and linkedlist(stack and ques only linear).
Serching and Sorting
/////////c#
Basic
OOp
Inheritance
/////////Solid Priciple:
/////////////////////////////////////////sigalton
we do not use Singalton code Manually , we use built-in Dependency Injection framework BECAUSE Thread-Safety , Simplicity ,Lifetime Management.
All 5 also 
////////////////Sql
sql querying

///////////////////////Simens Technology
Q>Artichecture of Project : https://www.youtube.com/watch?v=X7CGyBZrEh8
Q>Framework that is using in  EntityFramework
//////////////////Q>How you can add two coloum in table by Entityframework.
I have created new file one you can see
Q>What is function.
A function in C# is a group of statements that perform a specific task and return a value
Q>what are the various ways to communicate between the components.
1>@Input @Output
2>Ng - content
3>@ViewChild   @ViewChildren
4>@ContentChild @ContentChilren
///////////////////////////////
Authentiation,authorisation
How can I consume Api
////////////////Swagger(starting point of swagger)
https://validator.swagger.io/

//Interview Mistake
Be Prepared for Team Or zoom.
Plan to revisition once all the question(mindset).

////////////
N - tier Artitecture
Repository Pattern
OOps 
Solid Pattern

///////////////////////////////Gagan
Q> What is Threading in C# ?

Multithreading in C# is a process in which multiple threads work simultaneously. 
It is a process to achieve multitasking. It saves time because multiple tasks are being executed at a time.
To create multithreaded application in C#, we need to use System.Threding namespace.

Q> What is diffence between PUT And Patch 


User
What is the diffence between Put And Patch 
ChatGPT
PUT and PATCH are two HTTP methods used in RESTful API design, and they serve different purposes.

PUT:

The PUT method is used to update or create a resource at a specific URI (Uniform Resource Identifier).
When a client sends a PUT request, it typically includes the full representation of the resource in the request body.
If the resource exists at the specified URI, the PUT request will update it with the new representation provided in the request body.
If the resource does not exist, a new resource will be created at the specified URI with the provided representation.
Example:

http
Copy code
PUT /users/123
Content-Type: application/json

{
  "name": "John Doe",
  "age": 30
}
In this example, the resource representing user with ID 123 is either updated with the new data or created if it doesn't exist.

PATCH:

The PATCH method is used to apply partial modifications to a resource.
When a client sends a PATCH request, it includes only the changes to the resource, not the full representation.
PATCH is useful when you want to update specific fields of a resource without sending the entire representation.
Example:

http
Copy code
PATCH /users/123
Content-Type: application/json

{
  "age": 31
}
In this example, the resource representing user with ID 123 is updated by changing the value of the "age" field to 31. Other fields, if they exist, are not affected unless explicitly specified.

In summary, PUT is used for updating or creating a resource with a full representation, while PATCH is used for applying partial modifications to a resource. The choice between them depends on the specific requirements of the API and the desired behavior for updating resources.

User
can you explain this once again
ChatGPT
Certainly! Let's break down the differences between PUT and PATCH in a simpler way:

PUT:

Purpose: Updating or creating a resource at a specific location (URI).

Request Body: The client sends the complete representation of the resource in the request body.

Effect: If the resource exists at the specified URI, it's updated with the full data provided in the request body. If it doesn't exist, a new resource is created.

Example:

http
Copy code
PUT /users/123
Content-Type: application/json

{
  "name": "John Doe",
  "age": 30
}
This updates or creates a user with ID 123, setting their name to "John Doe" and age to 30.

PATCH:

Purpose: Applying partial modifications to a resource.

Request Body: The client sends only the changes to the resource, not the complete representation.

Effect: The resource is updated with the specific changes provided in the request body. Other fields are unaffected unless explicitly mentioned.

Example:

http
Copy code
PATCH /users/123
Content-Type: application/json

{
  "age": 31
}
This updates the user with ID 123, changing only the age to 31. Other fields remain unchanged unless included in the request.

In short, PUT is for complete updates or creation with full data, while PATCH is for partial updates where only specific changes are applied to the resource.
The choice between them depends on whether you want to send the entire data or just the changes when modifying a resource.

////////////////////////
/////////////////////////////////////////////////////////cts in sql
//What is Cts
A Common Table Expression,is a TEMPORARY named result set, that you can reference within a Select, INSERT,UPDATE,DELETE statement.

Example : Book.
//Why I using cts :
Code Reusability
Readability:
Query Optimization:
//When to CTS
Recursive Queries
Complex Queries

////////////////////////////////////////////////////////temp table in sql
////What is temp
Temporary tables provide temporary data storage in exact form of original tables for quick access of data.
Two type of Temporary table
1>Local Temporary Tables
2>Global Temporary Tables

//where stored
Temporary tables are stored inside the Temporary Folder of TempDB.

//A Temporary table differs in the following two ways from regular tables:
Each temporary table is implicitly dropped by the system.
Each temporary table is stored in the tempdb system database. The table variable doesn't.

//where to use
Complex Data Manipulation
Temporary Storage in Stored Procedures
////////////////////////////////////////////////////////////middleware
////What is middlewa
Middleware is a piece of code in an application pipeline used to handle requests and responses.
/////Why is Middleware ordering important ?
Middleware components are executed in the order they are added to the pipeline, and care should be taken to add the middleware in the right order; 
otherwise, the application may not function as expected. This ordering is critical for security, performance, and functionality.
///app.Run() Method
this acts as a terminal middleware and is added at the end of the request pipeline, as it cannot call the next middleware.
/////app.Use() Method
We can include the next parameter into it, which calls the next request delegate in the pipeline.
///app.Map() Method
The map branches the request pipeline based on matches of the given request path.

///////////////////////////////////////////////////////////////////////Routing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
How is routing handled in ASP.NET Core ?

Routing,(Defination, Project use ,Trade-off + Business Impact ) with so easy word for human being.





Let’s break Routing into very easy words with Definition, Project Use, Trade-off, and Business Impact 👇





---



Definition (Simple Words)



Routing is like a GPS for your application.



It decides where a request should go when a user clicks something or types a URL.



In Backend (.NET) → Routing decides which controller and action method should handle a request.



In Frontend (Angular) → Routing decides which component/page to show to the user.







---



Project Use (Buy & Sell Properties App)



In your Buy & Sell Properties Application:



If a user goes to /properties, routing shows the Property Listing Page.



If a user clicks on a property → /properties/101, routing opens the Property Details Page.



If a user goes to /admin/dashboard, routing shows the Admin Dashboard.





👉 Without routing, everything would load on one page, and users wouldn’t know where they are.





---



Trade-offs (Pros & Cons)



✅ Pros:



Makes app organized (clear paths for each feature).



Better user experience (like moving between pages on a website).



Easy to maintain → if you add a new page, just add a new route.





⚠️ Cons:



More routes → more complexity in big applications.



Wrongly configured routes → users may land on wrong or broken pages.



Extra work to handle security (e.g., blocking normal users from /admin).







---



Business Impact (Simple Words)
Good Routing → Users can easily search, view, and buy properties.
Bad Routing → Users get frustrated (e.g., clicking on “Property Details” but landing on “Login Page”), and may leave your app.
Routing also helps in SEO (Search Engine Optimization) → clear URLs like /buy-property/delhi improve chances of your app showing up in Google search.
---
✅ In short:

Routing = traffic police of your app → decides where each user should go.

In your property app → it makes navigation smooth, professional, and user-friendly, which directly increases trust and sales.

//What is routing
its a process of matching incoming http requests to a corresponding endpoint where it will execute functions or necessary middlewares.

//Type of Routing
In ASP.NET Core, routing determines how HTTP requests are mapped to controller actions. There are two main types of routing:

1. Conventional Routing (centralized in Program.cs)


2. Attribute Routing (defined directly in controllers)




---

1️⃣ Conventional Routing

👉 Defined centrally in Program.cs, applied to all controllers.
👉 Uses URL patterns to match requests to actions.
👉 Recommended for large applications with a standard URL structure.

Example

✅ Program.cs (Defining Conventional Routes)

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

// Define a default route
app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}"); // Default route
});

app.Run();

✅ Controller with Conventional Routing

public class ProductsController : Controller
{
    public IActionResult Details(int id)
    {
        return Content($"Product Details for ID: {id}");
    }
}

✅ URL Example

GET /Products/Details/5

The request will match {controller=Products}/{action=Details}/{id=5}.



---

2️⃣ Attribute Routing

👉 Defined directly on controllers or actions using [Route] attributes.
👉 Provides more control and flexibility for complex routes.
👉 Useful when URLs don’t follow a standard structure.

Example

✅ Controller with Attribute Routing

[Route("api/products")] // Base route for this controller
public class ProductsController : Controller
{
    [HttpGet("details/{id}")] // Custom route for this action
    public IActionResult GetProductDetails(int id)
    {
        return Content($"Product Details for ID: {id}");
    }

    [HttpGet("category/{categoryName}")] // Another custom route
    public IActionResult GetProductsByCategory(string categoryName)
    {
        return Content($"Products in category: {categoryName}");
    }
}

✅ URL Examples

GET /api/products/details/5
GET /api/products/category/electronics

These routes do not depend on a global routing pattern.



---

Key Differences


---

When to Use Which?

Use Conventional Routing when you have a standard structure for URLs.

Use Attribute Routing for RESTful APIs or when URLs need flexibility.
///////////////////////////////////////////////////////////////////direct and indirect in Ado.net
It can be direct or indirect. In other words "connected" or "disconnected".
//////////////////////////////cluster and non cluster in sql
Adapter
directive 
pipe
where is root component is available 
Lasy Loading in Angular
Observable and observer 


///////////////////////////////////////////////////////////////////////////////////////Interview Question From Google
What is Partial class in C#?

Once we create a class we can not create a second one with the same name, unless they are in different namespaces. So, Microsoft decided to change this, with the introduction of something called partial classes.

This means that by using the partial classes we can create 2 classes with the same name within the same namespace.

With Partial Classes multiple developers can work simultaneously with a single class in separate files

Q> What is Model Binding ?
The Model binding will take the data as input it will find the exact name of properties that using in asp.netcore and it will bind the data
The process of binding the HTTP Request data to the parameters of application Controllers or Properties is know as Model Binding.
There are lots of built-in methods and atttributes for model binder.

//////////////////////////////////////////////
1>DeadLock
2>Why Donet Project are used.
3>repository
4>logging
5>ddl and dml
6>window functions
7> Explain how logging works in Asp.Net Core?
Logging is a way of recording what happens in your application, such as errors, warnings, or information. Logging can help you debug and troubleshoot problems, as well as monitor the performance and behavior of your application.

In ASP.NET Core, logging is done by using an ILogger<TCategoryName> object, where TCategoryName is the name of the class or component that is logging. You can get an ILogger<TCategoryName> object from dependency injection (DI), which is a technique for creating and managing objects in your application.

To log something, you call one of the methods of the ILogger<TCategoryName> object, such as LogInformation, LogWarning, or LogError. These methods take a message and optionally some parameters, and write them to one or more logging providers. Logging providers are components that store or display the logs, such as the console, a file, or a database.

You can configure logging by using the Logging section of the appsettings.json file, or by using code in the Program.cs file. You can specify which logging providers to use, what level of logging to use for each provider, and what categories of logs to include or exclude.

For more information on logging in ASP.NET Core, you can check out these resources:

/////////////////////////////////////////////////8>What is diffrence between layer artitecture and 3 tire artitecture , what is advantages.Which one is using in your project.

N-Tier Architecture vs. 3-Tier Architecture
N-Tier Architecture:

Definition: An N-tier architecture divides an application into logical layers, where "N" can be any number. Typically, these layers include the presentation layer, business logic layer, data access layer, and sometimes more specific layers depending on the complexity of the application.
Scalability: Highly scalable as different layers can be distributed across multiple servers.
Flexibility: Allows for adding or modifying layers without affecting others.
Maintenance: Easier to manage changes in complex systems since each layer can be updated independently.
3-Tier Architecture:

Definition: A specific type of N-tier architecture with exactly three layers: presentation, business logic, and data access.
Presentation Layer: User interface (UI) components.
Business Logic Layer: Core functionality and business rules.
Data Access Layer: Communication with the database.
Simplicity: Simpler compared to N-tier since it has a fixed number of layers.
Common Use Case: Suitable for many enterprise applications due to its balanced approach to complexity and manageability.
Advantages and Disadvantages
Advantages of N-Tier Architecture:

Scalability: Can handle increased load by distributing different layers across multiple servers.
Maintainability: Easier to update or replace individual layers without impacting the entire system.
Flexibility: Allows for a high degree of customization and the ability to add more layers if needed.
Security: Improved security as different layers can be isolated and secured independently.
Disadvantages of N-Tier Architecture:

Complexity: Can become very complex, making it harder to understand and manage.
Performance: More layers can introduce latency, as each layer adds an additional processing step.
Development Time: Increased complexity can lead to longer development times.
Advantages of 3-Tier Architecture:

Simplicity: Easier to design, develop, and manage due to its straightforward structure.
Separation of Concerns: Clear separation between UI, business logic, and data access makes the application more modular.
Scalability: Adequately scalable for many applications, though not as much as N-tier.
Maintenance: Relatively easy to maintain and update.
Disadvantages of 3-Tier Architecture:

Limited Scalability: May not scale as well as N-tier for very large or complex applications.
Flexibility: Less flexible in terms of adding new layers or components.


/////////////////////////////////////////////////////////////////9>Singalton design patter.
//////////////////What  is Singalton design patter.
The Singleton design pattern ensures that a class has only one instance and provides a global point of access to that instance.
/////////////////////Why Singalton design patter
1>Ensure Single Instance
2>Global Access
3>Resource Sharing
////////////////////////When to Use the Singleton Design Pattern
1>There must be exactly one instance of a class, and it must be accessible globally.
/////////////Why Even Use the Singleton Design Pattern
1>Managing database connections: A Singleton class can be used to manage database connections, ensuring that only one connection
is created and shared across multiple parts of the application.
2>Logging: A Singleton logger class can be used to centralize logging functionality, allowing different components of the system to log 
messages to the same log file or stream.
3>Configuration settings: A Singleton configuration manager class can be used to load and cache application configuration settings, 
ensuring that the settings are loaded once and accessed globally throughout the application.


//why we are creating singlaton design pattern,instead of object.
The Singleton design pattern is used to ensure that a class has only one instance and provides a global point of access to that instance. There are several reasons why you might choose to use the Singleton pattern instead of creating multiple instances of a class:

Global Access Point:

A Singleton provides a centralized point of access to its instance. This is useful when exactly one object is needed to coordinate actions across the system.
Resource Sharing:

If multiple instances of a class would share and modify the same resource, a Singleton pattern ensures that all modifications are done through the same instance, preventing conflicts and ensuring consistency.
Resource Management:

In some cases, creating multiple instances of a class might be resource-intensive or inefficient. Using a Singleton ensures that there is only one instance, saving resources.
Configuration Management:

Singletons are often used for managing configuration settings or global application state. Having a single instance makes it easy to maintain and manage these settings.
Lazy Initialization:

With a Singleton, you can implement lazy initialization, meaning the instance is created only when it is first requested. This can be beneficial for performance, especially if the initialization process is resource-intensive.
Prevention of Multiple Instances:

Some classes are designed to have only one instance due to their nature or purpose. The Singleton pattern enforces this constraint and ensures that there is only one instance of the class.
Managing Shared Resources:

In scenarios where multiple parts of the application need to share the same resource, a Singleton provides a way to centralize access and modifications to that resource.
Maintaining State:

Singletons are often used to maintain a consistent state across the application. Any changes made to the state are reflected in a single instance.
However, it's important to note that the Singleton pattern also has its drawbacks, such as potential for global state, difficulty in testing, and limited flexibility in certain scenarios. Therefore, it's essential to carefully consider whether the Singleton pattern is appropriate for a particular use case.
10>Diffrence between Scoped and transient.
In ASP.NET Core, services (like classes or components that provide certain functionality) can be registered with different lifetimes, and two common lifetimes are "Scoped" and "Transient." Let's break down the difference between them in simpler terms:

Transient:
What it means:

A service with a transient lifetime is created every time it is requested or injected.
It is short-lived and a new instance is provided whenever someone needs it.
Example:

Think of it like ordering a cup of coffee. Each time you ask for coffee, you get a new cup. The cups are not shared; they are independent.
Scoped:
What it means:

A service with a scoped lifetime is created once per request.
It lives throughout the duration of a single HTTP request. If something requests the service multiple times during the same request, it gets the same instance.
Example:

Imagine you are at a restaurant, and the waiter gives you a menu when you sit down. Throughout your meal, you use the same menu. The menu is specific to your "scope" (your table and your dining experience).
Summary:
Transient:

Created every time requested.
Short-lived, not shared.
New instance for each request.
Scoped:

Created once per request.
Lives throughout a single request.
Shared within the same request scope.
In practical terms, if a service doesn't need to maintain state or share information across different parts of the application, and it's okay to create a new instance each time it's requested, then you might use a transient lifetime.

If a service needs to maintain state or share information within the same request (for example, across different components processing the same HTTP request), you might use a scoped lifetime.
11>Two Method name is used in Startup.cs file.
In a typical ASP.NET Core application, the Startup.cs file is used to configure various aspects of your web application, such as setting up services and defining how the application should respond to HTTP requests. In the Startup.cs file, there are two important methods: ConfigureServices and Configure.

ConfigureServices:
What it does:

This method is responsible for configuring the services that your application will use.
Services can be things like database connections, authentication mechanisms, or other components that your application needs to function.
Why it's important:

It's where you "register" or "configure" the services that your application will use.
This method is called by the framework during application startup.
Example:

If your application needs to connect to a database, you might configure a database service here.
Configure:
What it does:

This method is responsible for setting up how your application responds to HTTP requests.
It defines the middleware pipeline, which are components that process requests and responses as they flow through the application.
Why it's important:

It's where you define how the application handles requests, what kind of responses it sends, and what processing happens in between.
Example:

You might use this method to set up authentication, define routes, or add other middleware components.
Summary:
ConfigureServices:

Configures services that your application will use.
Called at application startup.
Configure:

Configures how your application responds to HTTP requests.
Defines the middleware pipeline.
Also called at application startup.
In simpler terms, ConfigureServices is where you say, "Hey, application, these are the services we're going to need," and Configure is where you say, "Alright, application, this is how we're going to handle requests and responses." Both methods play a crucial role in setting up and configuring your ASP.NET Core application.



//////////////////////////////////////////////////////////////////////////////////////////12>How does you right Authentication in Program.cs file
/////////////////////////////////////////////////////////////////////////13>How does partial class compiles if same name with two class .
What it is:

A partial class in C# is a way to split the definition of a class into multiple files.
Why it's useful:

It allows developers to organize and manage large classes by dividing them into smaller, more manageable parts.
How it works:

When you define a class as partial (partial class MyClass), you can spread the class definition across multiple files.
Each file contains a part of the class. All parts together make up the complete class.
During compilation, the C# compiler combines all the parts into a single class.
Example:
csharp
Copy code
// File1.cs
partial class MyClass
{
    public void Method1()
    {
        // Code for Method1
    }
}

// File2.cs
partial class MyClass
{
    public void Method2()
    {
        // Code for Method2
    }
}

// Main.cs
class Program
{
    static void Main()
    {
        MyClass myObject = new MyClass();
        myObject.Method1();
        myObject.Method2();
    }
}
In this example, MyClass is split into two files (File1.cs and File2.cs). Each file has a part of the class. When the program is compiled, the compiler combines both parts into a single MyClass definition.

Benefits:
Organization:

Helps keep large classes organized by spreading their code across multiple files.
Separation of Concerns:

Each file can focus on a specific aspect or functionality of the class.
Collaboration:

Useful in scenarios where different developers work on different parts of the same class.
Summary:
Partial classes in C# allow you to split the definition of a class into multiple files for better organization and management.
During compilation, the parts of the class from different files are combined to create the complete class.

////////////////////////////////////////////////////////////////////////////////////////////////13>What is global exceptional handling.

Sure, let's break down the concept of global exception handling in simple terms:

Global Exception Handling:
What it is:

Global exception handling is a way to deal with unexpected errors or issues that may occur in your entire application.
Why it's useful:

It provides a centralized mechanism to handle errors, making it easier to manage and log unexpected situations.
How it works:

When an error occurs anywhere in your application (during the execution of code), the global exception handling mechanism captures it before it crashes the program.
Instead of letting the error propagate and potentially cause the application to stop, you can define a set of actions to take when an error occurs.
Example:
csharp
Copy code
class Program
{
    static void Main()
    {
        try
        {
            // Code that might throw an exception
            int result = Divide(10, 0);
            Console.WriteLine("Result: " + result);
        }
        catch (Exception ex)
        {
            // Global exception handling
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    static int Divide(int a, int b)
    {
        // Division operation that might throw an exception
        return a / b;
    }
}
In this example, the Divide method attempts to perform a division operation, which could lead to an exception if b is zero. The try-catch block in the Main method captures any exception that occurs during the execution of the code.

Benefits:
Centralized Handling:

All exceptions can be handled in one central place in your application.
Prevent Crashes:

Helps prevent the entire application from crashing due to unhandled exceptions.
Logging and Reporting:

Allows you to log error details, report issues, or take other actions when an unexpected situation occurs.
Summary:
Global exception handling is like having a safety net for your application. It catches unexpected errors, preventing them from causing the entire application to crash. This mechanism provides a way to gracefully handle errors, log relevant information, and potentially recover from certain issues.

/////////////////////////////////////////////////////////////////////////////////////////13>Excecution of catch block.

In most programming languages, including C# (which is commonly used in ASP.NET Core), the catch blocks are evaluated in the order in which they appear. The first catch block that matches the type of the thrown exception is executed, and subsequent catch blocks are ignored.

Here is an example in C#:

csharp
Copy code
try
{
    // Code that might throw an exception
    int result = Divide(10, 0);
    Console.WriteLine("Result: " + result);
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Caught DivideByZeroException: " + ex.Message);
}
catch (ArithmeticException ex)
{
    Console.WriteLine("Caught ArithmeticException: " + ex.Message);
}
catch (Exception ex)
{
    Console.WriteLine("Caught general Exception: " + ex.Message);
}
In this example, if the Divide method throws a DivideByZeroException, the first catch block will be executed, and the subsequent catch blocks will be skipped.

It's important to order your catch blocks from the most specific exception type to the more general ones. If you have a catch block for a more general exception type before a more specific one, the more general block will catch the exception, and subsequent blocks will be ignored.

csharp
Copy code
try
{
    // Code that might throw an exception
    int result = Divide(10, 0);
    Console.WriteLine("Result: " + result);
}
catch (Exception ex)
{
    Console.WriteLine("Caught general Exception: " + ex.Message);
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Caught DivideByZeroException: " + ex.Message);  // This block will never be reached
}
In this case, the catch block for Exception will catch the exception, and the more specific DivideByZeroException block will be ignored. Therefore, it's crucial to order catch blocks appropriately based on the exception hierarchy.

///////////////////////////////////////////////////////////////////////13>What is use of cts.


13>What is datatime table, where does it store.
/////////////////////////////////////////////////////////////////////15>Write the basic syntax of store procedure.
CREATE PROCEDURE procedure_name
    @parameter1 datatype,
    @parameter2 datatype,
    ...
AS
    -- SQL statements to define the stored procedure logic
    -- This can include SELECT, INSERT, UPDATE, DELETE, and more

GO

///////////////////////////////////////////////////16>excution flow of sql.
FROM>WHERE>GROUP BY >HAVING > SELECT > ORDER BY > LIMIT.

///////////////////////////////////////////////////////14>What is interceptor.
An interceptor is a service that can modify or handle the HTTP requests and responses that are sent or received by your Angular application.
//////////////////////////////15>Cogfiguration.Json file.
1>Configures TypeScript Compilation: 
It defines various options that affect how the TypeScript code is compiled, such as the target JavaScript version, module system, source maps, and more.
2>Defines File Inclusion/Exclusion:It specifies which files to include or exclude during the compilation process. This ensures that only the necessary files are processed by the compiler.



16>What is last life cycle in Angular.
17>Where does we configure any thing.
/////////////////
Graph
DP
Pririty Ques
Array 
HashMap
String
////////////////////////////
//////////////////////////////////////////////////////////////////////////Associate in Sql
aggregate functions include: AVG, COUNT, SUM, MIN, MAX. 
////////////////////////////////////////////////////Serialisation and deserialisation
Json
Groupby stntax
post,put ,delect.
/////////////////////////Advantage of Enum
1>readability
2>Maintainability
3>
////////////////////Difference between var and dynamic in C#
////////////Var
--->If the variable does not initialized it throw an error.
---->returning values from the function. It can only used as a local variable in function.
/////Dynamic
----->If the variable does not initialized it will not throw an error.
----->It can be used for properties or returning values from the function.
//////////////////////////////////What is LINQ , Diffrent type of LINQ.
LINQ allow you to query and manipulate data using a SQL-like syntax directly within your c# or VB.NET code making
data access and manipulation more intuitive and efficient.

Example : Suppose you have a list of numbers and you want to filter out only the even numbers from it. 

1> Create a List of Numbers: First, let's create a list of numbers in C#:

List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

2> Write a LINQ Query: Next, you write a LINQ query to filter out the even numbers:

var evenNumbers = from num in numbers
                  where num % 2 == 0
                  select num;

In this query:

from num in numbers specifies the data source (the list of numbers).
where num % 2 == 0 filters out only the even numbers.
select num selects the even numbers from the list.

3> Iterate Over the Result: Finally, you can iterate over the result and perform further operations if needed:
foreach (var num in evenNumbers)
{
    Console.WriteLine(num);
}

///////////////////////////////////////////////////Diffrent type of LINQ
1> LINQ to Objects: allows you to query in-memory collections, such as arrays, lists, dictionaries, and other 
IEnumerable<T> implementations

2>LINQ to Entities (Entity Framework Core): Allow data in relational databases using Entity Framework Core.
Allow conceptual model mapped to database tables.

3>LINQ to SQL:
4>LINQ to XML:
5>LINQ to DataSet:

/////////////////////////////////////////////////////////////////////Authentication and Autherization in your Project
Authentication:

User Sign-In: When users visit your website, they are prompted to sign in with their username and password. This process verifies their identity.
Remembering Users: After users sign in, your website remembers them using a special token (e.g., a cookie). This way, they don't have to sign in every time they visit a new page.
Authorization:

Determining Access Rights: Once users are signed in, your website checks what they're allowed to do based on their role or permissions. For example, regular users might only be able to view recipes, while administrators can add or edit recipes.
Restricting Access: If a user tries to perform an action they're not allowed to do (like adding a recipe without being an administrator), your website denies the request and shows an error message.
Real-World Example:

Let's say a user named "Alice" wants to add her special cookie recipe to your website:

Authentication:
Alice visits your website and clicks "Sign In".
She enters her username and password.
Your website verifies her credentials and issues a token to remember her.
Authorization:
Alice navigates to the "Add Recipe" page.
Your website checks her role or permissions and sees that she's just a regular user, not an administrator.
Since Alice doesn't have permission to add recipes, your website denies her request and displays a message saying she needs to be an administrator to do that.
In summary, authentication verifies users' identities, while authorization determines what actions they're allowed to perform based on their roles or permissions. This ensures that only authorized users can access certain features of your website, helping to protect sensitive information and maintain control over who can do what.



Step 1: Setting up ASP.NET Core Identity

First, let's set up ASP.NET Core Identity to handle user authentication and authorization.

csharp
Copy code
// Startup.cs

public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<ApplicationDbContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

    services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
        .AddEntityFrameworkStores<ApplicationDbContext>();

    services.AddControllersWithViews();
    services.AddRazorPages();
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    // Middleware configurations...
    app.UseAuthentication();
    app.UseAuthorization();

    // Other middleware configurations...
}
Step 2: Creating Controllers and Views

Next, let's create controllers and views for our recipe sharing website. We'll add authorization attributes to restrict access to certain actions.

csharp
Copy code
// RecipesController.cs

[Authorize] // Only authenticated users can access these actions
public class RecipesController : Controller
{
    private readonly ApplicationDbContext _context;

    public RecipesController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: Recipes
    public async Task<IActionResult> Index()
    {
        var recipes = await _context.Recipes.ToListAsync();
        return View(recipes);
    }

    // Other actions...
}
csharp
Copy code
// AccountController.cs

[AllowAnonymous] // Allow anonymous access to these actions
public class AccountController : Controller
{
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly UserManager<IdentityUser> _userManager;

    public AccountController(
        SignInManager<IdentityUser> signInManager,
        UserManager<IdentityUser> userManager)
    {
        _signInManager = signInManager;
        _userManager = userManager;
    }

    // Login action
    [HttpGet]
    public IActionResult Login(string returnUrl = null)
    {
        ViewData["ReturnUrl"] = returnUrl;
        return View();
    }

    [HttpPost]
    [AllowAnonymous]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null)
    {
        // Logic for user login...
    }

    // Other actions...
}
Step 3: Displaying Views

Finally, let's create views to display our website's pages.

html
Copy code
<!-- Index.cshtml (Recipes/Index) -->

@model IEnumerable<Recipe>

<h1>Recipes</h1>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <!-- More columns... -->
        </tr>
    </thead>
    <tbody>
        @foreach (var recipe in Model)
        {
            <tr>
                <td>@recipe.Name</td>
                <td>@recipe.Description</td>
                <!-- More columns... -->
            </tr>
        }
    </tbody>
</table>
html
Copy code
<!-- Login.cshtml (Account/Login) -->

<h1>Login</h1>

<form asp-controller="Account" asp-action="Login" method="post">
    <!-- Login form fields... -->
</form>
In this example:

We set up ASP.NET Core Identity to handle user authentication and authorization.
Controllers and views are created for displaying recipes and handling user login.
Authorization attributes like [Authorize] and [AllowAnonymous] are used to restrict access to certain actions.
Views are created to display website pages, such as the recipe index and login page.

////////////////////////////////////////////////////////////////////////What is Diffrence between Struct and Class
Definition:
Class: A class is a reference type.
Struct: A struct is a value type.
Inheritance:
Class: Classes support inheritance.
Struct: Structs do not support inheritance.
Performance:
Class: Because classes are reference types, they are allocated on the heap.accessing them involves an extra level
Struct: Structs are value types, and they are typically allocated on the stack.Accessing struct members is generally faster than accessing class members.
Uses:
Class: Classes are commonly used to model complex entities with behavior and state.
Struct: Structs are often used for lightweight objects that represent simple data structures

////////////////////////////////////////////////////What is the Diffrence Between Generic Vs Non Generic
Collection are categorized into two parts Generic and Non Generics
Generic Collection :
Type Safety : Generic collections provide strong type safety.
Usability : Generic collections are more user-friendly because they eliminate the need for explicit casting.
Performance : Generic collections are generally more efficient in terms of both execution speed and memory
because they avoid the overhead of boxing and unboxing.

Non-Generic Collection:
Type Safety : Non-generic collections are not type-safe because they store elements as object types.
Usability : Non-generic collections are less user-friendly because they involve casting and boxing/unboxing.
Performance : Non-generic collections may have performance overhead due to the need for boxing (converting value types to reference types) and unboxing
(converting reference types back to value types).

////////////////////////////////////////////////What is diffrence between ArrayLIst and List
//ArraList :
Type Safety : ArrayList is not type-safe as it can store any type of object.
Performance: ArrayList may be slower due to boxing/unboxing.
Code Readability : ArrayList may require explicit type casting.
.NET Version : ArrayList was introduced in earlier versions of .NET framework (2.0)
Flexibility : List can only store elements of the specified type.
//List
Type Safety : List is Type-safe as it can store elements of a specific type only.
Performance : List performs better as it avoids boxing/unboxing.
.NET Version : List was introduced in .NET 3.0
Flexibility : ArrayList can store elements of any type.

Code Readability : List provides clear type specification to improved readability.

Performance : List performs better as it avoids boxing/unboxing.

/////////////////////////////Principle of Rest API
1> Client-Server Architecture : In our example, the client will be a web browser or a mobile application, while the server will be
an ASP.NET Core web application hosting the RESTful API.

Statelessness:
Each HTTP request from the client to the server will contain all the information needed for the server to process the request. For example, when creating a new blog post, the request will 
include the post data (title, content, etc.), and the server will process the request based on this information.
2> Uniform Interface:
We'll use standard HTTP methods to perform CRUD operations on resources. For example:
GET /api/posts to retrieve all blog posts.
POST /api/posts to create a new blog post.
PUT /api/posts/{id} to update an existing blog post.
DELETE /api/posts/{id} to delete a blog post.

///////////////////////////////////////////What is Collection in C#

C# collection types are designed to store, manage and manipulate similar data more efficiently. Data manipulation includes adding, removing, finding, and inserting data in the collection. Collection types implement the following common functionality: 

Adding and inserting items to a collection
Removing items from a collection
Finding, sorting, and searching items
Replacing items
Copy and clone collections and items
Capacity and Count properties to find the capacity of the collection and the number of items in the collection
.NET supports two types of collections, generic collections, and non-generic collections. Before NET 2.0, it was just collections, and when generics were added to .NET, generics collections were added as well.

The following table lists and matches these classes.

Non-generic                          Generic

ArrayList     ------------->          List

HashTable  ------------->          Dictionary

SortedList   ------------->          SortedList  

Stack           ------------->          Stack

Queue         ------------->          Queue

1. Non-Generic
In non-generic collections, each element can represent a value of a different type. The collection size is not fixed. Items from the collection can be added or removed at runtime. 


Generic Collections
Generic Collections work on the specific type specified in the program, whereas non-generic collections work on the object type. 

Specific type
Array Size is not fixed
Elements can be added/removed at runtime.

////////////////////////////////What is Jagged Array
A jagged array in C# is an array whose elements are arrays. The elements of a jagged array can be of different dimensions and sizes.
A jagged array is sometimes called an "array of arrays." A special type of array is introduced in C#.
A Jagged Array is an array of an array in which the length of each array index can differ.

Example: Movies Counter

Uses : you have a data structure where the size of each "inner" array varies.


/////////////////////////////////reflection
///////////////////////////////////////////////////////////////////////////////////Oracle Interview Question
Q> What is diffrence between Extensition Methed and Overloading
Q> Can we inject the class Those who inheriting the implemented class of dependenncies injection.
////////////////////////////////////Q>Lasy Loading
///////What is LazyLoading
Lazy loading is a technique where an object or resource is not loaded until it is specifically requested. Instead of loading all dependencies or resources upfront,
lazy loading defers the loading process until the moment they are needed. 
This can help improve performance and resource utilization by only loading what is necessary at the time.

/////////////Why we use Lasy Loading
Lazy loading is used to improve performance and optimize resource consumption. By delaying the loading of certain objects or data until they are needed, 
lazy loading reduces the initial load time and conserves memory.

//////////////When to Use Lazy Loading
Not all resources are needed immediately upon application startup.
There is a need to optimize memory usage and reduce memory footprint.

//////////Why Use Lazy Loading in .NET Core?
In .NET Core applications, lazy loading is often used to delay the loading of related entities in Entity Framework Core, 
an Object-Relational Mapping (ORM) framework used for database access. By default, Entity Framework Core uses lazy loading for navigation properties,
allowing related entities to be loaded only when accessed, rather than loading all related entities eagerly.

Q>What is Web Development and Web Api.
Q>One api is their Huge amount of data is their , that api is not giving data(should I have to compress to give the data)
Q>Weak refreshes.
////////////////////////////////////////////////////////////////////Q>How can I know this class is generic.
To determine if a class is generic in C#, you can inspect the class definition, use reflection, or utilize the typeof operator with generic type parameters.
Reflection is particularly useful for runtime checks, while inspecting the class definition is straightforward for compile-time checks.
//////////////////////////////Q>What file will made after compiler c# code. And What file will make after compiling .net Code
C# Compilation:

Executable: .exe
Library: .dll

Q>What is the Scope of  Object.
Q>When Does refrence object deleted.
Q>Crossed question for Injection.
Q>What is diffrence between ADO.net and Entity framework ,(which part of code that I have to write so that we do not have to write much code in Entityframework).
////////////////////////////////////////////////////////////////////























































//////////////////////////////////////////////////////////////////////////////////////////////Kindle Question Simplyfied
WHAT ARE SOLID PRINCIPLES? WHAT IS THE DIFFERENCE BETWEEN SOLID PRINCIPLES AND DESIGN PATTERNS?
/////////What is SOLID PRINCIPLES
SOLID is an acronym for a set of design principles in object-oriented programming (OOP) that aim to make software designs more understandable,
flexible, and maintainable. 
Each letter in SOLID stands for a different principle.

///////////Why Use SOLID Principles
Maintainable:
Testable:
Flexible:
Scalable:

///////////When to Use SOLID Principles?
Designing complex systems that require flexibility and maintainability.
Working on long-term projects where codebase evolution and maintenance are expected.

///////////////Why Even Use SOLID Principles?
Improved Code Quality:
Easier Maintenance:
Enhanced Testability:
Increased Reusability:
Better Collaboration:

//////////////////////Diffrence 
SOLID principles aren't concrete - rather abstract. Meaning there can be multiple ways to implement the SOLID principles. 
Design patterns are concrete and solve a particular kind of problem in a particular way.

////////////////////WHAT IS SINGLE RESPONSIBILITY PRINCIPLE?
///////////////What
The Single Responsibility Principle (SRP) is one of the SOLID principles of object-oriented programming. 
It states that a class should have only one reason to change, meaning that a class should have only one responsibility or job. In other words, 
a class should have only one primary purpose or concern.

///////////Why Use the Single Responsibility Principle?
The Single Responsibility Principle is used to:

Improve Maintainability: By ensuring that each class has a single responsibility, code becomes easier to understand, modify, and maintain. This leads to better code quality and reduces the risk of introducing bugs during maintenance.

Enhance Testability: Classes with a single responsibility are easier to test because they have a clear and focused purpose. This makes it easier to write unit tests and verify the correctness of the class's behavior.

Promote Reusability: Classes that adhere to the Single Responsibility Principle are more reusable because they are focused on a specific task or responsibility. This encourages code reuse and helps avoid code duplication.

When to Use the Single Responsibility Principle?
The Single Responsibility Principle should be applied when:

Designing or refactoring classes and components in software systems.
Collaborating on team-based projects where code maintainability and understandability are important.
Developing long-term projects where code evolution and maintenance are expected.
Real-World Example and Code:
Let's consider a real-world example of a NotificationService class responsible for sending notifications via email and SMS. However, following the Single Responsibility Principle, we split the class into two separate classes: EmailNotificationService and SMSNotificationService, each responsible for handling a specific type of notification.

csharp
Copy code
// Before applying SRP

public class NotificationService
{
    public void SendNotification(string recipient, string message)
    {
        // Send notification via email
        EmailService.SendEmail(recipient, message);

        // Send notification via SMS
        SMSService.SendSMS(recipient, message);
    }
}

// After applying SRP

public class EmailNotificationService
{
    public void SendNotification(string recipient, string message)
    {
        // Send notification via email
        EmailService.SendEmail(recipient, message);
    }
}

public class SMSNotificationService
{
    public void SendNotification(string recipient, string message)
    {
        // Send notification via SMS
        SMSService.SendSMS(recipient, message);
    }
}
In the above example, we have split the NotificationService class into two separate classes: 
EmailNotificationService and SMSNotificationService, each with a single responsibility. The EmailNotificationService class is responsible 
for sending email notifications, while the SMSNotificationService class is responsible for sending SMS notifications. This adheres to the Single Responsibility
Principle and makes the code easier to maintain and understand.

/////////////////////////////////////////////////////////////////////////////WHAT IS OPEN-CLOSED PRINCIPLE?

























,














//////////////////////////////////////////////////////////////////////////////////////////Angular
/////What is a Selector and Template ?

/////////////////////////////////////Diffrence between api , Restapi, Restfulapi
In .NET Core, an API is a general interface for communication between systems, while a REST API specifically follows REST
principles and uses HTTP for resource-based communication.

////////////////////////////////////////Rest Api
REST API: Refers to any API that adheres to the principles of REST (Representational State Transfer). 
It might not fully implement all the constraints of REST architecture.

//////////////////////////////////////RESTful API:
RESTful API: Specifically refers to APIs that strictly adhere to REST principles, including statelessness, 
client-server architecture, cacheability, a uniform interface, and a layered system.

//////////////////////////////////////////////////////////////////////////////////Solid Principle
The SOLID principles are a set of design principles in object-oriented programming to ensure that software is modular, scalable, and maintainable. Here’s a mnemonic to help remember them:

S: Single Responsibility Principle (SRP)
O: Open/Closed Principle (OCP)
L: Liskov Substitution Principle (LSP)
I: Interface Segregation Principle (ISP)
D: Dependency Inversion Principle (DIP)
Mnemonic for SOLID
Smart Objects Love Intelligent Design

This mnemonic encapsulates the idea that well-designed objects (Smart Objects) follow these principles, leading to Intelligent Design.

Explanation
Single Responsibility Principle: A class should have only one reason to change.
Open/Closed Principle: Software entities should be open for extension but closed for modification.
Liskov Substitution Principle: Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.
Interface Segregation Principle: A client should not be forced to depend on interfaces it does not use.
Dependency Inversion Principle: High-level modules should not depend on low-level modules. Both should depend on abstractions.
By associating each principle with a key concept, you can more easily recall what each letter stands for and what it entails.

///////////////////////////////////////////////////////////////////////diffrence between  Database First, Code First , Model first in Entity framework in one line

Sure! Here are the differences in one line each:

Database First: The database schema is created first, and the code models are generated from the existing database.
Code First: The code models are created first, and the database schema is generated from the code models.
Model First: The conceptual model is designed first using a designer, and both the code models and database schema are generated from the model.



 



///////////////////////////////////////////////////////////////////////////////////////////FULLSTACKCAFE Question 
////////////////////////1> What is Property Accessor ?
The get and set portions or blocks of a property are called accessors.
class Person
{
  private string name; // field

  public string Name   // property
  {
    get { return name; }   // get method
    set { name = value; }  // set method
  }
}

//////////////////////////2>

///////////////////////////Microservices
Microservices is a software development architecture that breaks large applications into smaller, independent parts, or services
//////////////////////
Artitecture of Project. // check later
Interface//testing multiple method
///////////////////////How you give Security to Api.
See in the copy.
if you want security of multiple api , but not one.
Logout Session
Emitter, Interpolation.

///////////
HR Sound issue
Some time good and Some time low.
JWT
/////////////////////////////////Benifit of polymorphism
Polymorphism is a powerful concept in C# that allows you to write flexible, reusable, and extensible code.


Can you write the program that take n number of input as give the output sum, even , count.
Callback, map, filter, Session, Storage.
Http filter, Component of .net, dynamic polymorphis,
Q> What is == , and === in Variable.

Q> What is the early binding and late binding.


















////////////////////////////////////////////////////
Q)Explain how dependency injection works in ASP.NET Core?
 It involves supplying dependencies to a class from outside the class itself. The most common way to do this in ASP.NET Core
is through constructor injection, but there are also other techniques like property injection and method injection.

Q>“ASP.NET Core has dependency injection to manage services; are you aware of the different lifetimes? What are they, and what does each mean?”
Transient:

Creation: A new instance is created each time the service is requested (injected).
Lifetime: The instance lives only as long as it's needed to fulfill the current request.
Example: Database context, logger, helper classes.
Q> Varchar and Nvarchar
Q> diffrence between Dictionary vs List
Q>What is magic table in Sql.

Q>What is the diffrence between equal(), and ==.
"==" Operator:
--> Checks if two object references point to the same memory location (reference equality). 
"Equals()" Method:
A virtual method that can be overridden in derived classes to define how equality should be checked for that specific type. 
Q>trigger

last 2question of interview I have solve.

///////////////////////////////////////////////////////////////
Function 1(){
	Statement 1;
	SetTimeout(()=>{
		Statement 2;		
	},0);
	Statement 3;
}
Function 2(){
	Statement 4;
}
Function 1();
Function 2();
Expected output
?
output:
Statement 1 (from Function 1)
Statement 3 (from Function 1)
Statement 4 (from Function 2)
Statement 2 (from the setTimeout callback)

output : statement 1 , Statement 2;Statemen... by Abhishek Singh (Guest)
11:48 AM
Abhishek Singh (Guest)
output : statement 1 , Statement 2;Statement 3 ,Statement 4
////////////////////////////////
Code sample Service  	a=0;     API 1: ... by Unknown User
Unknown User
11:50 AM
Code sample
Service 
	a=0;
 
 
API 1:
	a++;
 
API 2:
	Read a;
 
Expected output
?
has context menu

////////////////////////////////////////////
Write code for Service.

///////////////////////////Write the code for getting 5 hightly salary.(use function that is best approach).
Salary Distict Salary
from Employee
where Salary Desc
Offset 4 rows Next 1 rows Only;
////////////////////////////////////
What is the yeild classes in c#.
The yield keyword in C# helps to create a sequence of values one at a time, instead of returning them all at once.
It makes the code simpler and more memory-efficient when working with large collections or sequences.

Example:
using System;
using System.Collections.Generic;

class Program
{
    static IEnumerable<int> GetNumbers()
    {
        yield return 1;  // First number
        yield return 2;  // Second number
        yield return 3;  // Third number
    }

    static void Main()
    {
        foreach (int number in GetNumbers())
        {
            Console.WriteLine(number);
        }
    }
}

Summary of Real-World Use Cases for yield:
Lazy Loading: Fetch or process data one element at a time, saving memory and improving performance.
Infinite Sequences: Useful for generating sequences like Fibonacci that can go on indefinitely.
Filtering Data: Apply filters on data without holding everything in memory.
Efficient File/Log Processing: Process large files line by line, without loading them entirely into memory.
Paged API Requests: Fetch and process data from APIs page by page, one item at a time.

///////////////////////////////
Dirt.


q>Normally what happen if we do not put the Await keyword in Asny method.
Q>How many type of json file will be their.
Q>Base class of controller , How does you make controller.
Q>If condition and iteration in Sql 
Q)How you debugging the store procedure in Sql server 
Q) How you give the security to backend.
Q) Hiw you can optimise the SQl query
Q)be all the code of in your brain
Q) logging ke bare me pich hai
Q)How can you take the back up your data base
Q)How can you communicate components with service.
Q) question will not asked directly.
Q> What Proxy Design Patter
Q> What is the latest feature addes in Entyty framework after .Net 6 , 7;
Q>TempData
Q>Minification and Bundling.
Q>Render page Vs Render body.
Q>CTE vs Temp Table
Q> Unique Key Vs Foreign Key
Q>Why ViewData require typeCasting
Q> What is the diffrence between viewdata and View Bags
Q> What id diffrence between viewdata and viewbags.
Q> What are the diffrent http word.
Q>What are the architecture in dot.net core.
Q> minimum parameter for Ajax

//////////////////////////////////////////////OOPS
Q> Create a class hierarchy for different types of fights (e.g., Domestic Flights, International Flights, Charter Flights). Each flight should have common properties (e.g., flight number, departure time, arrival time) and specific properties (e.g., flight duration, layovers, charter company).

Implement methods for booking flights, cancelling flights, and displaying flight details


Q> 1️⃣ Library Management System
Problem:
Design a class hierarchy for a Library Management System. Implement the following:

A base class Book with common properties: Title, Author, ISBN, PublicationYear.
Derived classes:
EBook (additional properties: DownloadLink, FileSize).
PrintedBook (additional properties: ShelfLocation, CopiesAvailable).
Implement methods for:
Issuing and returning books.
Displaying book details.

2️⃣ Vehicle Rental System
Problem:
Create a Vehicle Rental System using OOP principles.

Define a base class Vehicle with properties like VehicleID, Model, Year, RentalPrice.
Create derived classes:
Car (additional property: SeatingCapacity).
Bike (additional property: HasHelmet).
Implement methods for:
Renting a vehicle.
Returning a vehicle.
Displaying rental details.

3️⃣ Employee Management System
Problem:
Design a class hierarchy for an Employee Management System.

Define a base class Employee with properties: EmployeeID, Name, Salary, Department.
Create derived classes:
Manager (additional properties: Bonus, TeamSize).
Developer (additional properties: ProgrammingLanguage, ExperienceLevel).
Implement methods for:
Calculating salary (including bonuses for managers).
Promoting employees.
Displaying employee details.

4️⃣ Online Shopping System
Problem:
Develop an Online Shopping System using OOP.

Create a base class Product with properties: ProductID, Name, Price, StockQuantity.
Derive classes:
Electronics (additional properties: WarrantyPeriod).
Clothing (additional properties: Size, Material).
Implement methods for:
Adding products to the cart.
Calculating the total bill.
Displaying product details.

5️⃣ Hospital Management System
Problem:
Design a Hospital Management System with OOP.

Define a base class Person with properties: Name, Age, Gender.
Create derived classes:
Doctor (additional properties: Specialization, Experience).
Patient (additional properties: Disease, AdmissionDate).
Implement methods for:
Scheduling appointments.
Admitting a patient.
Displaying patient/doctor details.
///////////////////////What is the Cross join 
Key Differences
Feature	                                CROSS JOIN	                         FULL JOIN (FULL OUTER JOIN)
Condition	                         No condition needed	                  Needs ON condition
Result	                                 Cartesian product (A × B)	       Matching + unmatched records from both tables
NULL values	                         No NULLs	                   NULLs appear for unmatched records
Use case	                          Generate all combinations	Get complete dataset from both tables



//////////////////////////////////Q> Method Ovrriding ka code likh wadiya.
//////////////////////////////////Q> Write the sql query find max salary from whose age is greater than 52.
Select Max(Salary) as MaxSalary from Employee table
where age > 55.

///////////////////////////////////////////////////////
input : "R@*IG#H@T"
output : "T@*HG#I@R"

using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        string str = "R@*IG#H@T";
        string str1 = ReverseString(str);
        Console.WriteLine(str1);
    }
    
    public static string ReverseString(string str)
  {
    char[] ch = str.ToCharArray();
    int left = 0;
    int right = str.Length - 1 ;
  while(right > left)
  {
      if(!Char.IsLetter(ch[left]))
      {
          left++;
      }
     else if(!Char.IsLetter(ch[right]))
      {
          right--;
      }
      else
      {
      char temp = ch[left];
      ch[left] = ch[right];
      ch[right] = temp;
      left++;
      right--;
  }
  }
  return new string(ch);
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Interview Question Experience Part 2
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Q> What is the diffrence between Class and Struct

🔹 Example of a Class (Reference Type)

class Car
{
    public string Brand;
}

class Program
{
    static void Main()
    {
        Car car1 = new Car();
        car1.Brand = "Tesla";

        Car car2 = car1;  // Reference is copied (not a new object)
        car2.Brand = "BMW";

        Console.WriteLine(car1.Brand);  // Output: BMW (same reference)
    }
}

✅ Key Takeaway:

car1 and car2 point to the same object in memory.

Changing car2.Brand also changes car1.Brand.


---

🔹 Example of a Struct (Value Type)

struct Car
{
    public string Brand;
}

class Program
{
    static void Main()
    {
        Car car1 = new Car();
        car1.Brand = "Tesla";

        Car car2 = car1;  // Copy is created (separate memory)
        car2.Brand = "BMW";

        Console.WriteLine(car1.Brand);  // Output: Tesla (original unchanged)
    }
}

✅ Key Takeaway:

car1 and car2 are separate copies in memory.

Changing car2.Brand does NOT affect car1.Brand.


---

🔹 Interview-Friendly Answer

1. Class is a reference type (stored in Heap), Struct is a value type (stored in Stack).

2. Class supports inheritance, Struct does not.

3. Class objects are passed by reference, Structs are copied.

4. Use Struct for small, lightweight objects (like Point), and Class for large, complex objects (like Car).



/////////////////////////////Access Modifier
revision from udemy courses.

//////////////////////////////Diffrence between Unique key and Foreign key.
Difference Between Unique Key and Foreign Key in SQL

---

🔹 Example of Unique Key

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Email VARCHAR(100) UNIQUE,  -- Ensures all emails are unique
    Name VARCHAR(50)
);

✅ Key Takeaway:

Email column cannot have duplicate values but can have one NULL.


---

🔹 Example of Foreign Key

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(50),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)  -- Foreign Key linking to Departments
);

✅ Key Takeaway:

DepartmentID in Employees refers to DepartmentID in Departments table.

Ensures an employee must belong to a valid department.


---

🔹 Interview-Friendly Answer

1. Unique Key ensures uniqueness in a column, Foreign Key links two tables.

2. Unique Key allows one NULL, Foreign Key allows multiple matching values.

3. Unique Key prevents duplicates, Foreign Key ensures referential integrity.

4. Unique Key is used for unique constraints (like emails), Foreign Key is used for table relationships (like Employee-Department).


/////////////////////////////////////////////////////////////////////////IEnumerable and IQuerable and ICollection and List
Difference Between IEnumerable and IQueryable in C# (Easy Explanation for Interviews)
🔹 Example of IEnumerable (Client-Side Execution, Inefficient for Databases)
List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

IEnumerable<int> evenNumbers = numbers.Where(n => n % 2 == 0); // Filters in memory
✅ Key Takeaway:

Loads all data into memory, then filters it.
Bad for large data (wastes memory and performance).
🔹 Example of IQueryable (Database Execution, Efficient for SQL Queries)
using (var context = new MyDbContext())
{
    IQueryable<Employee> employees = context.Employees.Where(e => e.Salary > 50000);
}
✅ Key Takeaway:

Query executes in SQL Server, filtering before data is loaded.
Much faster for large databases.
🔹 Why Use IQueryable for SQL Queries?
Reduces Load on Database: Only fetches required data.
Optimized Queries: Generates efficient SQL (SELECT statements).
Supports Deferred Execution: Query runs only when needed, improving performance.
Scales Better: Ideal for handling large datasets in real applications.
🔹 Interview-Friendly Answer
IEnumerable processes data in memory, IQueryable runs the query on the database.
IEnumerable is better for in-memory collections, IQueryable is best for SQL queries.
IQueryable improves performance by filtering at the database level.
Use IQueryable in Entity Framework to generate efficient SQL queries automatically.

//
🧩 1️⃣ What is ICollection<T> in C#?

ICollection<T> is an interface that represents a generic collection of items.
It provides basic collection behaviors such as:

Adding items

Removing items

Counting how many items exist

Checking if an item exists


Think of it as a common contract that any collection (like List, HashSet, etc.) can follow.


---

✅ Basic Example:

ICollection<string> fruits = new List<string>();
fruits.Add("Apple");
fruits.Add("Banana");

Console.WriteLine(fruits.Count); // Output: 2

Here, you’re using ICollection<string> as the type, but the actual object is a List<string>.

This is called programming to an interface, which gives flexibility.


---

🧱 2️⃣ What is List<T>?

List<T> is a concrete class that implements several interfaces:

public class List<T> : ICollection<T>, IEnumerable<T>, IList<T> { ... }

So, List<T> is a specific implementation of ICollection<T>.

It provides:

Index-based access (myList[0])

Sorting, Reversing, Range operations

Dynamic resizing


Basically, List<T> is a resizable array with many built-in features.


---

✅ Example:

List<string> fruits = new List<string>();
fruits.Add("Apple");
fruits.Add("Banana");
Console.WriteLine(fruits[0]); // Output: Apple


---

⚙️ 3️⃣ Key Difference Summary

Feature ICollection<T> List<T>

Type Interface Concrete Class
Can Add/Remove ✅ Yes ✅ Yes
Index-based Access ❌ No ✅ Yes (myList[0])
Sorting Methods (Sort(), etc.) ❌ No ✅ Yes
Implementation Can be List, HashSet, etc. Specific implementation
When to Use When you want abstraction When you need indexing or specific features



---

🧠 4️⃣ Real-World Analogy

Imagine a TV Remote Interface — it defines actions like TurnOn(), TurnOff(), ChangeChannel().

Different brands (Sony, LG, Samsung) implement this interface differently —
but you can operate all with the same actions.

Similarly:

ICollection<T> defines what actions a collection can do.

List<T> defines how it does them (with index access and resizing).



---

💡 5️⃣ When to Use Which?

Scenario Use

You want to hide implementation details (abstraction) ICollection<T>
You need index access, sorting, or range operations List<T>
You want flexible code that can switch between List, HashSet, etc. ICollection<T>



---

✅ Example (Good Practice)

public void ProcessNames(ICollection<string> names)
{
    foreach (var name in names)
    {
        Console.WriteLine(name);
    }
}

// You can pass any collection
ProcessNames(new List<string>() { "Abhishek", "John" });
ProcessNames(new HashSet<string>() { "Abhishek", "John" });

This gives your code flexibility and reusability — very professional practice.

/////////////difference between JIT and AOt
"JIT compiles the code while the app is running, which makes it slower. AOT compiles the code before running the app, making it faster and better for production."



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////L2 Coding Question
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Find the Maximum Subarray Sum (Kadane's Algorithm)

Input: [-2,1,-3,4,-1,2,1,-5,4] → Output: 6 (subarray: [4,-1,2,1])

Complexity: O(n)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Linq mosted asked question
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
You are given a list of Order objects. Each order has a CustomerName, OrderId, and OrderDate. Write a method that:
Groups orders by customer name.
Sorts each customer’s orders by OrderDate descending.
Returns a dictionary: Dictionary<string, List<Order>> where the key is the customer name and the value is the list of sorted orders.

public class Order
{
public string CustomerName{get ; set;};
public int OrderId {get ; set ;}
public DataTime OrderDate {get ; set ;}
}

public class orderGrouper
{
 public static Dictionary<string , List<order>> GASO(List<Order> orders)
{
  var groupedOrders = orders.GroupBY(o=> o.customername);

 var result = new Disctionary<string,List<List<Order>>();
 foreach(var group in groupedOrders)
 {
   var sorttedOrder = group.OrderByDescending(o => o.OrderDate).ToList();
   
   result[group.Key] = sortedOrders;
 }
 return result;
} 

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Linq mosted asked question
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
You are given a list of Order objects. Each order has a CustomerName, OrderId, and OrderDate. Write a method that:
Groups orders by customer name.
Sorts each customer’s orders by OrderDate descending.
Returns a dictionary: Dictionary<string, List<Order>> where the key is the customer name and the value is the list of sorted orders.

public class Order
{
public string CustomerName{get ; set;};
public int OrderId {get ; set ;}
public DataTime OrderDate {get ; set ;}
}

public class orderGrouper
{
 public static Dictionary<string , List<order>> GASO(List<Order> orders)
{
  var groupedOrders = orders.GroupBY(o=> o.customername);

 var result = new Disctionary<string,List<List<Order>>();
 foreach(var group in groupedOrders)
 {
   var sorttedOrder = group.OrderByDescending(o => o.OrderDate).ToList();
   
   result[group.Key] = sortedOrders;
 }
 return result;
} 

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tarun Kumar
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1. Difference between Controller vs ControllerBase.
⚙️ 1️⃣ Basic Definition

Type Description

ControllerBase Base class for Web APIs — it provides core features like routing, model binding, HTTP response handling, etc.
Controller Inherits from ControllerBase, and adds support for MVC Views (like Razor views in web apps).


So:

> 🧠 Controller = ControllerBase + View Support




---

🧩 2️⃣ Inheritance Hierarchy

Object
  └── ControllerBase
        └── Controller


---

🎯 3️⃣ When to Use Which

Scenario Use Reason

Building RESTful APIs ✅ ControllerBase You don’t need Views (only JSON responses)
Building MVC Web Applications ✅ Controller You need Razor views (.cshtml pages)



---

🧱 4️⃣ Example 1 — Using ControllerBase (Web API)

using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class ProductController : ControllerBase
{
    [HttpGet]
    public IActionResult GetProducts()
    {
        return Ok(new[] { "Laptop", "Phone" });
    }
}

✅ Key Points:

[ApiController] attribute — adds automatic model validation and binding.

Returns JSON (Ok(), BadRequest(), etc.)

No View() method available.



---

🧱 5️⃣ Example 2 — Using Controller (MVC)

using Microsoft.AspNetCore.Mvc;

public class HomeController : Controller
{
    public IActionResult Index()
    {
        return View(); // returns a Razor view
    }

    public IActionResult About()
    {
        ViewBag.Message = "About page";
        return View();
    }
}

✅ Key Points:

Has access to View(), ViewBag, TempData, etc.

Used in MVC web apps (where you have .cshtml UI files).



---

🔍 6️⃣ Key Feature Comparison

Feature ControllerBase Controller

Inherits From Object ControllerBase
For Web API MVC Web App
View Support (View(), PartialView()) ❌ No ✅ Yes
JSON / HTTP Response (Ok(), NotFound(), BadRequest()) ✅ Yes ✅ Yes
Model Binding / Validation ✅ Yes ✅ Yes
TempData, ViewBag, ViewData ❌ No ✅ Yes
[ApiController] usage ✅ Common ❌ Rare



---

🧠 7️⃣ Real-World Analogy

Imagine you’re building:

🧾 A Restaurant Management Dashboard (UI with buttons, forms) → you use Controller (MVC).

⚙️ A Mobile App Backend API (only sends JSON data to frontend) → you use ControllerBase.


They both handle requests and responses,
but only one (Controller) needs to serve HTML views.


---

💡 8️⃣ Interview Tip

If asked:

> "What’s the difference between Controller and ControllerBase?"



You can answer:

> “ControllerBase is used for building REST APIs — it provides HTTP and model-binding features but not view support.
Controller inherits from ControllerBase and adds features for MVC applications like View(), TempData, and ViewBag.
So, for APIs, we prefer ControllerBase, and for MVC views, we use Controller.”


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2. Explain Action Filters, Result Filters, Exception Filters
🧩 Definition (in super easy words)

Think of filters like security guards or helpers that stand at the door of your controller actions in ASP.NET Core MVC.
They help you run some extra logic before or after a controller action executes — like logging, validation, exception handling, etc.

There are different types based on when they run.


---

⚙️ Types of Filters

1. 🎯 Action Filter

Runs before and after a controller action executes.

Use it when you want to do something like logging, validating input, or checking user permissions.


public class LogActionFilter : IActionFilter
{
    public void OnActionExecuting(ActionExecutingContext context)
    {
        Console.WriteLine("Action is about to start!");
    }

    public void OnActionExecuted(ActionExecutedContext context)
    {
        Console.WriteLine("Action has finished!");
    }
}

✅ Example in simple words:
When a user requests to buy a property, this filter can log the request details before the controller action runs and log the response after it completes.




---

2. 📄 Result Filter

Runs before and after the action result (like ViewResult, JsonResult) executes.

Use it if you want to modify or log the response before it is sent to the client.


public class LogResultFilter : IResultFilter
{
    public void OnResultExecuting(ResultExecutingContext context)
    {
        Console.WriteLine("Before sending the result to the user.");
    }

    public void OnResultExecuted(ResultExecutedContext context)
    {
        Console.WriteLine("After sending the result to the user.");
    }
}

✅ Example in your Buy & Sell Property App:
When a property list page is being returned, you can log how long it took to render the response before sending it to the browser.




---

3. 💥 Exception Filter

Runs when an exception occurs in your controller or action method.

Use it to handle errors globally and return a custom response.


public class GlobalExceptionFilter : IExceptionFilter
{
    public void OnException(ExceptionContext context)
    {
        Console.WriteLine("Error occurred: " + context.Exception.Message);
        context.Result = new ObjectResult("Something went wrong!") { StatusCode = 500 };
    }
}

✅ Example in your project:
If a database error happens while saving a property or payment, this filter catches it and shows a friendly message like “Something went wrong, please try again.”




---

🏗️ Project Use (Buy & Sell Properties App)

Action Filter: Used for logging API requests (like when a buyer searches properties).

Result Filter: Used for monitoring response times and performance.

Exception Filter: Used for handling all unexpected errors and showing user-friendly messages instead of crash errors.



---

⚖️ Trade-offs

Pros Cons

Keeps your controller code clean Adds small performance overhead
Centralizes logic like logging and error handling Needs careful design to avoid conflicts between filters
Reusable across multiple controllers Too many filters can make debugging tricky



---

💼 Business Impact

✅ Improves application stability by handling exceptions globally.

✅ Makes logging & security checks consistent across all APIs.

✅ Increases maintainability — one filter, reusable in multiple modules.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// What are API Versioning strategies?
Definition (Simple Words)
API Versioning means creating different versions of your API (like v1, v2, etc.) so that:

Old users can continue using old APIs, and
New users can enjoy updated or improved APIs.
Think of it like a mobile app update — your old version still works, but the new one has more features.

📘 Example
Let’s say you have a Property Buy & Sell App, and your backend API exposes this endpoint:

GET /api/properties
Now, in the next update, you added a new feature (extra filter for location and price).
So you can version your API like this:

GET /api/v1/properties     → old version (basic list)
GET /api/v2/properties     → new version (advanced filter support)
This helps you avoid breaking old apps that are still using v1.

⚙️ Main API Versioning Strategies
There are 4 common ways to do versioning:

Strategy	Example	Description
1️⃣ URL Path Versioning	/api/v1/properties	Easiest and most common — version is part of the URL.
2️⃣ Query String Versioning	/api/properties?version=1.0	Version is passed as a query parameter.
3️⃣ Header Versioning	Add header: api-version: 1.0	Version info is passed inside HTTP header. Cleaner URL.
4️⃣ Media Type Versioning	Accept: application/json; version=1.0	Advanced method; version embedded in request type.
🏗️ Project Use (Buy & Sell Properties App)
In your Buy & Sell Properties App, you can use versioning like this:

v1 → Used by mobile app for listing basic property details.
v2 → Used by admin panel to get property + seller + price filters.
v3 → Used by new mobile version that supports map-based search.
This ensures smooth upgrades without breaking the existing app users.

⚖️ Trade-offs
Advantage	Disadvantage
✅ Old clients keep working	❌ Need to maintain multiple versions
✅ Easy to roll out new features	❌ More testing required per version
✅ Clean migration path	❌ Slightly more API code to manage
💼 Business Impact
📈 User Experience: No downtime for old users when new APIs are launched.
🔄 Smooth Upgrades: Developers can safely deploy new features.
🔒 Backward Compatibility: Enterprise clients don’t lose functionality suddenly.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Tarun Kumar 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////https://www.linkedin.com/in/tarun-kumar-480601184/recent-activity/all/
Most Frequently Asked .NET Full Stack Interview Questions(covering .NET MVC, .NET Core, Web API, EF Core, SQL Server, Angular)


3. Difference between TempData, ViewData, ViewBag.
4. What is Routing in MVC vs .NET Core?
5. Explain Model Binding and Validation.
6. What is Middleware in ASP.NET Core?
7. Difference between Authentication vs Authorization.
8. Explain JWT Authentication & Authorization flow.
9. How to implement Caching (In-Memory, Distributed, Redis).
10. What are API Versioning strategies?
---
🔹 Entity Framework Core
1. What is DbContext?
2. Explain Code-First vs Database-First.
3. What are Migrations in EF Core?
4. Difference between Eager Loading vs Lazy Loading vs Explicit Loading.
5. Explain Change Tracking in EF Core.
6. What is the difference between AsNoTracking() vs Tracking queries?
7. How to implement Transactions in EF Core?
8. What is Concurrency Handling in EF Core?
---
🔹 SQL Server
1. What are ACID properties of a transaction?
2. Difference between Clustered vs Non-Clustered Index.
3. Explain Stored Procedure vs Function.
4. Difference between Inner Join, Left Join, Right Join, Cross Join.
5. What is a CTE (Common Table Expression)?
6. How do Indexes improve performance?
7. Difference between Normalization vs Denormalization.
8. What are Transactions and Isolation Levels?
9. How to optimize SQL queries?
10. Explain Deadlock and how to handle it.
---
🔹 Angular
1. Difference between AngularJS vs Angular.
2. What are Components, Directives, Modules, Services?
3. Explain Data Binding types (Interpolation, Property Binding, Event Binding, Two-way Binding).
4. Difference between ngIf vs hidden.
5. What is Dependency Injection in Angular?
6. What is RxJS (Observables, Subject, BehaviorSubject)?
7. Explain Routing & Route Guards (AuthGuard, CanActivate, CanDeactivate).
8. What are Pipes? Difference between Pure vs Impure pipes.
9. What is Change Detection in Angular?
10. Difference between Template-driven forms vs Reactive forms.
---
These are the most commonly repeated questions.


/////////////////////////////////////////////////////////////////////
Ultimate .NET Interview Questions – Freshers to Seniors 🚀
Preparing for a .NET Developer Interview?

 Here’s your complete .NET Roadmap with questions covering C#, ASP.NET Core, MVC, Web API, and SQL Server — from Freshers → Intermediate → Senior 👇

🔹 1️⃣ Entry / Freshers

📌 C# / .NET Basics
 ✅ .NET Framework vs .NET Core / .NET 5+
 ✅ OOP concepts with real C# examples
 ✅ Garbage Collection in .NET
 ✅ Exception handling in C#
 ✅ == vs .Equals(), ref vs out parameters
 ✅ Boxing & Unboxing
 ✅ Value type vs Reference type

📌 MVC / Web Basics
 ✅ MVC pattern – Controller, Action, View
 ✅ Razor View vs ASPX
 ✅ ViewBag vs ViewData vs TempData

📌 SQL Server
 ✅ Primary Key vs Foreign Key
 ✅ INNER JOIN vs LEFT JOIN vs RIGHT JOIN
 ✅ Stored Procedure basics
 ✅ Clustered vs Non-Clustered Index

🔹 2️⃣ Intermediate

📌 C# / .NET Core
 ⚡ Dependency Injection & why it matters
 ⚡ IEnumerable vs IQueryable
 ⚡ Async / Await implementation
 ⚡ Task vs Thread

📌 MVC / Web API
 ⚡ Routing in MVC & Web API
 ⚡ RESTful API in .NET Core
 ⚡ IActionResult vs ActionResult
 ⚡ Model Binding & Validation

📌 SQL Server
 ⚡ Stored Procedure vs Function vs Trigger
 ⚡ Transactions & ACID properties
 ⚡ Query Optimization with Indexes & Execution Plans
 ⚡ Entity Framework vs ADO.NET

🔹 3️⃣ Advanced / Senior

📌 Architecture / .NET Advanced
 🔥 Designing scalable & fault-tolerant applications
 🔥 Middleware Pipeline in ASP.NET Core
 🔥 Caching strategies (MemoryCache, Redis)
 🔥 Logging, Monitoring & Exception Handling in Production

📌 Web API / MVC
 🛡 Securing APIs with JWT, OAuth, Claims-based Auth
 🛡 API Versioning best practices
 🛡 Async Endpoints for high performance
 🛡 Microservices architecture in .NET

📌 SQL Server / DB Design
 🗄 Normalized DB design for large applications
 🗄 SQL Server vs NoSQL in enterprise solutions
 🗄 Handling Concurrency & Deadlocks
 🗄 Business logic with Stored Procedures, Triggers & Views

💡 Pro Tips:
 ✨ Freshers → OOP, MVC basics, SQL queries
 ✨ Intermediate → EF Core, async programming, DB optimization
 ✨ Senior → Architecture, CI/CD, Performance tuning, Secure APIs
🔗 Over to you:
 👉 Which .NET interview question challenged you the most?
 💬 Drop it in the comments — let’s learn together!

///////////////////////////////////////////////////////////////////////////////////
op 10 Most Asked .NET / Web API Interview Questions

Preparing for your next ASP.NET Core / Web API interview?
Here are some of the most frequently asked questions that can help you brush up your concepts 👇

⸻

🔟 Top 10 Questions

1️⃣ What is the difference between IActionResult and ActionResult in ASP.NET Core?

2️⃣ How does Dependency Injection (DI) work in .NET Core?

3️⃣ Explain the difference between HttpGet, HttpPost, HttpPut, and HttpDelete in Web API.

4️⃣ What is Middleware in ASP.NET Core? Can you create a custom middleware?

5️⃣ How does Routing work in Web API? What’s the role of [Route] and [Http…] attributes?

6️⃣ What are Filters in ASP.NET Core? Explain the types (Authorization, Action, Exception, etc.).

7️⃣ How do you implement Token-based authentication using JWT in Web API?

8️⃣ Difference between Synchronous vs Asynchronous methods in .NET API? Why prefer async?

9️⃣ What is Model Binding and Model Validation in ASP.NET Core?

🔟 How do you secure your Web API? Mention best practices.


////////////////////////////////////////////////////////////////////////////////////////////////////
My Friend: DSA is tough.
Me: Not for me. I follow the 3-7-15 Rule. 
But let me be honest —
It wasn’t always this way.
I used to forget what I solved just a week ago.
The problem wasn’t practice.
It was retention.
That’s when I created the 3-7-15 Rule 👇

Solve a question 4 times:
✅ First time — Understand and solve it
✅ After 3 days — Solve it again to remember
✅ After 7 days — Solve it once more to get better
✅ After 15 days — Solve it one last time to make it stick in your mind
By the 4th time, your brain stops panicking.
You recognize patterns instantly.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
Dot .NET C# Developer Interview Coding Questions

In recent interviews at companies like TCS, Infosys, Wipro, Accenture, Capgemini, Cognizant, and HCL, I noticed that many coding questions repeat — especially for .NET Developer roles using C#.

These questions focus on logic building, DSA basics, and problem-solving — perfect for freshers and early-career professionals.

Top 20 C# Coding Questions Asked in Interviews:

 1. Write a program to reverse a string without using in-built functions.
 2. Check if a number is Prime.
 3. Find the factorial of a number using recursion.
 4. Count the number of vowels and consonants in a string.
 5. Find the second largest element in an array.
 6. Write a program to check for Palindrome (number or string).
 7. Print Fibonacci series up to N terms (recursive and iterative).
 8. Sort an array using Bubble Sort.
 9. Find duplicate elements in an array.
10. Write a program to find the GCD of two numbers.
11. Swap two numbers without using a temporary variable.
12. Check if two strings are anagrams.
13. Write a program to find the missing number in an array of 1 to N.
14. Find the frequency of characters in a string.
15. Check if a number is Armstrong.
16. Merge two sorted arrays.
17. Left rotate an array by D positions.
18. Find the first non-repeating character in a string.
19. Write a program to implement Linear Search and Binary Search.
20. Convert binary number to decimal and vice versa.
21. Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. 

Practice each question in C#

Comment ,Like Share




/////////////////////////////////////////////////////////////////////////////////////
🧠 Understanding .NET Memory Management – A Must-Have Skill for Every Developer

Memory management in .NET is one of those behind-the-scenes topics that often gets overlooked—until it starts causing real problems in production.

Whether you're just starting out or have years of experience, knowing how .NET handles memory can help you write cleaner, more efficient, and more reliable code.

🔹 So, what exactly happens under the hood?

.NET uses a Garbage Collector (GC) to manage memory automatically. It allocates memory for your objects on the managed heap and periodically clears up unused ones. But it’s not magic—GC only collects objects that are no longer referenced.

🔹 The heap is divided into three generations:
Gen 0: Short-lived objects (like local variables)
Gen 1: Medium lifespan
Gen 2: Long-lived objects (like app-wide caches)


💡 Real-scenario:

In one of our enterprise applications, we noticed performance degradation after each deployment. Initially, the app was responsive, but over time, it slowed down significantly—even without any increase in load.

After some profiling, we found the culprit: unsubscribed event handlers.

A background service was subscribing to an event but never unsubscribing, keeping large objects alive in memory even though they were no longer needed.

 The Garbage Collector couldn’t clean them up because references still existed.

✅ The fix? We implemented proper event unsubscription and moved to WeakReference where appropriate. Memory usage stabilized, and performance improved noticeably.


🔍 Key Takeaways:

Always dispose unmanaged resources (IDisposable, using)
Unsubscribe from events when no longer needed
Avoid static references to large objects
Use memory profiling tools like dotMemory, Visual Studio Diagnostics, or JetBrains Rider


📣 To freshers: Start developing good habits early. Learn about GC, and avoid memory leaks before they happen.

📣 To experienced devs: Don’t assume GC will solve everything. Real-time monitoring and profiling are your best friends.

Let’s build .NET apps that are not just functional—but also smart and sustainable. 🔧

What memory management challenges have you faced in .NET?

/////////////////////////////////////////////////////////////////////////////////////////////////////////
📌 Top 20 SQL Interview Questions:
👉 What’s the difference between WHERE and HAVING clause?
👉 Explain different types of JOINs with examples.
👉 Difference: Primary Key vs Unique Key vs Foreign Key.
👉 INNER JOIN vs LEFT/RIGHT/FULL OUTER JOIN.
👉 DELETE vs TRUNCATE vs DROP.
👉 What is a View? Can we update it?
👉 Clustered vs Non-Clustered Index.
👉 What is a CTE? How does it differ from subqueries?
👉 Use of ROW_NUMBER(), RANK(), DENSE_RANK().
👉 What is Normalization? Different Normal Forms?
👉 What’s a Stored Procedure? How is it different from a Function?
👉 How to find the second highest salary in SQL?
👉 What is a Transaction? What are ACID properties?
👉 Common aggregate functions: SUM(), AVG(), etc.
👉 Difference between IN, EXISTS, and ANY.
👉 ISNULL() vs COALESCE() — which to use when?
👉 What are Subqueries? When to use them vs JOINs?
👉 Temporary Table vs Table Variable.
👉 What is an Index? When and why to create one?
👉 How to optimize a slow-running SQL query?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 🔹 1. .NET Core vs .NET Framework
 🔹 2. Explain MVC Architecture
 🔹 3. What is Dependency Injection?
 🔹 4. What is Middleware?
 🔹 5. How does Routing work?
 🔹 6. AddSingleton vs AddScoped vs AddTransient
 🔹 7. Role of Startup.cs
 🔹 8. What is Entity Framework Core?
 🔹 9. Model Binding explained
 🔹 10. Tag Helpers vs HTML Helpers
 🔹 11. What is a ViewModel?
 🔹 12. Types of Filters in MVC Core
 🔹 13. ViewData vs ViewBag vs TempData
 🔹 14. What is Kestrel Web Server?
 🔹 15. IActionResult vs ActionResult
 🔹 16. Exception Handling approaches
 🔹 17. Razor Pages vs MVC
 🔹 18. Authentication & Authorization
 🔹 19. Consuming Web APIs via HttpClient
 🔹 20. Configuration using appsettings.json & IConfiguration



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
𝐀𝐝𝐝𝐒𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧 vs 𝐀𝐝𝐝𝐒𝐜𝐨𝐩𝐞𝐝 vs 𝐀𝐝𝐝𝐓𝐫𝐚𝐧𝐬𝐢𝐞𝐧𝐭 in C# Dependency Injection
Do you really know the difference? 

Whenever a service is requested, the DI Container must decide:
 ➡️ Create a new instance?
 ➡️ Or reuse an existing one?

That decision depends on the lifetime defined when you register the service.
Here’s a quick refresher:
𝐀𝐝𝐝𝐒𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧
• A single instance is created the first time it's requested (or during ConfigureServices if specified).
• The same instance is used throughout the application's lifetime.

𝐀𝐝𝐝𝐒𝐜𝐨𝐩𝐞𝐝
• A new instance is created once per request.
• Ideal for web apps where services share state per HTTP request.

𝐀𝐝𝐝𝐓𝐫𝐚𝐧𝐬𝐢𝐞𝐧𝐭
• A new instance every time the service is requested.
• Best for lightweight, stateless operations.

When to Use What?
✔️ Use Transient for short-lived, stateless services.
 ✔️ Use Scoped when you want to maintain state within a request.
 ✔️ Use Singleton for app-wide services like logging, caching, and configuration.

Making the right choice can improve performance and prevent memory issues.

 What’s your default choice and why? Let’s discuss!
hashtag

///////////////////////////////////////////////////////////////////////////////////////////////////////////
✅ Top 50 Angular Interview Questions (2024-2025)

🚀 Asked in MNCs like TCS, Infosys, Accenture, Capgemini, Wipro & more!

📌 Whether you're a beginner or experienced dev preparing for Angular interviews, these 50 most frequently asked questions will help you crack real-world rounds with confidence! 💯

🟢 Basics & Fundamentals
What is Angular and how is it different from AngularJS?
Key features of Angular?
What are Components in Angular?
What is a Module in Angular?
What is Data Binding and its types?
Interpolation vs Property Binding
What is Event Binding?
How is Two-Way Binding implemented?
Role of ngModel
What is Angular CLI?

🟡 Directives
What are Directives in Angular?
Structural vs Attribute Directives
*ngIf vs *ngFor vs *ngSwitch
How to create a custom directive?
Use of ngClass and ngStyle

🟣 Services & Dependency Injection
What are Services in Angular?
What is Dependency Injection?
How to create & inject a service?
Use of @Injectable() & providedIn: 'root'

🔵 Routing & Navigation
What is Angular Routing?
How to configure routes?
Use of routerLink & router-outlet
What are route guards (CanActivate, CanDeactivate)?
Route parameters & navigation
Lazy loading modules

🟠 Forms in Angular
Template-Driven vs Reactive Forms
Creating a form using FormBuilder
Form validation (default & custom)
What is FormGroup, FormControl, FormArray?
Dynamic form controls (add/remove)

🔴 HTTP & APIs
Making HTTP requests
Use of HttpClientModule
Error handling via HttpInterceptor
Observables vs Promises
Cancelling HTTP requests

🟤 Advanced Concepts
What is Change Detection in Angular?
Lifecycle hooks: ngOnInit, ngOnChanges, ngAfterViewInit
Difference between ViewChild & ContentChild
Subject vs BehaviorSubject vs ReplaySubject
Performance optimization techniques

⚫ Real-Time Use Cases
Search with debounce time
Dynamic forms from API data
Sharing data between unrelated components
State management (without NgRx)
Role-Based Access Control (RBAC)

⚪ Testing & Best Practices
Testing components/services with Jasmine/Karma
What is TestBed?
Angular performance best practices
AOT (Ahead-of-Time) compilation
Securing Angular apps

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
🔥 **Top 50 Web API Interview Questions**

for .NET Developers 👨‍💻👩‍💻

Are you preparing for interviews in **.NET / ASP.NET Core Web API**?
These **frequently asked questions** will help you **crack your next tech round** confidently! 💥

📌 **Basics of Web API**

▪️ What is Web API?
▪️ Difference between Web API and WCF?
▪️ Difference between Web API and REST API?
▪️ What are the HTTP methods supported in Web API?
▪️ What is REST? Key principles?
▪️ PUT vs PATCH – what's the difference?
▪️ Common HTTP status codes?
▪️ 200 OK vs 201 Created vs 204 No Content
▪️ 400 Bad Request vs 404 Not Found
▪️ What is Media Type Formatter?

🧭 **Routing & Versioning**

▪️ What is attribute routing in Web API?
▪️ What is convention-based routing?
▪️ How to implement API versioning in ASP.NET Core?
▪️ URL vs Header versioning – what’s better?
▪️ How to restrict routes to specific HTTP methods?

🔐 **Authentication & Authorization**

▪️ How to implement token-based authentication in Web API?
▪️ What is OAuth2 and how is it implemented?
▪️ How is JWT used in Web API authentication?
▪️ Authentication vs Authorization?
▪️ Best practices to secure Web API endpoints?

⚙️ **Dependency Injection & Middleware**

▪️ How does Dependency Injection (DI) work in Web API?
▪️ AddTransient vs AddScoped vs AddSingleton
▪️ How to inject services into controllers?
▪️ What is middleware in ASP.NET Core?


🗃️ **Data Handling & Model Binding**

▪️ What is Model Binding?
▪️ What is Model Validation?
▪️ Use of `[FromBody]`, `[FromQuery]`, `[FromRoute]`
▪️ `IHttpActionResult` vs `HttpResponseMessage`
▪️ How to return custom error responses?
▪️ How to handle exceptions globally?

🧩 **Filters & Action Results**

▪️ What are Action Filters in Web API?
▪️ Types of Filters in ASP.NET Core
▪️ How to create custom Action Filters?
▪️ Using middleware for exception handling?

🔄 **Serialization & Formatting**

▪️ How is serialization handled in Web API?
▪️ How to return JSON or XML?
▪️ How to customize JSON formatting?

📁 **File Upload / Download**

▪️ How to upload files via Web API?
▪️ How to return a file for download?

🧪 **Testing & Debugging**

▪️ How to test Web API using Postman?
▪️ How to write unit tests for controllers?
▪️ What is Swagger / OpenAPI?
▪️ How to enable CORS in Web API?
▪️ What is the purpose of `[ApiController]` attribute?

🔍 **Advanced Topics**

▪️ What is throttling in Web API?
▪️ How to implement rate limiting?
▪️ What is HATEOAS?
▪️ What is the Repository Pattern?
▪️ Synchronous vs Asynchronous in Web API
▪️ How to improve performance & scalability?

🔖 **Follow me for more tech content** on
.NET | Angular | C# | SQL | Web API


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
🔹 .NET Full Stack Developer Interview Questions (With Core Topics Across Backend, Database, and Frontend)
hashtag#FullStackDeveloper hashtag#DotNetCore hashtag#Angular hashtag#SQLServer hashtag#InterviewPrep hashtag#LinkedInTech

If you're preparing for a .NET Full Stack Developer role or mentoring someone who is, here’s a solid list of interview-ready questions across the stack:


---

✅ .NET Framework / .NET Core / ASP.NET Core

1️⃣ What is the difference between a value type and a reference type in .NET?
2️⃣ Explain the role of the Garbage Collector in .NET Framework.
3️⃣ What are the different types of assemblies in .NET?
4️⃣ How does the AppDomain work and when is it used?
5️⃣ Key differences between .NET Framework and .NET Core.
6️⃣ What is Middleware in ASP.NET Core and how does it work?
7️⃣ How is Dependency Injection implemented in ASP.NET Core?
8️⃣ What is the purpose of appsettings.json in configuration?
9️⃣ What is the life cycle of an ASP.NET MVC request?
🔟 Difference between TempData, ViewData, and ViewBag?
1️⃣1️⃣ How do you implement security in an MVC application (Authentication/Authorization)?
1️⃣2️⃣ What is a partial view and when should you use one?


---

✅ SQL Server (Backend DB Layer)

1️⃣3️⃣ Write a SQL query to find the second highest salary from an Employee table.
1️⃣4️⃣ Difference between INNER JOIN, LEFT JOIN, and FULL JOIN.
1️⃣5️⃣ What are indexes and how do they improve query performance?
1️⃣6️⃣ How to optimize a slow-performing stored procedure?


---

✅ Angular (Frontend)

1️⃣7️⃣ Difference between ngOnInit() and constructor() in Angular components.
1️⃣8️⃣ Explain types of data binding in Angular (One-way, Two-way, Event, Property).
1️⃣9️⃣ What are services in Angular and how do you inject them?
2️⃣0️⃣ What is lazy loading in Angular and what are its performance benefits?


---

💡 These questions are often asked in technical rounds and help assess both conceptual depth and real-world application. If you’re a job seeker or mentor, this list is your quick-glance revision and discussion starter.


///////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////Revisition
///////////////////////////////////////////////////////////////
🎯 Top .NET Core MVC Interview Questions Asked by TCS, Infosys, Accenture, Capgemini, LTI, Cognizant, Deloitte & More!


✅ 1–10: Basics of .NET Core MVC
1. What is .NET Core and how is it different from .NET Framework?
2. What is ASP.NET Core MVC?
3. What is Middleware in .NET Core?
4. What is the role of Startup.cs file in ASP.NET Core?
5. What is the use of appsettings.json? How do you read values from it?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6. What is the difference between IActionResult and ActionResult<T>?
 1️⃣ Definition (in easiest words)

IActionResult → It is an interface that represents the result of an action method (like Ok(), NotFound(), BadRequest() etc.).
✅ You use it when your action can return multiple result types.

ActionResult<T> → It is a generic version of ActionResult that can return both a specific data type (T) and HTTP status results like Ok() or NotFound().
✅ You use it when your action returns data (like a model or DTO) and also status codes.



---

🧠 2️⃣ Example

Using IActionResult

[HttpGet("{id}")]
public IActionResult GetProperty(int id)
{
    var property = _propertyService.GetPropertyById(id);
    
    if (property == null)
        return NotFound(); // 404

    return Ok(property); // 200 with data
}

Here, you return Ok() or NotFound(), both are different IActionResults.


---

Using ActionResult<T>

[HttpGet("{id}")]
public ActionResult<PropertyDto> GetProperty(int id)
{
    var property = _propertyService.GetPropertyById(id);

    if (property == null)
        return NotFound(); // 404

    return property; // automatically wraps in Ok()
}

Here, ActionResult<PropertyDto> can return either:

PropertyDto → data with 200 status, or

NotFound() → 404 status.


So, it’s type-safe and cleaner.


---

💼 3️⃣ Project Use (Buy & Sell Property App)

In your Buy & Sell Property Application,
you can use:

IActionResult when you want to just return status — for example:

[HttpPost]
public IActionResult DeleteProperty(int id)
{
    bool deleted = _propertyService.Delete(id);
    if (!deleted)
        return NotFound();
    return NoContent();
}

ActionResult<PropertyDto> when you want to return property details or error:

[HttpGet("{id}")]
public ActionResult<PropertyDto> GetProperty(int id)
{
    var property = _propertyService.GetById(id);
    if (property == null)
        return NotFound("Property not found");
    return property;
}



---

⚖️ 4️⃣ Trade-offs

Feature IActionResult ActionResult<T>

Return data with type safety ❌ No ✅ Yes
Return multiple types (OK, NotFound) ✅ Yes ✅ Yes
Easy unit testing ❌ Less easy ✅ Easier (strongly typed)
Modern ASP.NET Core practice ⚠️ Legacy style ✅ Recommended



---

💡 5️⃣ Business Impact

✅ Makes API responses consistent and predictable
✅ Improves client integration (Angular or React apps get clear data types)
✅ Reduces runtime errors, increasing stability and maintainability
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7. Explain the MVC architecture and how it works in ASP.NET Core.

Perfect, Abhishek 👏

Here’s how you can explain MVC architecture in ASP.NET Core confidently in an interview for a 7 years experienced .NET full stack developer — with clear technical points + real-world explanation 👇


---

🧩 Definition (Simple + Professional)

MVC stands for Model–View–Controller — it’s an architectural design pattern used to separate an application into 3 main parts:

1. Model → Handles the data and business logic.


2. View → Handles the UI (what user sees).


3. Controller → Handles user input and connects Model and View.



It helps in separation of concerns, easy testing, and better maintainability.


---

⚙️ How It Works (Flow)

Let’s see how MVC works step-by-step in ASP.NET Core:

1. User Request → Controller

A user types a URL or clicks a button.

The request first goes to the Controller.

Example: PropertyController.



2. Controller → Model

The controller asks the Model (C# classes) to get or update data from the database via Entity Framework / ADO.NET.

Example: PropertyService.GetAllProperties().



3. Model → Database → Model

The model fetches data (like property listings or user details) and returns it to the controller.



4. Controller → View

The controller passes this data to the View (a .cshtml page).

Example: return View(propertyList);



5. View → User

The view displays the data in a user-friendly format — HTML + Razor syntax.





---

🏠 Project Use (Buy & Sell Properties App)

In your Property Buy & Sell Application:

Model: Property, User, Transaction classes — these represent tables in the database.

View: Razor pages showing property listings, details, and dashboards.

Controller: PropertyController, AccountController, etc., handle user actions (buy, sell, search).


📘 Example:

public class PropertyController : Controller
{
    private readonly IPropertyService _service;

    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    public IActionResult Index()
    {
        var properties = _service.GetAllProperties();
        return View(properties);
    }
}


---

⚖️ Trade-offs

Advantage Disadvantage

Easy to maintain and test due to separation of concerns Can be overkill for very small apps
Multiple developers can work in parallel (UI, Business, DB) More files and structure to manage
Promotes clean architecture Requires understanding of request flow



---

💼 Business Impact

✅ Faster development in large teams
✅ Better code organization → fewer bugs
✅ Easy to extend — e.g., adding new modules like Payments or Notifications without breaking old ones
✅ Improves scalability and maintainability

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8. What is Dependency Injection in ASP.NET Core?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9. What are the different types of dependency injection lifetimes?
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////10. What is the use of ConfigureServices and Configure methods?
Definition (Simple + Technical)

In ASP.NET Core, the Startup class (or in .NET 6/7/8 the Program.cs file) has two main methods:

🔹 ConfigureServices(IServiceCollection services)

Used to register services that your app will use (like dependency injection setup).

Example: adding database contexts, authentication, logging, caching, etc.

Basically, you tell .NET what you’ll need in your app.


🔹 Configure(IApplicationBuilder app, IWebHostEnvironment env)

Used to configure the HTTP request pipeline.

This defines how a request travels through middleware (e.g., logging → authentication → routing → controller).

Basically, you tell .NET how to handle every request.



---

💻 2️⃣ Example Code (.NET 8 minimal setup)

var builder = WebApplication.CreateBuilder(args);

// ConfigureServices equivalent
builder.Services.AddControllers();
builder.Services.AddDbContext<AppDbContext>();
builder.Services.AddAuthentication();
builder.Services.AddMemoryCache();

var app = builder.Build();

// Configure equivalent
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();

In older versions (.NET 5 or lower), this same logic was split into the Startup.cs file with both ConfigureServices and Configure methods.


---

🏢 3️⃣ Project Use — Buy & Sell Properties App

In your Buy & Sell Properties Application:

In ConfigureServices, you can register:

services.AddDbContext<PropertyDbContext>();
services.AddScoped<IPropertyService, PropertyService>();
services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(...);
services.AddCors(options => { ... });

In Configure, you can define:

app.UseCors("AllowSpecificOrigin");
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();


✅ So, when a user sends a request (like /api/properties), it passes through: CORS → Authentication → Authorization → Controller → Response.


---

⚖️ 4️⃣ Trade-offs

Pros Cons

Clean separation of service setup and pipeline Must understand middleware order carefully
Highly testable and maintainable Mistakes in configuration can break authentication/routing
Easy dependency injection Complex in large apps if not organized



---

💼 5️⃣ Business Impact

Makes your app scalable and configurable without rewriting code.

Helps manage features like authentication, logging, and CORS easily.

In large apps (like your Buy/Sell platform), it ensures smooth communication between frontend (Angular) and backend (.NET) via consistent middleware setup.



---

✅ Interview Short Answer:

> "ConfigureServices is used to register dependencies and app services like DB, caching, and authentication.
Configure is used to define how requests are handled through middleware like routing, authentication, and exception handling.
Together, they define the setup and execution flow of a .NET Core app."


///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////✅ 11–20: Routing and Controllers

////////////////////////////////////////////////////////////////////////////////////////////////////////////////13. How do you define custom routes in ASP.NET Core MVC?
Definition (In Easy Words)

Custom routing in ASP.NET Core MVC means defining your own URL patterns instead of using the default ones.

By default, ASP.NET Core uses this route pattern:

/{controller=Home}/{action=Index}/{id?}

But in custom routing, we can create meaningful URLs like:

/buy/property/101  
/sell/property/new

This helps in SEO, user readability, and better organization.


---

⚙️ Code Example – Custom Route Definition

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddControllersWithViews();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
            app.UseDeveloperExceptionPage();

        app.UseRouting();

        app.UseEndpoints(endpoints =>
        {
            // ✅ Custom Route 1: For Property Details
            endpoints.MapControllerRoute(
                name: "propertyDetails",
                pattern: "property/details/{id:int}",
                defaults: new { controller = "Property", action = "Details" });

            // ✅ Custom Route 2: For Admin Dashboard
            endpoints.MapControllerRoute(
                name: "adminRoute",
                pattern: "admin/dashboard",
                defaults: new { controller = "Admin", action = "Dashboard" });

            // ✅ Default Route
            endpoints.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");
        });
    }
}


---

🏗 Project Use — Buy & Sell Property Application

In your Buy & Sell Property App,
you can use custom routing for:

/buy/property/{id} → For buyer property details

/admin/manage/users → For admin panel management

/seller/dashboard → For seller login area


Example:

endpoints.MapControllerRoute(
    name: "buyerProperty",
    pattern: "buy/property/{id:int}",
    defaults: new { controller = "Property", action = "Details" });

✅ It makes URLs clean, SEO-friendly, and easier for users to remember.


---

⚖️ Trade-offs

Advantage Disadvantage

Custom URLs improve SEO and readability You must maintain consistency for all custom routes
Helps in organizing complex modules Complex apps need route versioning/testing
Improves security by hiding real controller/action names Slightly more configuration overhead



---

💼 Business Impact

Clean URLs improve user experience and search engine ranking.

Helps customers find properties faster via shareable links.

Reduces confusion for marketing and analytics tracking.



---

🎯 Interview-Ready Summary

> “In my project, we define custom routes in Startup.cs using MapControllerRoute.
For example, in our Buy & Sell Property app, we have routes like /buy/property/{id} for buyers and /admin/dashboard for admins.
It improves SEO, gives clean URLs, and helps in modular structure of the app.”

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////14. What are filters in ASP.NET Core? Types of filters?
15. What is the difference between TempData, ViewData, and ViewBag?
16. What is Model Binding in ASP.NET Core MVC?
17. How does model validation work in ASP.NET Core?
18. Explain how to use DataAnnotations for validation.
19. What is ModelState.IsValid?
20. What is the use of BindProperty attribute?

✅ 21–30: Views, Razor and Tag Helpers
21. What is Razor view engine?
22. What are Tag Helpers? How are they different from HTML Helpers?
23. How do you create a strongly-typed view in ASP.NET Core?
24. How do you use layout pages in Razor Views?
25. What are Partial Views and how to use them?
26. How to pass data from controller to view?
27. What is \_ViewStart.cshtml and \_ViewImports.cshtml?
28. How do you implement custom tag helpers?
29. What is the difference between synchronous and asynchronous actions in controllers?
30. How do you handle form submission in Razor Pages?

✅ 31–40: Advanced Topics
31. What is Middleware Pipeline in ASP.NET Core?
32. Explain Exception Handling in ASP.NET Core MVC.
33. What are custom middleware and how to create one?
34. What is the use of IApplicationBuilder and IServiceCollection?
35. How to implement Authentication and Authorization in ASP.NET Core?
36. What are Claims and Policies in Authorization?
37. What is Identity in ASP.NET Core?
38. How do you secure sensitive data in your appsettings.json file?
39. What is the User.Identity.Name used for?
40. What is CORS and how to enable it in .NET Core?

Follow for more such content on .NET Core, Angular, and Full Stack interview prep!

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Top 50 Full Stack Developer Interview Questions**, Mostly asked in MNCs like Deloitte, Accenture, Capgemini, LTI Mindtree, Cognizant, Infosys, Wipro, TCS, and HCL

#### 💾 **SQL (10 Questions)**

1. Difference between `INNER JOIN`, `LEFT JOIN`, and `RIGHT JOIN`?
2. Explain normalization – 1NF, 2NF, 3NF.
3. `WHERE` vs `HAVING` clause.
4. What is a `CTE`?
5. Find the second highest salary.
6. `DELETE` vs `TRUNCATE` vs `DROP`.
7. What are indexes?
8. Stored procedures & use-cases.
9. Transactions in SQL.
10. Optimizing slow queries.

#### 🎯 **ASP.NET MVC (10 Questions)**

11. MVC architecture fundamentals.
12. `ActionResult` vs `ViewResult`.
13. Routing in MVC.
14. Razor View Engine.
15. `TempData`, `ViewData`, `ViewBag`.
16. What is a Partial View?
17. Implementing validation in MVC.
18. `Html.Partial` vs `Html.RenderPartial`.
19. Dependency Injection in MVC.
20. MVC vs WebForms.

#### 🔧 **ASP.NET Core MVC (10 Questions)**

21. Middleware in Core.
22. Purpose of `Startup.cs`.
23. Logging in ASP.NET Core.
24. `appsettings.json` configuration.
25. API security in Core.
27. Dependency Injection in Core.
28. Model Binding vs Validation.
29. Endpoint Routing.
30. Global Exception Handling.

#### 🌐 **Web API / .NET Core Web API (10 Questions)**

31. What is REST API?
32. HTTP Status Codes meaning.
33. API versioning methods.
34. Attribute Routing.
35. Returning JSON from APIs.
36. API testing in Angular/Postman.
37. Swagger integration.
38. What is CORS?
39. Web API Exception Handling.
40. API security best practices.

#### ⚡ **Angular (10 Questions)**

41. What is Angular?
42. Components in Angular.
43. Data Binding types.
44. Structural vs Attribute Directives.
45. Services in Angular.
46. HTTPClient in Angular.
47. Angular Dependency Injection.
48. Observables & RxJS.
49. Angular Routing.
50. Angular Lifecycle Hooks.

////////////////////////////////////////////////////////////////////////////////////
#LTIMindtree .NET Angular Full Stack Developer Interview

Asp .Net

1. What is the difference between .NET Core and .NET Framework?
2. How does dependency injection work in ASP.NET Core?
3. What is the difference between IActionResult and ActionResult<T>?
4. How do you implement Web API versioning in .NET Core?
5. Explain the middleware pipeline order in .NET Core.
6. What’s the use of AsNoTracking in Entity Framework Core?
7. How would you implement soft delete in EF Core?
8. Write a LINQ query to replace all negative values in a column with the column’s max value.
9. How do you optimize a slow SQL stored procedure?
10. Explain different SQL isolation levels.

Angular

11. What are Angular lifecycle hooks?
12. Difference between reactive forms and template-driven forms?
13. How do route guards work in Angular?
14. Observables vs Promises – key differences?
15. How do you handle global API errors in Angular using interceptors?


15. Describe a major production issue you handled.
16. Have you worked in Agile? What was your team structure?
17. Why LTIMindtree?
18. Any experience in cloud/DevOps pipelines?

✅ Save this for your next interview prep!
💬 Share your experience in the comments!

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Infosys .NET Full Stack Developer role

🔹 .NET Framework / .NET Core / ASP.NET Core

1. What is the difference between a value type and a reference type in .NET?


2. Explain the role of the Garbage Collector in .NET Framework.


3. What are the different types of assemblies in .NET?


4. How does the AppDomain work in .NET and when is it used?


5. What are the key differences between .NET Framework and .NET Core?


6. What is Middleware in ASP.NET Core and how does it work?


7. How is Dependency Injection implemented in ASP.NET Core?


8. What is the purpose of the appsettings.json file?


9. What is the life cycle of an ASP.NET MVC request?


10. What is the difference between TempData, ViewData, and ViewBag?


11. How do you implement security in an MVC application?


12. What is a partial view and when should it be used?



🔹 SQL Server

13. Write a SQL query to find the second highest salary from an Employee table.


14. What is the difference between INNER JOIN, LEFT JOIN, and FULL JOIN?


15. What are indexes and how do they impact performance?


16. How do you optimize a slow-performing stored procedure?



🔹 Angular

17. What is the difference between ngOnInit() and constructor() in Angular?


18. Explain the different types of data binding in Angular.


19. What are Angular services and how are they injected into components?


20. What is lazy loading in Angular and what are its benefits?

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Deloitte .NET Full Stack Developer Interview Questions** 

### ✅ **.NET / .NET Core**

1. What is the difference between .NET Framework and .NET Core?
2. What is Dependency Injection in .NET Core?
3. Explain the concept of Middleware in ASP.NET Core.
4. What is the difference between AddScoped, AddSingleton, and AddTransient?
5. What is the role of Program.cs and Startup.cs in .NET 6/7?
6. How do you handle configuration and logging in .NET Core?

---

### ✅ **ASP.NET MVC**

7. Explain MVC architecture with a real-time project example.
8. Difference between TempData, ViewData, and ViewBag.
10. How does routing work in MVC? Explain attribute routing.

---

### ✅ **SQL Server**

11. Write a SQL query to find the second highest salary.
12. Difference between Clustered and Non-Clustered Index.
13. What is a CTE (Common Table Expression) and its use case?
14. How to delete duplicate records from a table but keep one?
15. Difference between DELETE, TRUNCATE, and DROP in SQL Server.

---

### ✅ **Angular**

16. Difference between Observable and Promise in Angular.
17. Template-driven vs Reactive Forms in Angular.
18. What is an HTTP Interceptor in Angular?
19. What is Change Detection and how does it work in Angular?
20. How do you call and bind REST API data in Angular component?

---

💼 **candidates, save and share this for your interview prep!

//////////////////////////////////////////////////////////////////////////////////////////////
#Wipro .NET Full Stack Developer Interview Questions
-------------------
 .NET
------------------
1.What is the difference between .NET Framework and .NET Core?
2.What is Dependency Injection? How is it implemented in .NET Core?
3.What are Middleware components in ASP.NET Core?
4.Difference between AddScoped, AddSingleton, and AddTransient?
5.How does routing work in ASP.NET Core?
7.Explain MVC architecture with a real-time example.
8.Difference between TempData, ViewData, and ViewBag?
9.What is the use of Partial Views in MVC?
10.What is Model Binding in MVC?
-----------------
 SQL Server
-----------------
1.SQL query to get the second highest salary from a table.
2.Clustered vs Non-Clustered Index in SQL Server?
3.Explain CTE (Common Table Expression) with example.
4.Difference between DELETE, TRUNCATE, and DROP.
5.Methods to remove duplicates from a SQL table.
------------------
 Angular
-----------------
1.Observable vs Promise in Angular – key differences?
2.Reactive vs Template-Driven Forms in Angular?
3.How to implement HTTP Interceptor in Angular?
4.What is Change Detection in Angular and how does it work?
5.How to call a REST API and display data in Angular component?

 Save & Share for revision!
 Comment if you know the answers too.

////////////////////////////////////////////////////////////////////////////////////////////////////
#Deloitte interview questions for both .NET Core Full Stack Developer Posistion.

1. What is Async programming and why is it used?

2. What is the difference between IEnumerable and IQueryable?

3. What is Serialization and why is it used in C#?

4. Explain middleware and how can we create custom middleware in .NET Core?

5. What is the difference between throw and throw ex?

6. What is an extension method in C#?

7. What design patterns are you using in your current project?

8. I have the following API function, what error will it throw?

[HttpGet]
[HttpPut]
public void GetAllUsers() {}

9. What is the difference between PUT and POST?

---------------Angular Questions ----------------

1. What is the use of ngOnInit()?

2. Explain FormBuilder and FormGroup in Angular.

3. How can you show/hide a column in a grid layout based on employee role (admin, manager, candidate)?

4. What are the directives in Angular and how do we use them?

5. Explain pipes in Angular.

--------------------Database Questions:--------------

1. What is the use of temp tables and table variables?

2. If both foreign key and unique key columns are NOT NULL, which is better to use for uniqueness?

3. Write a SQL query to select all users created in the last year and order them by creation date.


🔔 Join me to improve your skills to clean code.

👩‍💻 Please share and repost and help others to code better and clean code.
Follow me 


////////////////////////////////////////////////////////////////////////////////////////////////////
#Accenture Interview questions .Net Full Stack Developer Position.

C# – Foundational Concepts

1. Explain the OOP's in C#.

2. Differentiate between string and StringBuilder in C#, providing a real-time example of when to use each.


3. Compare and contrast Array and ArrayList in C#.


4. Elaborate on the significance and usage of common C# keywords (e.g., var, static, this, base, async, etc.).


5. What is the difference between the const and readonly keywords in C#?


6. Explain the SOLID principles of object-oriented design.


7. Differentiate between the .NET Framework and .NET Core.


8. What is the default access modifier when defining a function within an interface in C#?


9. Explain the differences between an interface and an abstract class in C#.


ASP.NET Core – Architecture and Development

1. What is ASP.NET Core, and what are its primary advantages?


2. How are static files served in an ASP.NET Core application, and where are they typically located in the project structure?


3. Explain the concept of middleware in ASP.NET Core, and provide an example of implementing custom middleware.


4. Why is Cross-Origin Resource Sharing (CORS) used in ASP.NET Core applications?


5. Describe the exception handling mechanisms in ASP.NET Core.


6. Explain the difference between throw and throw ex in C# exception handling.


7. What is a RESTful API, and why is it a popular choice for web service development?


8. Discuss the common return types used in ASP.NET Core Web API actions.


9. Describe how JSON serialization and deserialization work in .NET Core, and list common .NET types mapped to JSON.


10. Between a GET and a POST request, which is generally considered more secure, and why?


11. What is the purpose of the appsettings.json file in a .NET Core application (formerly web.config in older ASP.NET versions)?


12. Why is DbContext used in Entity Framework Core for data access?


13. What is an Object-Relational Mapper (ORM), and why is it beneficial in .NET development?


14. Explain the differences and appropriate use cases for IEnumerable and IQueryable in C#.

Angular – Front-End Development

1. What is a component in Angular, and what is the purpose of each file typically associated with it?


2. Explain the concept of decorators in Angular.


3. Describe the different types of directives in Angular.


4. Explain @Input() and @Output() bindings in Angular.


5. What is the purpose and usage of [(ngModel)] in Angular?


6. What is the role of a service class in Angular applications?


7. Describe the typical data flow from a Web API to an Angular service class. Provide an example of how to inject APIs into a service.


8. Explain Angular component lifecycle hooks, and specifically elaborate on the purpose of ngOnInit().


9. When changing the selected value of a dropdown, which Angular lifecycle hook(s) would typically be executed?.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Advanced SQL Syntax
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Sure! A Stored Procedure in SQL is a precompiled collection of SQL statements that can be executed as a single unit. Stored procedures help improve performance, security, and reusability.


---

1. Basic Syntax of a Stored Procedure

CREATE PROCEDURE ProcedureName
AS
BEGIN
    -- SQL Statements
    SELECT * FROM Employees;
END;

Executing the Procedure:

EXEC ProcedureName;


---

2. Stored Procedure with Input Parameter

CREATE PROCEDURE GetEmployeesByDepartment
    @DeptID INT
AS
BEGIN
    SELECT EmployeeID, FirstName, LastName
    FROM Employees
    WHERE DepartmentID = @DeptID;
END;

Executing the Procedure with a Parameter:

EXEC GetEmployeesByDepartment @DeptID = 3;


---

3. Stored Procedure with Output Parameter

CREATE PROCEDURE GetEmployeeCountByDepartment
    @DeptID INT,
    @EmployeeCount INT OUTPUT
AS
BEGIN
    SELECT @EmployeeCount = COUNT(*) FROM Employees WHERE DepartmentID = @DeptID;
END;

Executing the Procedure with an Output Parameter:

DECLARE @Count INT;
EXEC GetEmployeeCountByDepartment @DeptID = 3, @EmployeeCount = @Count OUTPUT;
PRINT @Count;


---

4. Stored Procedure with Multiple Parameters

CREATE PROCEDURE UpdateEmployeeSalary
    @EmpID INT,
    @NewSalary DECIMAL(10,2)
AS
BEGIN
    UPDATE Employees
    SET Salary = @NewSalary
    WHERE EmployeeID = @EmpID;
END;

Executing the Procedure with Multiple Parameters:

EXEC UpdateEmployeeSalary @EmpID = 101, @NewSalary = 75000.00;


---

5. Stored Procedure with Transactions & Error Handling

CREATE PROCEDURE TransferSalary
    @FromEmpID INT,
    @ToEmpID INT,
    @Amount DECIMAL(10,2)
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        UPDATE Employees SET Salary = Salary - @Amount WHERE EmployeeID = @FromEmpID;
        UPDATE Employees SET Salary = Salary + @Amount WHERE EmployeeID = @ToEmpID;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        PRINT 'Error occurred during transaction.';
    END CATCH;
END;

Executing the Procedure:

EXEC TransferSalary @FromEmpID = 101, @ToEmpID = 102, @Amount = 5000.00;


---

Key Benefits of Stored Procedures:

✔ Performance Improvement – Precompiled SQL code runs faster
✔ Security – Reduces SQL injection risks by parameterized execution
✔ Reusability – Can be used multiple times with different parameters
✔ Transaction Management – Ensures data consistency with COMMIT/ROLLBACK

Would you like an example for dynamic SQL stored procedures as well?




//////////////////////////////////////////////////////////////////
Creating a Custom Trigger in SQL Server

A custom trigger in SQL Server is a database object that automatically executes a predefined action when a specific event (INSERT, UPDATE, DELETE) occurs on a table.


---

Steps to Create a Custom Trigger in SQL Server:

1. Define the event that triggers it (AFTER INSERT, AFTER UPDATE, AFTER DELETE, or INSTEAD OF).


2. Use the INSERTED and DELETED tables to track changes.


3. Implement custom logic inside the trigger.




---

Example 1: Custom Audit Logging Trigger (AFTER INSERT)

This trigger logs every new employee added into an AuditLog table.

Step 1: Create an Audit Log Table

CREATE TABLE AuditLog (
    AuditID INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT,
    ActionType VARCHAR(50),
    ActionDate DATETIME DEFAULT GETDATE()
);

Step 2: Create the Custom Trigger

CREATE TRIGGER trg_AfterInsert_Employees
ON Employees
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (EmployeeID, ActionType)
    SELECT EmployeeID, 'INSERT' FROM INSERTED;
END;


---

Example 2: Prevent Deletion (INSTEAD OF DELETE)

This trigger prevents employees from being deleted but marks them as inactive instead.

CREATE TRIGGER trg_PreventDelete_Employees
ON Employees
INSTEAD OF DELETE
AS
BEGIN
    UPDATE Employees
    SET IsActive = 0
    WHERE EmployeeID IN (SELECT EmployeeID FROM DELETED);
    
    PRINT 'Employees cannot be deleted. They are marked as inactive instead.';
END;


---

Example 3: Track Salary Changes (AFTER UPDATE)

This trigger logs salary changes when an employee's salary is updated.

CREATE TRIGGER trg_TrackSalaryChange
ON Employees
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (EmployeeID, ActionType)
    SELECT d.EmployeeID, 'SALARY UPDATE'
    FROM DELETED d
    JOIN INSERTED i ON d.EmployeeID = i.EmployeeID
    WHERE d.Salary <> i.Salary;
END;


---

How to Test Your Custom Trigger

Run the following SQL commands to check if your triggers work:

INSERT INTO Employees (EmployeeID, Name, Salary, IsActive) VALUES (1, 'John Doe', 50000, 1);
UPDATE Employees SET Salary = 60000 WHERE EmployeeID = 1;
DELETE FROM Employees WHERE EmployeeID = 1;
SELECT * FROM AuditLog; -- View logged actions


---

How to View Existing Triggers

To see all triggers in your database:

SELECT name, object_id, type_desc 
FROM sys.triggers;


---

Would you like a custom trigger for a specific use case in your project?



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////All the question Entity Framework
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////Previous Interview Question
It is their in diffrence sheet.

/////////////////////////////////////////////////Interview Previous
//Introduction
Entity Framework(EF) is an open source object-Relational Mapper(ORM)for .net application.

//Key Feature of Entity Framework
=> Code-First Approach : Define your database structure using c# or VB.Net classes and EF will generate the database schema.

=>Database-First Approaches : Reverse-engine an existing database into a .Net model.
=>Query Support : use LINQ for database operation.

//Why we use Entity Framework
1) Productivity : Eliminate the need to write repetitive SQL Code.

//How does EntityFramework work High Level understanding

Context class : Acts as session to connect with database(e.g DbContext)
Entity Classes:  Represent the table in the coloum.
Linq Query : Translate LInq state into Sql Command.
Database Provider : Hnadle the connection and interaction  with the actual database.

//////////////////////////////Use and Limitations
//Use
-> Rapid application development.
//Limitation
->May not perform as well as raw SQL for highly Complex queries.

//How does EntityFramework work Low Level understanding
1) Model Creation :-> The developer creates entity classes(code-First) or generative Classes from an existing 
database Schema(Database - First).

2) Query Execution : LINQ query or method calls are processed by the Query processor.
The Query processor Convert this into SQL.

////////////////////////////////Implementation (I have already tested)

//Model
 public class Property
 {
     [Key]
     public int Id { get; set; }
     
     public string Title { get; set; }
     
     public string Description { get; set; }
     
     public string Location { get; set; }
    
    
     public int Price { get; set; }

     public DateTime CreateAt { get; set; } = DateTime.Now;

 }

//ApplicationDbContest

   public class ApplicationDbContext : DbContext
   {
       public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
       public DbSet<Property> Property { get; set; }
   }

//Reposetory
 public class PropertyRepository : IProperty
 {
     private readonly ApplicationDbContext _context;

     public PropertyRepository(ApplicationDbContext context)
     {
         _context = context;
     }

     public async Task<IEnumerable<Property>> GetAllPropertyAsync()
     {
         return await _context.Property.ToListAsync();
     }

     public async Task Create(Property property)
     {
         _context.Property.Add(property);
         await _context.SaveChangesAsync();
     }

     public async Task<Property> Edit(int? id)
     {
         return await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
     }

     public async Task Update(Property property)
     {
         var existingProperty = await _context.Property.Where(p => p.Id == property.Id).FirstOrDefaultAsync();
         if (existingProperty != null)
         {
             existingProperty.Title = property.Title;
             existingProperty.Description = property.Description;
             existingProperty.Location = property.Location;
             existingProperty.Price = property.Price;
             await _context.SaveChangesAsync();
         }
     }

     public async Task<Property> GetPropertyById(int? id)
     {
         return await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
     }

     public async Task Delete(int id)
     {
         var property = await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
         if (property != null)
         {
             _context.Property.Remove(property);
             await _context.SaveChangesAsync();
         }
     }

     
 }



////////////////////////////////////////////////////////ChatGpt Question
Beginner-Level Questions

////////////////////////////////////////////////////////1. What is Entity Framework?

Entity Framework(EF) is an open source object-Relational Mapper(ORM)for .net application.


2. What are the different approaches in EF?

=> Code-First Approach : Define your database structure using c# or VB.Net classes and EF will generate the database schema.

=>Database-First Approaches : Reverse-engine an existing database into a .Net model.

Model First



3. What is DbContext and DbSet?

DbContect : Thinks of DbContext as your main connection between your c# code and database.
DbSet<T> represents a table in the database where T is the model/class.

4. What is the difference between Code First and Database First approach?


5. How do you perform CRUD operations in Entity Framework?


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6. What is Lazy Loading, Eager Loading, and Explicit Loading?
Simple Definition for Interview

🔸 Lazy Loading:
Related data is loaded automatically when accessed.

🔸 Eager Loading:
Related data is loaded immediately when the main data is fetched using .Include().

🔸 Explicit Loading:
You manually load related data after the main object is loaded.


---

✅ Real-life Analogy (interview-friendly)

Think of Student and Courses:

Lazy Loading: You visit the student, and only when you ask about their courses, they go fetch it.

Eager Loading: You tell them to bring their course list at the time you meet them.

Explicit Loading: You visit the student, and later say, “Hey, now show me your courses.”


Lazy LOADING :

EXAMPLE :
---

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Lazy loading: virtual navigation property
    public virtual ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    
    public int AuthorId { get; set; }
    public virtual Author Author { get; set; }
}
🔑 Important for Lazy Loading: Navigation properties must be virtual and EF proxies must be enabled.

Step 3: Setup DbContext
using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseLazyLoadingProxies()
                      .UseSqlServer("Server=.;Database=LazyLoadingDemoDb;Trusted_Connection=True;");
    }
}
UseLazyLoadingProxies() is required for lazy loading to work.

Step 4: Add Controller with GET Method
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Lazy loading: Books will be loaded only when accessed
        var authors = _context.Authors.ToList();

        // Example access to trigger lazy loading
        foreach (var author in authors)
        {
            var bookCount = author.Books.Count; // EF will load books here
        }

        return Ok(authors);
    }
}
Step 5: Explanation of Lazy Loading
Lazy Loading in EF Core:

Data is not loaded automatically when querying the parent.
Only when you access a navigation property, EF will query the database for that data.
In our example:
_context.Authors.ToList() → loads only authors
author.Books.Count → triggers EF to load books for that author on demand
Pros:

Reduces initial query load.
Loads related data only when needed.
Cons:

Can cause N+1 query problem if not careful.
---
///
✅ 2. Eager Loading (load early with Include)

Code:

var student = await context.Students
    .Include(s => s.Courses)
    .FirstOrDefaultAsync(s => s.Id == 1);

🧠 Best for performance when you know you’ll need related data.


---
Step 2: Create Models

We don’t make navigation properties virtual, because we won’t use lazy loading:

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Eager loading: no virtual keyword needed
    public ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    
    public int AuthorId { get; set; }
    public Author Author { get; set; }
}


---

Step 3: Setup DbContext

using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=EagerLoadingDemoDb;Trusted_Connection=True;");
    }
}

> No UseLazyLoadingProxies() needed.




---

Step 4: Add Controller with GET Method

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Eager loading: load authors and their books together
        var authors = _context.Authors
                              .Include(a => a.Books) // Eagerly load books
                              .ToList();

        return Ok(authors);
    }
}

> Include(a => a.Books) tells EF to load related books immediately with authors.




---

Step 5: Explanation of Eager Loading

Eager Loading in EF Core:

1. Data is loaded together with the parent in a single query.


2. In our example:

_context.Authors.Include(a => a.Books).ToList() → loads authors and their books in one query.



3. Pros:

Avoids multiple queries (no N+1 problem).

Better for small-to-medium datasets where you know related data is needed.



4. Cons:

Loads all related data even if you don’t need it → more memory.

//
Step 1: Models (same as eager example, no virtual keyword)

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }
    public ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }

    public int AuthorId { get; set; }
    public Author Author { get; set; }
}


---

Step 2: DbContext (same as eager example)

using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=ExplicitLoadingDemoDb;Trusted_Connection=True;");
    }
}


---

Step 3: Controller with GET Method (Explicit Loading)

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Step 1: Load only authors (Books are not loaded yet)
        var authors = _context.Authors.ToList();

        // Step 2: Explicitly load Books for each author
        foreach (var author in authors)
        {
            _context.Entry(author)
                    .Collection(a => a.Books) // navigation collection
                    .Load(); // manually load
        }

        return Ok(authors);
    }
}


---

Step 4: Explanation of Explicit Loading

How it works:

1. First query → loads only authors.


2. For each author, when we call .Collection(a => a.Books).Load(), EF makes another query to load that author’s books.






---

✅ Interview Summary (One-liner ready):

Loading Type Loads When? How?

Lazy Loading When navigation accessed virtual + proxy
Eager Loading With main query .Include()
Explicit Loading Manually later .Entry().LoadAsync()



---

Would you like a diagram or real-world scenario to help remember this even better?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7. What is a navigation property in EF?
Here’s how you can explain Navigation Property in Entity Framework in the most interview-friendly and simple way, with easy words and code examples:


---

✅ What is a Navigation Property? (Simple Answer)

> A navigation property is like a link between two tables in your database.
It helps you move from one entity to another related entity (like from Student to their Courses).



It is used to access related data using foreign key relationships.


---

✅ Real-life Example (for Interview)

Imagine a Student is enrolled in many Courses.

In code, you want to get a student and see their courses.

Navigation property lets you do this easily using object relationships — not raw SQL joins.



---

✅ Code Example

👉 Student Entity

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Navigation Property (1 student -> many courses)
    public ICollection<Course> Courses { get; set; }
}

👉 Course Entity

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; }

    // Foreign Key
    public int StudentId { get; set; }

    // Navigation Property (each course belongs to one student)
    public Student Student { get; set; }
}


---

✅ Why is it useful?

Using navigation properties, you can do this:

var student = await context.Students
    .Include(s => s.Courses)
    .FirstOrDefaultAsync(s => s.Id == 1);

Console.WriteLine("Courses:");
foreach (var course in student.Courses)
{
    Console.WriteLine(course.Title);
}

✔ No need to write complex joins. ✔ Easy to read and maintain.


---

✅ Interview Summary:

> Navigation properties connect related tables (entities) in your code.
They help you easily fetch and work with related data, just like objects in C#.




---

Would you like me to also explain the difference between navigation property and foreign key, or how to define one-to-many / one-to-one relationships in real project scenarios?



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8. How do you configure relationships (One-to-Many, Many-to-Many) in EF?
Here’s the most human-friendly and interview-ready answer to:


---

✅ How to Configure Relationships in Entity Framework?

(With simple code and words for One-to-Many and Many-to-Many)


---

🔹 One-to-Many Relationship

Example:
One Department has many Employees.

✅ Code:

public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }

    // One Department → Many Employees
    public ICollection<Employee> Employees { get; set; }
}

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Foreign Key
    public int DepartmentId { get; set; }

    // Navigation property
    public Department Department { get; set; }
}

🎯 EF Core will automatically understand this relationship by convention (because of the FK and navigation property).


---

🔹 Many-to-Many Relationship (EF Core 5+ makes this easy)

Example:
One Student can join many Courses,
One Course can have many Students.

✅ Code:

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Many-to-Many
    public ICollection<Course> Courses { get; set; }
}

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; }

    // Many-to-Many
    public ICollection<Student> Students { get; set; }
}

🎯 EF Core will auto-create a junction table (like StudentCourse) behind the scenes!


---

✅ How to Explain in Interview (Simple Way):

> 🔹 One-to-Many is like: A manager can have many employees.
🔹 Many-to-Many is like: A student can take many courses, and a course can have many students.



EF Core lets you define relationships using navigation properties and foreign keys — and builds SQL joins for you automatically.


---

✅ Want Bonus Tip?

You can also configure relationships using Fluent API:

modelBuilder.Entity<Employee>()
    .HasOne(e => e.Department)
    .WithMany(d => d.Employees)
    .HasForeignKey(e => e.DepartmentId);


---

Would you like examples for One-to-One relationship and how to handle it with code + Fluent API too?





---

⚙️ Intermediate-Level Questions

9. What is the difference between EF Core and EF6?


10. What are Migrations in EF Core?

How to create and apply migrations?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11. How does EF handle concurrency?
Great question! Here's a very simple and interview-friendly explanation of how Entity Framework (EF Core) handles concurrency, with a real-world code example.


---

✅ What is Concurrency?

> Concurrency happens when two users try to update the same data at the same time.



🧠 Example:
Imagine two users are updating the same "Property Price" at once.
We must avoid one user's update overwriting another's by mistake.


---

✅ How EF Core Handles Concurrency?

EF Core helps by using a special column like a timestamp or version.
This way, it checks:

"Is this row still the same version as when you read it?"

If yes, update is safe.

If no, throw an error (so you can handle it).



---

✅ Code Example

1. Add a concurrency token to your model:

public class Property
{
    public int Id { get; set; }
    public string Title { get; set; }
    public double Price { get; set; }

    [Timestamp] // EF will track this column to handle concurrency
    public byte[] RowVersion { get; set; }
}


---

2. Add to your DB context:

public DbSet<Property> Properties { get; set; }

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Property>()
        .Property(p => p.RowVersion)
        .IsRowVersion();
}


---

3. Handling the error:

try
{
    _context.Update(property);
    await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException ex)
{
    Console.WriteLine("⚠️ Someone else already updated this record.");
    // You can choose to reload, retry, or show message to user
}


---

✅ How to Say in Interview (Simple Answer)

> "EF Core supports concurrency by using a special column called RowVersion or Timestamp.
When two users try to update the same data, EF compares the row version.
If someone else has already changed the data, EF throws a DbUpdateConcurrencyException — so we don’t accidentally overwrite someone’s changes."




---

✅ Real-Life Analogy

🧠 "It's like two people editing a Google Doc — if the document has changed since you last saw it, Google warns you before saving. EF does the same with concurrency checks."


---

Let me know if you want me to show this using SQL Server + .NET Core sample CRUD project.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12. What are shadow properties?
Great question! Let me explain Shadow Properties in Entity Framework (EF Core) in very simple, human-friendly words — with code examples.


---

✅ What is a Shadow Property in EF Core?

A shadow property is a column in the database that:

Exists in the EF model,

But does NOT exist in your C# class.


In short:

> "EF tracks and stores the property in the database, but you don’t see it in your class."




---

✅ Why Use Shadow Properties?

1. To store metadata like CreatedDate, ModifiedBy, etc.


2. To keep your C# class clean from internal or system-related fields.


3. To track things without exposing them in your code.




---

✅ How to Define a Shadow Property

You define it in the OnModelCreating() method in DbContext.

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Property>()
        .Property<DateTime>("LastUpdated"); // 👈 Shadow Property
}

Here, LastUpdated does not exist in the Property class, but EF will still treat it like a normal column.


---

✅ How to Set or Use a Shadow Property in Code

You can access or set it using EF's Entry() API:

var property = await _context.Properties.FindAsync(1);

// Set the shadow property
_context.Entry(property).Property("LastUpdated").CurrentValue = DateTime.UtcNow;

await _context.SaveChangesAsync();


---

✅ Example: Clean Model with Shadow Property

// No LastUpdated here
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; }
    public double Price { get; set; }
}

But this will still save LastUpdated in the DB!


---

✅ How to Say in the Interview (Simple Words)

> “Shadow properties are extra columns that EF tracks and stores in the database, but they are not declared in your C# class.
They're useful for things like timestamps or audit info, when you want to keep your models clean.”




---

✅ Real-Life Analogy

🧠 "It’s like adding an invisible tracking chip to a package — the customer doesn’t see it, but the system tracks it in the background."


---

Would you like me to extend this into a full CRUD example with CreatedBy, LastUpdated, etc., using shadow properties and EF Core 8?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13. What is change tracking in EF?
Great question! Let's break down Change Tracking in Entity Framework (EF) using simple human-friendly words and real code examples — so you can explain it confidently in an interview.


---

✅ What is Change Tracking in EF?

Change Tracking means:

> EF keeps track of the changes you make to your objects (entities) after retrieving them from the database, so that it knows what to update when you call SaveChanges().




---

✅ How It Works (Simple Steps)

1. EF loads an object from the database.


2. You change a property (like name or price).


3. EF tracks the change in memory.


4. When you call SaveChanges(), EF automatically generates SQL UPDATE for the changed fields.




---

✅ Code Example

var property = await _context.Properties.FindAsync(1); // Step 1: EF tracks this entity

property.Price = 500000; // Step 2: You make a change

await _context.SaveChangesAsync(); // Step 3 & 4: EF detects change & updates DB

Behind the scenes, EF tracks the Price change and creates this SQL:

UPDATE Properties SET Price = 500000 WHERE Id = 1;


---

✅ Interview-Friendly Explanation

> “EF uses Change Tracking to monitor changes I make to my entities in memory.
So when I call SaveChanges(), EF knows what to update in the database — without me writing SQL manually.”




---

✅ Real-Life Analogy

🧠 *“It’s like a teacher watching students write their answers




14. What is the difference between Add(), Attach(), and Update() methods?


15. How do you configure Fluent API vs Data Annotations?


16. How can you execute raw SQL queries in EF Core?


17. What is the use of AsNoTracking()?




---

🚀 Advanced/Real-World Development Questions

18. How do you optimize performance in Entity Framework Core?


19. How to handle transactions in EF?


20. How do you seed initial data in EF Core?


21. How do you implement Unit of Work and Repository Pattern with EF?


22. How do you test Entity Framework code (Mocking DbContext)?


23. What are global query filters in EF Core?


24. What is Query Splitting in EF Core?


25. How does EF Core handle connection pooling and resource management?


////////////////////////////////////////////////////////
///////////////////////////////////////////////////////Interview Bit
//////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////1)which according to you is considered the best approach in Entity framework.
->In real world , code-First is considered the best approach because 
-> Developers control the model using c# classes.
-> Database schema  is created/updated automatically using migration.
-> Works well with agile projects where database design keeps migrations.
-> Easier for version control(Git) since everything is in code.
////////////////////////////////////////////////////////////////////////////2) Explain the advantages of the Entity Framework.
Advantages
///////////1) No need to write SQL manually
-> Normally, we have to write  long SQL quesries to fetch, insert , or update  data.
-> With EF, we can just write long c# code(dbContext.Products.ToList()) and it will generate the SQL behind the scenes.
->Save time and reduces human errors in SQL.
//Faster development (Productivity boost)
->Developers can focus on business logic instead of spending hours writing and debugging  SQL queries.
->EF provided LINQ (Language Integrated Query), which makes queries easier and type-safe.
//Database independent (Multiple DB support)
//Strong Types and IntelliSense support
//Change Tracking 
//Better for Complex Apps
////////////////////////////////////////////////////////////////////////////////////////////////3) Describe some of the disadvantages of the entity Framework.
//Slower than ADO.net 
//Less control over SQL.
//Performance issue in very large apps.
//Learning curve 
//Overhead(extra memory and processing).
//////////////////////////////////////////////////////////////////////////////////////////////////4) what are the feature of the entity framework ?

/////////////////////////////////////////////////////////////////////////////////////////5) what are the main component of Entity Framework
///EDM has tree part
1)Conceptual Model.
2) Storage Module.
3) Mapping Module.
Conceptual model (c# world)
Storage Model(DB world)
Mapping Model(the transator in between).
//2)Linq to Entities.
//3)Entity SQL
//4)Object Service
//5)ADO.NET Data Provider
/////////////////////////////////////////////////////////////////////////////////////6) explain diffrent parts of the entity data model.
1) Conceptual Model(CSDL)
This is how you see the data in c#(your entity classes).
public class Student
{
 public int Id {get ; set ;}
 public string Name {get ; set;}
}

2) Storage Model(SSDL)
This is how the database actually look(tablets, columns , data types)
 create table Student
 (StudentId INT )
3)
///////////////////////////////////////////////////////////////////////////////////////7) Explain what the .edmx file contains.
An .edmx file in Entity Framework is an XML-based file that contains three parts :
CSDL(Conceptual Model : C# classes)
SSDL(Stored Model : Database  tables)
MSL(Mapping between them) : It basically acs as a bridge between the database and the application.
///////////////////////////////////////////////////////////////////////////////////////////////////////8) what do you mean by migration ? Write its type ?
Migration in Entity Framework is a ways to update and manage database schema changes in sync with your application's data model.
->Automatic Migration :  Database updates automatically(good for quick dev, not production).
->Code-Based Migration : Mamnual control using migration files (preferred).
->Initial Migration : First migration to create DB.
->Seed Migration : To add initial data.

9) what do you mean by Deferred Execution in EF ?
=> EXAMPLE :
Var query = context.Employees.Where(e => e.Department == "IT");
At this line -> No SQL query is send to the database yet.
When you actually do something like :
foreach(var emp in query)
{
Console.WriteLine(emp.Name);
}
Only then the query is executes, and EFsends SQL to the database.

//Why Deferred Excution is Useful ?
Performance Optimization -> Query is executed only when needed.
Flexibility -> You can build queries step by step before execution.
Less Load -> Prevents unnessary
///////////////////////////////////////////////////////////////////////////////////////////10) What do you mean by the term navigation property in the entity framework ?
11) What are diffrent entity state in EF ?
12) Write the importance of the t4 entity in Entity Framework.
13)Explain CSDL, SSDL , MSL selection in an Edmx file
14) Write some XML generation methods provided b the dataset object.
15) what do you mean by migration history table in Entity framework.
16) Explain how EF suppots transactions.
17) Write the steps to retrive data from database using Entity Framework in MVC.
18) Explain the role of pluralize and Singularize in  the entity framework.
19)What is the diffrence between Dapper and Entity Framework.
20) Explain the POCO Clsses in EF.
21) In EF , what are the ways to use stored Procedures ?
22) Explain database concurrency and the ways to handle it.
23) What are diffrence type of loading available to load related entities in EF.
24) What do you mean by lazy loading and explicit loading.
25) What are the pros and cons of different type of loading.
26) Write diffrent type of inheritane support by entity Framework.
27) Write Complex Type in Entity Framework.
28) What do you mean by Micro ORM.
29) Explain EF Data access Artichecture.
30)What do you mean by SQL inject attack ?
31) What is the best ways to handle SQL injection attacks in Entity Framework.
32) Explain the OnjectSet in EF.
33) Whta the namespace that is used to include .NET Data Provider for SQL server in .NET code.
34) Eplain EDM and write the process to create it.
35) What do you mean by DbEntityEntry Class in EF ?




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Api with EF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////Get
// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/

/////////////////////////////////Post
// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////C# Notes Those bit confusing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////
Method Hinding

public class Parent
{
    public void Display()
    {
        Console.WriteLine("Parent Display");
    }
}

public class Child : Parent
{
    public new void Display()
    {
        Console.WriteLine("Child Display");
    }
}

Parent p = new Parent();
p.Display(); // Parent Display

Child c = new Child();
c.Display(); // Child Display

Parent pc = new Child();
pc.Display(); // Parent Display

////////////////////////////////////////////
Method Overring

public class Animal
{
    public virtual void Eat()
    {
        Console.WriteLine("This animal eats food.");
    }
}

public class Dog : Animal
{
    public override void Eat()
    {
        Console.WriteLine("Dog barks.");
    }
}

public class Program
{
    public static void Main()
    {
        Animal myDog = new Dog();
        myDog.Eat(); //Output : Dog barks
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Conceptual, Practical, Scenario
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////Dependency Injection
////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////Conceptual
/////////////////////////////////////////What is dependency Injection and Why is it important ?
Dependency Injection(DI) is a design patter used in Software developemnt to manage dependencies 
between object and promote loose coupling.

////////////////////////////////////////////////////////////////////Explain the diffrence between Dependency Injection and Inversion of control.
Ioc is a principle that says "a class  should not control its dependencies".
//Imagine you go to a restaturent .Instead of cooking food yourself, the resturent provdes food to you .You  don't contol cooking , you only eat. 
DI ia a ways to implement IOC by injecting dependencies (via constructor , property or method) instead of creating them inside.

////////////////////////////////////////////////////////////////What are the type of Dependency Injection , And When you would each ?
1) Constructor Injection(Most common) : 
1) Most common type.
2) When the dependency is required always.

Example :
public class OrderService
{
private readonly IPaymentService _paymentService;

//Constructor Injection
public OrderService(IPaymentService paymentService)
{
_paymentService = paymentService;
}

public void Placement()
{
 _paymentService.ProcessPayment();
}
}

//Property Injection:
1) When dependency is optional.
2)Example : Logging -> a service can work without logging, but if available, it will use it.


//Method Services :
1) Used when dependency is needed only in one method.

/////////////////////////////////////////////////////What are the some challenges using dependencies Injection ?
Dependency Injection is powerful but has some challenges. It can make code harder for beginners, add some extra complexity in samll apps , 
dedugging issue like missing registrations can be tricky and there's a little performance overhead.Also , if overused , ot can lead to too many hidden dependencies .

//////////////////////////////////////////////////////////////Practicle Question
//////////////////////////////How do you implement DI in .NetCore ?
/////With Dependency Injection
public interface IPaymentService
{
 void ProcessPayment();
}

public void ProcessPayment : IPaymentService
{
Console.WriteLine("Payment process.");
}
//
public class OrderService
{
Private readonly IPaymentService _paymentService;
//Dependency Injection via Constructor.
public OrderService(IPaymentService paymentService)
{
_paymentService = paymentService ;
}
}

--> OrderService depends on the IPaymentService interfaces, not the console process payment class.
--> Easily replaced with a mock implementation during testing.


//////////////////////////////////////////What is diffrence between AddTransient , AddScoped , And AddSingleton.

//Singleton
A single instance is shared across the application life cycle.
Service instances are disposed at application shutdown.

builder.Services.AddSingleton<IService, Service>(); //Singleton Service

Example : Application-wise configuration settings , shared caches,Logger service(N LOG , Serilog)

//Scoped
A Single instance is created of the service is created per Scope(e.g , per HTTP Service in a web application).

builder.Services.AddScoped<IService, Service>(); //Scoped Service

Example : User-specific data , transaction, Database Context
//Transient
A new instance of the service is created every time , it is requested.
builder.Services.AddTransient<IService, Service>(); //Transient Service
Example : helper classes , New GUI Number
/////////////////////////////////////////////////////////////////////////////How would you handle circular dependencies in DI ?
🔄 What is Circular Dependency in DI?

It happens when two or more classes depend on each other directly or indirectly, so DI container gets stuck trying to build them.

Example:

public class ServiceA
{
    private readonly ServiceB _serviceB;
    public ServiceA(ServiceB serviceB) { _serviceB = serviceB; }
}

public class ServiceB
{
    private readonly ServiceA _serviceA;
    public ServiceB(ServiceA serviceA) { _serviceA = serviceA; }
}

Here:

ServiceA needs ServiceB

ServiceB needs ServiceA
➡️ Infinite loop 🔁



---

✅ How to Handle Circular Dependencies in DI?

1. Re-design the classes (Best Solution)

Usually, circular dependencies are a design smell 🚨.

Try to split responsibilities or introduce a third class (mediator).

Example:

Instead of ServiceA ↔ ServiceB, make ServiceC handle coordination.






---

2. Use Interfaces instead of concrete classes

Break direct dependency.


public interface IServiceA { }
public class ServiceA : IServiceA { }
public class ServiceB 
{
    private readonly IServiceA _serviceA;
    public ServiceB(IServiceA serviceA) { _serviceA = serviceA; }
}




---

3. Use Lazy Injection (Lazy<T> or Func<T>)

Load dependency only when it’s really needed, avoiding the infinite loop.


public class ServiceA
{
    private readonly Lazy<ServiceB> _serviceB;
    public ServiceA(Lazy<ServiceB> serviceB) { _serviceB = serviceB; }
}




---

4. Property Injection (rare)

Instead of constructor injection, let DI set the property later.


public class ServiceA
{
    public ServiceB ServiceB { get; set; }
}




---

🏢 Real-World Example

Database + Logging:

If Repository depends on Logger, and Logger depends on Repository for saving logs → circular dependency ❌.

Fix: Let Logger log independently, don’t make it depend on Repository.


🔄 What is Circular Dependency in DI?

It happens when two or more classes depend on each other directly or indirectly, so DI container gets stuck trying to build them.

Example:

public class ServiceA
{
    private readonly ServiceB _serviceB;
    public ServiceA(ServiceB serviceB) { _serviceB = serviceB; }
}

public class ServiceB
{
    private readonly ServiceA _serviceA;
    public ServiceB(ServiceA serviceA) { _serviceA = serviceA; }
}

Here:

ServiceA needs ServiceB

ServiceB needs ServiceA
➡️ Infinite loop 🔁



---

✅ How to Handle Circular Dependencies in DI?

1. Re-design the classes (Best Solution)

Usually, circular dependencies are a design smell 🚨.

Try to split responsibilities or introduce a third class (mediator).

Example:

Instead of ServiceA ↔ ServiceB, make ServiceC handle coordination.






---

2. Use Interfaces instead of concrete classes

Break direct dependency.


public interface IServiceA { }
public class ServiceA : IServiceA { }
public class ServiceB 
{
    private readonly IServiceA _serviceA;
    public ServiceB(IServiceA serviceA) { _serviceA = serviceA; }
}




---

3. Use Lazy Injection (Lazy<T> or Func<T>)

Load dependency only when it’s really needed, avoiding the infinite loop.


public class ServiceA
{
    private readonly Lazy<ServiceB> _serviceB;
    public ServiceA(Lazy<ServiceB> serviceB) { _serviceB = serviceB; }
}




---

4. Property Injection (rare)

Instead of constructor injection, let DI set the property later.


public class ServiceA
{
    public ServiceB ServiceB { get; set; }
}




---

🏢 Real-World Example

Database + Logging:

If Repository depends on Logger, and Logger depends on Repository for saving logs → circular dependency ❌.

Fix: Let Logger log independently, don’t make it depend on Repository.
///////////////////////////////////////////////////////////////////////////What happen if a required denpendencies is not registored in the DI Container.



What happens if a required dependency is NOT registered in the DI container?

👉 If you try to use (resolve) a dependency that is not registered in the DI container, the application will throw an error at runtime.

In .NET, this error usually looks like:

InvalidOperationException: Unable to resolve service for type 'MyApp.Services.IMyService' 
while attempting to activate 'MyApp.Controllers.HomeController'.


---

🧠 Example:

public interface IMyService
{
    string GetData();
}

public class MyService : IMyService
{
    public string GetData() => "Hello from Service!";
}

public class HomeController : ControllerBase
{
    private readonly IMyService _service;

    public HomeController(IMyService service) // dependency needed here
    {
        _service = service;
    }

    [HttpGet]
    public string Get() => _service.GetData();
}

If you forget to register it in Program.cs / Startup.cs like this:

builder.Services.AddScoped<IMyService, MyService>();

When you run the app, it crashes with an exception, because DI container doesn’t know how to create IMyService.


---

🔑 Real-World Impact

If dependency is not registered → App won’t even start properly or API request will fail immediately.

This is why proper DI registration is critical in enterprise apps.



---

✅ Interview-Smart Answer:
"If a required dependency is not registered in the DI container, .NET will throw an InvalidOperationException at runtime because it cannot resolve the service. To avoid this, we must ensure all required dependencies are properly registered in Program.cs or Startup.cs. Tools like unit tests and build-time checks can also help catch missing registrations early."


////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////Middleware
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////Conceptual Middleware Question
///////////////////////////////////////////////////////////////////////////////////What is Middleware in ASP.NetCore

Middleware is software that sits in the request-response pipeline and process HTTP request and response in an application.

///////////////////////////////////////////////////////Why is Middleware importantant ?
It provide a modular approaches to add cross-cutting  concerns like logging , authentication and error handling.

////////////////////////////////////////////////////How does Middleware differ from HttpModules in .Net framework.
Middleware is lightweight , modular and uses an explicit pipeline , unlike the eveny- driven approaches of httpModule.

/////////////////////////////////////////////////////////////////////////////////////////PracticleModule


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////Exception HANDLING
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
 Scenario-Based Questions on try-catch in C#

/////////////////////////////////////////////////////////////////////////1. What happens if an exception occurs and there is no catch block?

👉 Interviewer wants to check if you know about unhandled exceptions.
Answer: The application will crash if the exception is not handled.


---

////////////////////////////////////////////////////////////////////////2. Can we have multiple catch blocks?

👉 Scenario: You’re connecting to a database, and you want to handle SqlException differently from a general Exception.
Answer: Yes, multiple catch blocks are allowed, and they run top-to-bottom, so the most specific exception type should come first.


---

///////////////////////////////////////////////////////////////////////////////3. What if exception occurs inside catch block?

👉 Example: You log the error in a file, but logging itself throws an exception.
Answer: If another exception happens inside catch, and it’s not handled, the program will still crash. That’s why logging frameworks are often used (to minimize this risk).


---

///////////////////////////////////////////////////////////////////////////////////4. Can finally block be skipped?

👉 Scenario: You’re closing a database connection in finally. Will it always run?
Answer: finally always runs except in two cases:

If the program crashes due to Environment.FailFast() or system crash

If the process is terminated (e.g., kill command).



---

///////////////////////////////////////////////////////////////////////////////5. What happens if both catch and finally have return statements?

👉 Example:

try { return 1; }
catch { return 2; }
finally { return 3; }

Answer: The finally return will override everything. Output will be 3.


---

////////////////////////////////////////////////////////////////////////////////////////////////////////////6. Can we use try without catch?

👉 Scenario: You only want to clean up resources.
Answer: Yes, try can be used with finally only, no catch is required.


---

///////////////////////////////////////////////////////////////////////////////////////////////////////////////7. What’s the difference between throw ex; and throw;?

👉 Scenario: You caught an exception, logged it, and want to re-throw.
Answer:

With throw ex;
The stack trace shows the exception originating in MethodA (re-throw line).
With throw;
The stack trace shows the exception originating in MethodB (actual divide by zero line).

///////Example throw ex
using System;

class Program
{
    static void Main()
    {
        try
        {
            MethodA();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Caught in Main:");
            Console.WriteLine(ex);
        }
    }

    static void MethodA()
    {
        try
        {
            MethodB();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Logging in MethodA: " + ex.Message);

            // Try switching between "throw ex;" and "throw;"
            throw ex; // or just throw;
        }
    }

    static void MethodB()
    {
        int x = 0;
        int y = 5 / x; // Exception originates here
    }
}

////////Example throw
using System;

class Program
{
    static void Main()
    {
        try
        {
            MethodA();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Caught in Main:");
            Console.WriteLine(ex);
        }
    }

    static void MethodA()
    {
        try
        {
            MethodB();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Logging in MethodA: " + ex.Message);

            // Try switching between "throw ex;" and "throw;"
            throw ex; // or just throw;
        }
    }

    static void MethodB()
    {
        int x = 0;
        int y = 5 / x; // Exception originates here
    }
}

---

8. Nested try-catch blocks: which one handles exception?

👉 Scenario: You have a try-catch inside another try-catch.
Answer: The nearest catch block that matches the exception type will handle it.


---

9. Can a finally block throw an exception? What happens then?

👉 Scenario: You’re closing a file in finally and that itself throws.
Answer: Yes, it can throw, and if it does, the new exception hides the original one. This can make debugging harder.

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////CLASS And OBJECT
///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////Basic Question
//What is the diffrence between a class and an Object ?
class :-> Blueprint , doesn't occupy memory.
Object :-> Instance of a class. Occupies memory and represent real-world entity.

//////////////////////////////////////////////////////////Can you create an object without a class ?
No, in oops  object are instance f classes . you need a class to create an object.

///////////////////////////////////////////////////////////Can you have multiple Onject



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////JWT EXPLANATION
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Sure! Let's go through an example to explain JWT (JSON Web Token) in a practical way, step by step.

JWT Structure Overview
A JWT consists of three parts:

Header: Contains metadata about the token, typically the type of token (JWT) and the signing algorithm used (e.g., HS256).
Payload: Contains the claims (data), such as user information, roles, and expiration times.
Signature: Ensures the token wasn't altered. It is created by combining the encoded header, encoded payload, and a secret key, all signed using the specified algorithm.
These parts are encoded into Base64URL format and concatenated with periods (e.g., header.payload.signature).

Example of a JWT
Let's say we want to create a JWT for a user after they successfully log in to an application.

Header (Base64 encoded):
json
Copy code
{
  "alg": "HS256",
  "typ": "JWT"
}
Base64URL encoded: eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9

Payload (Base64 encoded):
json
Copy code
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true,
  "exp": 1717171717
}
Base64URL encoded: eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImFkbWluIjogdHJ1ZSwgImV4cCI6IDE3MTcxNzE3MTd9

Signature:
The signature is created using the header, payload, and a secret key (e.g., my_secret_key). The signing algorithm (HS256) is used to create the signature.

bash
Copy code
HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  your-256-bit-secret
)
Example signature (Base64URL encoded): SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

Final JWT:
The final token is a concatenation of the header, payload, and signature:

Copy code
eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImFkbWluIjogdHJ1ZSwgImV4cCI6IDE3MTcxNzE3MTd9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
How JWT Works (Example Flow)
User Login:
The user logs in to your application by submitting their credentials (username and password) via a login form.

Server Validates Credentials:
The server validates the user credentials against the database. If valid, the server generates a JWT.

Example in C# (.NET Core):

csharp
Copy code
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;

public class JwtService
{
    public string GenerateToken(string username)
    {
        var claims = new[]
        {
            new Claim(JwtRegisteredClaimNames.Sub, username),
            new Claim("admin", "true"),
            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
        };

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("my_secret_key"));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: "yourIssuer",
            audience: "yourAudience",
            claims: claims,
            expires: DateTime.Now.AddMinutes(30),
            signingCredentials: creds);

        return new JwtSecurityTokenHandler().WriteToken(token);
    }
}
This generates a JWT that includes claims such as the user's name, whether they're an admin, and an expiration time.

Client Receives JWT:
The server sends the generated JWT back to the client. This token is typically sent in the response body or a header.

Example Response:

json
Copy code
{
  "token": "eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImFkbWluIjogdHJ1ZSwgImV4cCI6IDE3MTcxNzE3MTd9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
}
Client Stores the JWT:
The client (typically a frontend application) stores the JWT, either in localStorage, sessionStorage, or cookies, for later use.

Client Makes Authenticated Requests:
For each subsequent request that requires authentication, the client sends the JWT in the HTTP Authorization header.

Example request header:

makefile
Copy code
Authorization: Bearer eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImFkbWluIjogdHJ1ZSwgImV4cCI6IDE3MTcxNzE3MTd9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
Server Validates the JWT:
Each time the server receives a request with a JWT, it validates the token’s signature using the same secret key. It also checks the expiration date and any claims (such as roles) that the token contains.

Example in .NET Core:

csharp
Copy code
services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "yourIssuer",
            ValidAudience = "yourAudience",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("my_secret_key"))
        };
    });
Server Authorizes the Request:
If the token is valid, the server authorizes the request and provides access to the requested resource. Otherwise, it denies access and responds with an unauthorized status code.

Real-World Scenario
Let's say you're building an online banking application.

The user logs in with their credentials, and the server generates a JWT containing the user's ID and roles (like admin, customer).
The JWT is returned to the client, which stores it in localStorage.
Each time the client makes a request to check account balances or transfer money, it includes the JWT in the request header.
The server validates the JWT to ensure the user is authenticated and authorized to perform the requested action.
Benefits of JWT
Stateless: No need for server-side sessions; the token contains all necessary information.
Scalable: JWTs are self-contained, reducing server load.
Portable: JWTs are easy to transmit via URL, POST body, or HTTP header.
Conclusion
JWT is a powerful way to secure APIs, ensuring that user data and access controls are handled in a stateless and portable manner. By including claims in the payload, you can control access to different parts of your application while keeping the communication secure using cryptographic signatures.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////L2 Round Coding Question DSA
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Find the Maximum Subarray Sum (Kadane's Algorithm)

Input: [-2,1,-3,4,-1,2,1,-5,4] → Output: 6 (subarray: [4,-1,2,1])

Complexity: O(n)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////Most Asked Azure interview Question
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////What is Azure App Services
PaaS for Hosting Services.
link : https://www.youtube.com/watch?v=pL2alDLo_no
/////////////////////////////////////ARM
Central to how you manage Azure resourses.
link : https://www.youtube.com/watch?v=D0_jF3LpEfQ
//////////////////////////////////////////////////////////Azure Function
Serverless event-driven logic.
link : https://www.youtube.com/watch?v=uJyoMEjlahM
/////////////////////////////////////////////////////////Azure SQL Database vs Azure Cosmos DB
Relational vs global No SQL
////////////////////////////////////////////////////Diffrence between Blob Storages and Files.


///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////Most asked DSA and Algorithm question in Interview
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////


  ///////////////////////////////////////////////////////Reverse String the string

public class HelloWorld
{
    public static void Main(string[] args)
    {
        string str = "hello world";
        Console.WriteLine("Original: " + str);
        Console.WriteLine("Reversed: " + Reverse(str));
    }

    public static string Reverse(string str)
    {
        if (string.IsNullOrEmpty(str)) return str;

        char[] ch = str.ToCharArray();
        int i = 0;
        int j = ch.Length - 1;

        while (i < j)
        {
            // swap characters
            char temp = ch[i];
            ch[i] = ch[j];
            ch[j] = temp;
            i++;
            j--;
        }

        return new string(ch);
    }
}



//////////////////////////////////////input : Abhishek kumar singh , output : singh kumar Abhishek

using System;
using System.Text;
public class HelloWorld
{
    public static void Main(string[] args)
    {
        string str = "Abhishek kumar singh jhbg bnhju nhbgfy bhgytu";
        String[] ch = str.Split(' ');
        StringBuilder sb = new StringBuilder();
        
        for(int i = ch.Length - 1 ; i >=  0 ;  i--)
        {
            sb.Append(ch[i]);
            sb.Append(" ");
        }
        Console.WriteLine (sb.ToString());
    }
}
///////////////////////////////////////
Find the First Non-Repeating Character in a String
Problem Statement:

> Given a string, find and return the first non-repeating character.
If there is no such character, return -1.

Example 1:

Input:  "aabbcddbe"
Output: 'c'

Example 2:

Input:  "aabbcc"
Output: -1


class Program
{
    public static void Main(string[] args)
    {
        String str = "aaabbbcccddfggghhrrr";
        char result = FindNonRepeatingCharacters(str);  
        if(result != '0')
        {
            Console.WriteLine("The first non-repeating character is: " + result);
        }
        else
        {
            Console.WriteLine("No non-repeating character found.");
        }

    }
    public static char FindNonRepeatingCharacters(String str)
    {
        Dictionary<char, int> keyValuePairs = new Dictionary<char, int>();

        foreach (char c in str)
        {
            if (keyValuePairs.ContainsKey(c))
            {
                keyValuePairs[c]++;
            }
            else
            {
                keyValuePairs.Add(c, 1);
            }
        }
            foreach (char ch in str)
            {
                if (keyValuePairs[ch] == 1)
                {
                    return ch;
                }
            }
        
            return '0';

        
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////

Q.2: How to find if the given string is a palindrome or not?


using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        String str = "MadaM";
        CheckPalidrom(str);
        
    }
    public static void CheckPalidrom(String str)
     {
         int i = 0;
         int j = str.Length - 1 ;
         bool IsPalidrop = true;
          while(i < j)
           {
               if(str[i] != str[j])
               {
                   IsPalidrop = false;
                   break;
               }
               i++;
               j--;
           }
           if(IsPalidrop == true)
           {
               Console.WriteLine("Paidrom");
           }
           else
           {
               Console.WriteLine(" Not Paidrom");
           }
     }
}
 /////////////////////////////////////////////////////Q.4: How to reverse each word in a given string?
Ans.: The user will input a sentence and we need to reverse each word individually without changing its position in the sentence.
input: Welcome to Csharp corner, output: emocleW ot prahsC renroc

using System.Text;
using System.Collections.Generic;
using System;
class Program
{
    
    public static void Main(string[] args)
    {
        string str = "Abhishek is Intelligent boys";
        RSEW(str);
    }
    public static void RSEW(string str)
    {
        StringBuilder sb = new StringBuilder();
        List<char> ls = new List<char>();
        for(int i = 0 ; i < str.Length ; i++)
        {
            if(str[i] == ' ' || i == str.Length - 1 )
            {
                if(i == str.Length - 1)
                {
                    ls.Add(str[i]);
                }
                
                    for(int j = ls.Count - 1 ; j >= 0 ; j--)
                    {
                        sb.Append(ls[j]);
                    }
                    sb.Append(' ');
                    ls = new List<char>();
                
            }
            else
            {
                ls.Add(str[i]);
            }
        }
        Console.WriteLine(sb.ToString());
    }
}
//////////////////////////////////////Q.5: How to count the occurrence of each character in a string?

using System;
using System.Collections.Generic;

public class HelloWorld
{
public static void Main(string[] args)
 {
 string str = "Hello   world";
 FindCount(str);
     
 }

  public static void FindCount(string str)
  {
   Dictionary<char, int> dis = new Dictionary<char, int>();
     foreach (char ch in str)
       {
           if(ch != ' ')
           {
           if (dis.ContainsKey(ch))
          {
          dis[ch]++;
             }
             else
                {
               dis.Add(ch, 1);
                }
           }
       }
            foreach (var item in dis)
           {
       //  Console.WriteLine($"{item.Key}: {item.Value}");
         Console.WriteLine($"{item.Key} : {item.Value}");
          }
    }
}

////////////////////////////////////////////////////////////////


//input :1,2,3,1,2,3,4
//o/p - 4
using System;
using System.Collections.Generic;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        int[] arr = new int[] {1, 2, 3, 1, 2, 3, 4};
        Occurence(arr);
    }

    public static void Occurence(int[] arr)
    {
        Dictionary<int, int> dis = new Dictionary<int, int>();
        foreach (var a in arr)
        {
            if (dis.ContainsKey(a))
            {
                dis[a]++;
            }
            else
            {
                dis.Add(a, 1);
            }
        }

        foreach (var d in dis)
        {
            if (d.Value == 1)
            {
                Console.WriteLine($"{d.Key}");
            }
        }
    }
}
///////////////////////////////////////////////Q.6: How to remove duplicate characters from a string?
The user will input a string and the method should remove multiple occurrences of characters in the string
input: csharpcorner, output: csharpone


using System;
using System.Text;
class Program
{
    public static void Main(string[] args)
    {
        string str = "abhishekkumarsingh" ;
        DCR(str);
    }
    public static void DCR(string str)
    {
        string sb = string.Empty;
        {
        for(int i = 0 ; i < str.Length ; i++)
        if(!sb.Contains(str[i]))
        {
            sb = sb + str[i];
        }
        }
        Console.WriteLine(sb.ToString());
    }
}
///////////////////////////////////////////Q.7: How to find all possible substring of a given string?
//input: abcd , output : a ab abc abcd b bc bcd c cd d

using System;
using System.Text;
class Program
{
    public static void Main(string[] args)
    {
        string str = "abcd";
        PosSub(str);
    }
    public static void PosSub(string str)
    {
        for(int i = 0 ; i < str.Length ; i++)
        {
        StringBuilder sb = new StringBuilder(str.Length - 1);
            for(int j = i ; j < str.Length ; j++)
             {
                sb.Append(str[j]);
                Console.Write(sb + " ");
             }
             
        }
    }
}
Q.8: How to perform Left circular rotation of an array?
 How to perform Left circular rotation of an array?
Ans.: The user will input an integer array and the method should shift each element of input array to its Left by one position in circular fashion. The logic is to iterate loop from Length-1 to 0 and swap each element with last element.

input: 1 2 3 4 5, output: 2 3 4 5 1
using System;


class Program
{
    public static void Main(String[] args)
    {
       int[] arr = {8,6,5,8,3,6,8,9,2,3,6,7,8};
       CrA(arr);
    }
     public static void CrA(int[] arr)
     {
         int a = arr[0];
         for(int i = 0 ; i < arr.Length - 1 ; i++)
          {
              arr[i] = arr[i + 1];
          }
          arr[arr.Length - 1] = a;
          foreach(var d in arr)
          {
              Console.Write(d + " ");
          }
     }
}
///////////////////////////////////Q.9: How to perform Right circular rotation of an array?
input: 1 2 3 4 5, output: 5,1,2,3,4

using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        int[] arr = { 5, 1, 2, 3, 4 };
        RotateRight(arr);
    }
    public static void RotateRight(int[] arr)
    {
        int last = arr[arr.Length - 1];
        for (int i = arr.Length - 1 ; i > 0 ; i--)
        {
            arr[i] = arr[i - 1];
        }
        arr[0] = last;
        for (int j = 0; j < arr.Length; j++)
        {
            Console.WriteLine(arr[j]);
        }
    }
}
Q.10: How to find if a positive integer is a prime number or not?
using System;
class HelloWorld
{
    public static void Main(string[] args)
    {
    bool res = CheckPrime(25);
    Console.WriteLine(res);
}
public static bool CheckPrime(int n)
{
    if(n == 0 || n == 1)
    {
        return false;
    }
    if(n == 2 || n == 3)
    {
        return true;
    }
    if(n % 2 == 0 || n % 3 == 0)
    {
        return false;
    }
    for(int i = 5 ; i * i <= n ; i = i +  6)
    {
        if(n % i == 0 || n % (i + 2) == 0 )
        {
            return false;
        }
    }
    return true;
}
}
///////////////////////////////Q.11: How to find the sum of digits of a positive integer?
input: 168, output: 15
using System;
class Program
{
    public static void Main(string[] args)
    {
      int input = 0;
     Console.WriteLine(NumberSum(input));   
    }
    public static int NumberSum(int input)
    {
        int sum = 0;
        while(input != 0)
        {
            int rem = input % 10 ;
            sum = sum + rem ;
            input = input / 10 ;
        }
        return sum ;
    }
}

Find the second largest element in array.

class Program
{
    public static void Main(string[] args)
    {
        int[] arr = { 4, 6, 7, 5, 6, 8, 9, 4, 5, 7, };
        Console.WriteLine(FindSecondLargestNumber(arr));
    }
    public static int FindSecondLargestNumber(int[] arr)
    {
        if (arr.Length < 2)
        {
            throw new ArgumentException("their is no second largest ");
        }
        int firstLargest = int.MinValue;
        int secondLargest = int.MinValue;

        foreach(int num in arr)
        {
            if (num > firstLargest)
            {
                secondLargest = firstLargest;
                firstLargest = num;
            }

            else if (num > secondLargest && num != firstLargest)
            {
                secondLargest = num;
            }
        }
        if(secondLargest == int.MinValue)
        {
           throw new InvalidOperationException("their is no largest number exits");
        }
          

        return secondLargest;
    }
}

Q.13: How to find third largest integer in an array using only one loop?
input: 3 2 1 5 4, output: 3

using System;
class Program
{
    public static void Main(string[] args)
    {
        int[] arr = { 3, 2 ,5,7,8,3,6,9};
        Console.WriteLine(TLE(arr));
    }
    public static int TLE(int[] arr)
    {
        if (arr.Length < 3)
        {
            throw new ArgumentException("Array must have at least 3 elements");
        }
        int firstLg = int.MinValue;
        int secondLg =  int.MinValue;
        int thirdLg =  int.MinValue;
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] > firstLg )
            {
                thirdLg = secondLg;
                secondLg = firstLg;
                firstLg = arr[i];
            }
            else if (secondLg < arr[i] & arr[i] != firstLg)
            {
                
                thirdLg = secondLg;
                secondLg = arr[i];
            }
            else if (thirdLg < arr[i] & arr[i] != firstLg & arr[i] !=  secondLg)
            {
                thirdLg = arr[i];
            }
        }
        return thirdLg;

    }
}
/////////////////////////////////////////Q.14: How to convert a two-dimensional array to a one-dimensional array?

//input: { { 1, 2, 3 }, { 4, 5, 6 } }, output: 1 4 2 5 3 6
using System;
class Program
{
    public static void Main(string[] args)
    {
        int[,] arr1 = {{1,2,3},{4,5,6}};
        ConvertAndPrintArray(arr1);
    }
    public static void ConvertAndPrintArray(int[,] arr1)
    {
        int rows = arr1.GetLength(0);
        int cols = arr1.GetLength(1);
        int[] result = new int[rows * cols];
       
        int index = 0 ;
        
        for(int col = 0 ; col < cols ; col++)
        {
            for(int row = 0; row < rows ; row++)
            {
                result[index] = arr1[row, col];
                Console.Write(result[index] + " ");
                index++;
            }
        }
    }
}
Q.15: How to convert a one-dimensional array to a two-dimensional array?
// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler
 //input: {1, 2, 3, 4, 5, 6} ,2 ,3
//output:
//1 2 3
//4 5 6

using System;

public class HelloWorld
{
    public static void Main(string[] args)
    {
        int[] arr = new int[] {1, 2, 3, 4, 5, 6};
        OneDToTwoD(arr, 2, 3);
    }

    public static void OneDToTwoD(int[] arr, int row, int col)
    {
        int index = 0;
        int[,] arr1 = new int[row, col];
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                arr1[i, j] = arr[index];
                index++;
                Console.Write(arr1[i, j] + " ");
            }
            Console.WriteLine();
        }
    }
}

Q.16: How to find the angle between hour and minute hands of a clock at any given time?
Q.17: Explain Bubble Sort Algorithm In C#
Q.18: Explain Quick Sort Algorithm In C#
Q.19: Explain Merge Sort Algorithm In C#
Q. 20: Explain Insertion Sort Algorithm In C#
Q. 21: Explain Selection Sort Algorithm In C#
Q. 22: Explain Binary Search In C#


////////////////////////////////////////////////////////
//input : "Hello World"
//output : "Hello dlroW"
using System;
using System.Text;
public class HelloWorld
{
    public static void Main(string[] args)
    {
        string s = "Hello World";
        String[] arr = s.Split(' ');
        StringBuilder sb = new StringBuilder();
        sb.Append(arr[0]);
        sb.Append(' ');
        string str = arr[1];
        int i = 0 ;
        int j = str.Length -  1 ;
        char[] ch = str.ToCharArray();
        while(i < j)
        {
            char cha = ch[i];
            ch[i] = ch[j];
            ch[j] = cha ;
            i++;
            j--;
        }
       sb.Append(ch);
        Console.WriteLine (sb.ToString());
    }
}

Q>////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////UI
////////////////////////////////////////////////////////////////////////////////
Find Palidrom

let str = "SAMPLE";
str = str.toLowerCase(); // Convert to lowercase for case-insensitive comparison

let i = 0;
let j = str.length - 1;
let isPalindrome = true;

while (i < j) {
    if (str[i] !== str[j]) {
        isPalindrome = false;
        break;
    }
    i++;
    j--;
}

if (isPalindrome) {
    console.log(`${str} is a palindrome.`);
} else {
    console.log(`${str} is not a palindrome.`);
}


///////////////////////////////////////////////////////////////////////////////////
// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler

using System;
using System.Collections.Generic;
using System.Linq;

class ReverseDictionaryValue
{
 public static Disctionary<int , string> Process(Dictionary<int,string>  input)
{
  Dictionary<int ,string> res = new Dictionary<int , string>();
  foreach(var k in input)
   {
     string rev = new string(k.Value.Reverse().ToArray().ToUpper());
        result[k.key] = rev
  }
return res;
}
}
public class HelloWorld
{
    public static void Main(string[] args)
    {
        var input new Dictionary<int, string>
        {
            {5,"five"},
	        {6,"six"},
	         {9,"nine"}
        };
        var output = ReverseDictionaryValue.Process(input);
        foreach(var k in output)
        {
            Console.WriteLine($({k.Key},{k.Value}));
        }
    }
}

//////////////////////////Move the zeros to end
using System;

class Program
{
    static void Main()
    {
        int[] arr = { 0, 1, -1, 0, 2 };

        MoveZerosToEnd(arr);

        Console.WriteLine(string.Join(", ", arr));
    }

    static void MoveZerosToEnd(int[] arr)
    {
        int index = 0; // position to place next non-zero

        // Step 1: Move all non-zeros to the front
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] != 0)
            {
                arr[index++] = arr[i];
            }
        }

        // Step 2: Fill the rest with zeros
        while (index < arr.Length)
        {
            arr[index++] = 0;
        }
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////Most asked Linq Query Question in the interview
/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 4. How do you find the second highest salary using LINQ?

var secondHighest = employees
    .Select(e => e.Salary)
    .Distinct()
    .OrderByDescending(s => s)
    .Skip(1)
    .FirstOrDefault();


---


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 7. How do you perform Left Join in LINQ?

var leftJoin = employees
    .GroupJoin(
        departments,                     // right table
        e => e.DeptId,                   // key from employees
        d => d.DeptId,                   // key from departments
        (emp, dept) => new { emp, dept } // result selector
    )
    .SelectMany(
        x => x.dept.DefaultIfEmpty(),    // ensures left join (include even if no dept match)
        (x, d) => new
        {
            EmployeeName = x.emp.Name,
            DepartmentName = d?.DeptName ?? "No Department"
        }
    );

/////////////////////////////////////Select the first row from a table
//Using LINQ Method Syntax(Most common)
var firstRow = table.FirstOrDefault();

This will return the first row of the table.

//apply condition
var firstRow = table.FirstOrDefault(x => x.Age > 25);

/////////////////////////////////////////////////////////////////////////////////////🔹 9. Can you write a LINQ query to count how many employees per department?

var countByDept = employees
    .GroupBy(e => e.Department)
    .Select(g => new { Dept = g.Key, Count = g.Count() });


////////////////////////////////////////////////////////////////////////////Max Salary from Employee
var maxSalary = employee.Max(e => e.Salary);


/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////Interview Asked Question
///////////////////////////////////////////////////////What is the stateof EntityFramework.
✅ What are Entity States in EF?
When you work with EF (like EF Core), every object (entity) you load or create is tracked by the DbContext.
EF marks each object with a state – which tells EF what action it should take when you call SaveChanges().

🔑 The 5 Entity States in EF
Detached 🟡

Entity is not tracked by the DbContext.
Example: You just created new Student() but haven’t added it to context yet.
Usage: When you don’t want EF to keep track (for performance reasons).
var student = new Student(); // Detached by default
Unchanged 🟢

Entity is tracked by the DbContext, and no changes have been made since it was fetched from DB.
Example: You just queried a record but didn’t modify it.
Usage: EF won’t send any SQL for this entity on SaveChanges().
var student = context.Students.FirstOrDefault(s => s.Id == 1);
// State is Unchanged
Added 🔵

Entity is new and should be INSERTED into DB when SaveChanges() is called.
Example: You call context.Add(student).
var student = new Student { Name = "Abhishek" };
context.Students.Add(student);  // State = Added
context.SaveChanges(); // INSERT executed
Modified 🟠

Entity exists in DB but some property value has been changed.
Example: You update student.Name and EF will generate UPDATE.
var student = context.Students.FirstOrDefault(s => s.Id == 1);
student.Name = "Updated Name"; // State = Modified
context.SaveChanges(); // UPDATE executed
Deleted 🔴

Entity is marked for deletion from DB.
Example: You call context.Remove(student).
var student = context.Students.FirstOrDefault(s => s.Id == 1);
context.Students.Remove(student); // State = Deleted
context.SaveChanges(); // DELETE executed
🚀 Quick Way to Remember in Interview
Detached = Not tracked
Unchanged = No changes
Added = INSERT
Modified = UPDATE
Deleted = DELETE

//////////////////////////////////////////Linq Theoratic questions
Here are the most frequently asked LINQ questions in C# interviews for 3–5 years of experience, especially useful for .NET full-stack or backend developer roles:


---

🔹 1. What is LINQ in C#?

→ LINQ stands for Language Integrated Query.
→ It lets you write queries directly in C# to filter, sort, group, or transform data from collections (like arrays, lists, DB sets).


---

🔹 2. Difference between Method Syntax and Query Syntax in LINQ?

Great question — and it's a very common interview topic!

Here’s how you can explain the difference between Method Syntax and Query Syntax in LINQ using simple language + code examples, so that it's easy to remember and explain in interviews:


---

✅ Simple Interview Answer:

In LINQ (Language Integrated Query), we write queries in two ways:

1. Query Syntax — Looks like SQL

2. Method Syntax — Uses C# methods like .Where(), .Select()

Both give the same result. The difference is in style only.


---

🔹 Query Syntax (SQL-like style)

var result = from s in students
             where s.Age > 20
             select s;

Easy to read

Looks like SQL

Good for beginners or simple queries



---

🔹 Method Syntax (Fluent method style)

var result = students.Where(s => s.Age > 20);

More powerful

Required for advanced operations (e.g., joins, grouping with conditions)



---

✅ Sample Data for both examples:

public class Student
{
    public string Name { get; set; }
    public int Age { get; set; }
}

List<Student> students = new List<Student>
{
    new Student { Name = "Abhi", Age = 22 },
    new Student { Name = "Ravi", Age = 19 },
    new Student { Name = "Mona", Age = 25 }
};


---

🧠 Real-world analogy:

Query Syntax = Easy spoken English:
“Give me all students where age > 20.”

Method Syntax = Precise code-like language:
“students.Where(...).Select(...)”



---

💡 Interview Summary:

> LINQ gives two ways to write queries:

Query Syntax: looks like SQL, good for basic queries.

Method Syntax: uses C# methods, more flexible and powerful.


✅ Both are correct — you can choose based on your comfort or the query complexity.




---

Would you like me to give a practice question to test your understanding of both styles?




---

🔹 3. What is the difference between Select and SelectMany()?

Excellent question! This is one of the most commonly asked LINQ questions in C# interviews.


---

✅ Simple Interview Answer (Human-Friendly)

Select() : Keep the nested structure.
SelectMany() : Flattens everything into a single unit.

Example : 
  // GET: api/authors/names
    [HttpGet("names")]
    public IActionResult GetAuthorNames()
    {
        // ✅ Using Select()
        // Returns list of author names only
        var authors = _context.Authors
                              .Select(a => a.Name)
                              .ToList();

        return Ok(authors);
    }

    // GET: api/authors/books
    [HttpGet("books")]
    public IActionResult GetAllBooks()
    {
        // ✅ Using SelectMany()
        // Flattens authors -> books into one collection
        var books = _context.Authors
                            .SelectMany(a => a.Books)
                            .Select(b => b.Title)
                            .ToList();

        return Ok(books);
    }
}

//
In Sort : 
select() -> One-to-One projection.
SelectMany() -> One-to-Many flattening.

//Example Model

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;

    public List<Course> Courses { get; set; } = new();
}

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
}

👉 A Student can have many Courses.


---

Sample Data in Database

[
  {
    "Id": 1,
    "Name": "Abhishek",
    "Courses": [
      { "Id": 101, "Title": "Math" },
      { "Id": 102, "Title": "Science" }
    ]
  },
  {
    "Id": 2,
    "Name": "John",
    "Courses": [
      { "Id": 103, "Title": "English" },
      { "Id": 104, "Title": "History" }
    ]
  }
]


---

Select() Example

[HttpGet("students-courses")]
public IActionResult GetStudentsWithCourses()
{
    var result = _context.Students
        .Select(s => new
        {
            s.Name,
            Courses = s.Courses.Select(c => c.Title).ToList()
        })
        .ToList();

    return Ok(result);
}

Output (JSON):

[
  {
    "Name": "Abhishek",
    "Courses": ["Math", "Science"]
  },
  {
    "Name": "John",
    "Courses": ["English", "History"]
  }
]

👉 Select() keeps the hierarchy (student → list of courses).


---

SelectMany() Example

[HttpGet("all-courses")]
public IActionResult GetAllCourses()
{
    var result = _context.Students
        .SelectMany(s => s.Courses.Select(c => new
        {
            StudentName = s.Name,
            CourseName = c.Title
        }))
        .ToList();

    return Ok(result);
}

Output (JSON):

[
  { "StudentName": "Abhishek", "CourseName": "Math" },
  { "StudentName": "Abhishek", "CourseName": "Science" },
  { "StudentName": "John", "CourseName": "English" },
  { "StudentName": "John", "CourseName": "History" }
]

👉 SelectMany() flattens the hierarchy → you directly get rows of student-course pairs.


---

✅ In short:

Select() → Keeps nested structure (Student → Courses).

SelectMany() → Flattens everything into a single list (no nesting).



SelectMany() flattens everything into a single list.


Use SelectMany() when you want to work with all nested elements together.




---


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 4. How do you find the second highest salary using LINQ?

var secondHighest = employees
    .Select(e => e.Salary)
    .Distinct()
    .OrderByDescending(s => s)
    .Skip(1)
    .FirstOrDefault();


---

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 5. What is the difference between First(), FirstOrDefault(), Single(), and SingleOrDefault()?

Great question! These four LINQ methods are very commonly asked in interviews — and they confuse many developers. Let's explain them in the easiest, human-friendly way — with examples and a real-world analogy.


---

✅ Simple Definitions:

Method	What it does

First()	Returns the first item in the list. Throws error if list is empty.
FirstOrDefault()	Returns the first item, or default (null) if list is empty.
Single()	Returns the only item in the list. Throws error if there’s 0 or >1.
SingleOrDefault()	Returns the only item, or null if list is empty. Throws if >1 found.



---

🔹 Real-Life Analogy:

Imagine you're searching for your favorite book on a shelf:

First() → “Give me the first book I see.” (But crash if no book found!)

FirstOrDefault() → “Give me the first book, or null if nothing is there.”

Single() → “There must be only one copy of this book. If more, throw error.”

SingleOrDefault() → “I expect at most one, if none, return null, if more, error.”



---
using System;
using System.Collections.Generic;
using System.Linq;

namespace LinqExamples
{
    class Program
    {
        static void Main(string[] args)
        {
            // Example lists
            List<int> numbers = new List<int> { 10, 20, 30 };
            List<int> emptyList = new List<int>();
            List<int> singleItem = new List<int> { 99 };
            List<int> duplicates = new List<int> { 5, 5 };

            Console.WriteLine("==== First() ====");
            try
            {
                var first = numbers.First();
                Console.WriteLine($"First from numbers: {first}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in First(numbers): {ex.Message}");
            }

            try
            {
                var firstEmpty = emptyList.First();
                Console.WriteLine($"First from emptyList: {firstEmpty}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in First(emptyList): {ex.Message}");
            }

            Console.WriteLine("\n==== FirstOrDefault() ====");
            var firstOrDefault = numbers.FirstOrDefault();
            Console.WriteLine($"FirstOrDefault from numbers: {firstOrDefault}");

            var firstOrDefaultEmpty = emptyList.FirstOrDefault();
            Console.WriteLine($"FirstOrDefault from emptyList: {firstOrDefaultEmpty}");

            Console.WriteLine("\n==== Single() ====");
            try
            {
                var single = singleItem.Single();
                Console.WriteLine($"Single from singleItem: {single}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Single(singleItem): {ex.Message}");
            }

            try
            {
                var singleError = numbers.Single();
                Console.WriteLine($"Single from numbers: {singleError}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Single(numbers): {ex.Message}");
            }

            Console.WriteLine("\n==== SingleOrDefault() ====");
            try
            {
                var singleOrDefault = singleItem.SingleOrDefault();
                Console.WriteLine($"SingleOrDefault from singleItem: {singleOrDefault}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in SingleOrDefault(singleItem): {ex.Message}");
            }

            var singleOrDefaultEmpty = emptyList.SingleOrDefault();
            Console.WriteLine($"SingleOrDefault from emptyList: {singleOrDefaultEmpty}");

            try
            {
                var singleOrDefaultDup = duplicates.SingleOrDefault();
                Console.WriteLine($"SingleOrDefault from duplicates: {singleOrDefaultDup}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in SingleOrDefault(duplicates): {ex.Message}");
            }

            Console.WriteLine("\n=== Program Finished ===");
        }
    }
}





---

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 6. What is GroupBy in LINQ?

Used to group elements by a key (like SQL GROUP BY).

var grouped = employees
    .GroupBy(e => e.Department)
    .Select(g => new { Department = g.Key, Count = g.Count() });


---

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 7. How do you perform Left Join in LINQ?

var leftJoin = employees
    .GroupJoin(
        departments,                     // right table
        e => e.DeptId,                   // key from employees
        d => d.DeptId,                   // key from departments
        (emp, dept) => new { emp, dept } // result selector
    )
    .SelectMany(
        x => x.dept.DefaultIfEmpty(),    // ensures left join (include even if no dept match)
        (x, d) => new
        {
            EmployeeName = x.emp.Name,
            DepartmentName = d?.DeptName ?? "No Department"
        }
    );

foreach (var item in leftJoin)
{
    Console.WriteLine($"{item.EmployeeName} - {item.DepartmentName}");
}


---

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 8. What is the difference between IEnumerable and IQueryable in LINQ?

IEnumerable → used for in-memory data.

IQueryable → used for remote data (like Entity Framework queries to SQL DB).



---

/////////////////////////////////////////////////////////////////////////////////////🔹 9. Can you write a LINQ query to count how many employees per department?

var countByDept = employees
    .GroupBy(e => e.Department)
    .Select(g => new { Dept = g.Key, Count = g.Count() });


---

////////////////////////////////////////////////////////////////////////////////////////////////🔹 10. What is Deferred Execution in LINQ?

LINQ queries are not executed until you iterate over them (like in a foreach or .ToList()).


---

Would you like me to start a practice session with these topics — one-by-one with real coding and answer review like a mock interview?





/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////Resource
////////////////////////////////////////////////////////////////////
https://medium.com/@mmmsonu/linq-c-interviewer-questions-chatgpt-answers-cdbd08848cb6

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///How i can find top 1000 salary with pagination using linq ordered by employee name 
var pageSize = 100; // Number of records per page
var pageNumber = 1; // Current page number
var query = employees
    .OrderBy(e => e.Name) // Order the employees by name
    .OrderByDescending(e => e.Salary) // Then by salary in descending order
    .Skip((pageNumber - 1) * pageSize) // Skip the records for the previous pages
    .Take(pageSize * pageNumber); // Take the records for the current page
var top1000Salaries = query.Take(1000).ToList(); // Get the top 1000 salaries for the current page


//////////////////////////////////////////////////////////////////////////////////////////////////////////
What are the different ways to do lazy loading in linq ?
////////////////////////////////////////////////////////////////////////////////////////////////////////
How to join 2 list using linq ?
/////////////////////////////////////////////////////////////////////////////////////////////////////////
How to do left/right join in linq ?
///////////////////////////////////////////////////////////////////////////////////////////////////////
How to do union in linq ? How many types of union linq support ?
///////////////////////////////////////////////////////////////////////////////////////////////////////
Is it possible to do crud using linq ?
//////////////////////////////////////////////////////////////////////////////////////////////////////
Can we able to do CRUD in a single linq statement ?
/////////////////////////////////////////////////////////////////////////////////////////////////////








///////////////////////////// Do the left join in Linq
var result = students.GroupJoin(departments,
                               s => s.DepartmentId , 
                               d=> DepartmentId
                               (s, dGroup) => new {s, dGroup })
                .SelectMany(
                 x => x.dGroup.DefaultIfEmpty(),
                 (x,d) => new 
                  {
                  x.s.StudentId,
                  x.s.StudentName,
                  x.s.Departmet,
                  DepartmentName = d?.DepartmentName
                  });

/////////////////////////////////////Select the first row from a table
//Using LINQ Method Syntax(Most common)
var firstRow = table.FirstOrDefault();

This will return the first row of the table.

//apply condition
var firstRow = table.FirstOrDefault(x => x.Age > 25);

//
Using LINQ Query Syntax:
var firstRow = (from t in table select t).FirstOrDefault();


//////////////////////////////////You're doing great!

🔹 Q5:

You have two collections:

List<int> list1 = new List<int> { 1, 2, 3, 4, 5 };
List<int> list2 = new List<int> { 4, 5, 6, 7, 8 };

👉 Question:
Using LINQ, find the common elements between list1 and list2.

Solution: 
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public static void Main()
    {
        List<int> list1 = new List<int> { 1, 2, 3, 4, 5 };
        List<int> list2 = new List<int> { 4, 5, 6, 7, 8 };

        var common = list1
                     .Where(x => list2.Contains(x))
                     .ToList();

        Console.WriteLine("Common elements: " + string.Join(", ", common));
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////Most asked Sql Question in the interview
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////file:///C:/Users/Abhishek/Desktop/Interview%20Folder/SQL.pdf    (pls copy paste complete in the laptop)
///////////////////////////////////////////https://www.linkedin.com/posts/ankit7rma_sql-activity-7348232666191650816-1FPj/
////////////////1. Find the second highest salary
Table: employees(id, name, salary)
Values:
1, Shubham, 5000
2, Debug, 6000
3, WIth, 7000
Expected Output:6000
//
SELECT MAX(salary)
FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);
////////////////////////////////////////////////////////
2. Find employees with duplicate salaries
Table: employees(id, name, salary)
Values:
1, Shubham, 5000
2, Debug, 6000
3, Maurya, 7000
Expected Output:5000, 2

//
SELECT salary, COUNT(*)
FROM employees
GROUP BY salary
HAVING COUNT(*) > 1;
















////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////Chat GPT
//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////




////////////////////Write a Sql query to fetch the second highest salary from the employee table.(You can try by rank() and dence rank() )
SELECT DISTINCT salary 
FROM EMPLOYEE 
ORDER BY salary DESC 
OFFSET 1 ROW 
FETCH NEXT 1 ROW ONLY;

/////////////////////////if I have to find 10 th highest salary 
SELECT DISTINCT salary 
FROM EMPLOYEE 
ORDER BY salary DESC 
OFFSET 9 ROW 
FETCH NEXT 1 ROW ONLY;

//////////////////////need to review.
//////////////////////Write the SQL query to find the second highest salary along with the empId from the Employee table.
with SalaryRank As (Select salary, empId, ROW_Number()
over(Order by salary desc) AS Rank from EMPLOYEE)

Select salary , empId from SalaryRank where Rank = 2 ;

////////////////////////////////////////////////////
Write a Sql query to find duplicate records from a table called Employees based on the EmployeeNmae coloum.
Employee(EmployeeId, EmployeeName , Salary)

Select EmployeeName , Count(*) As NameCount
from Employee group by EmployeeName Having Count(*) > 1 ;

/////////////////////////////////////////////To remove duplicate records while keeping only one entry per EmployeeName, you can use a DELETE with a CTE and ROW_NUMBER():
WITH CTE AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY EmployeeName ORDER BY EmployeeId) AS rn
    FROM Employee
)
DELETE FROM Employee
WHERE EmployeeId IN (
    SELECT EmployeeId FROM CTE WHERE rn > 1
);

////////////////////////////////////////////
Write a Sql query to retrive the top 3 highest  salaries from the Employee table
Employee(EmployeeId, EmployeeName , Salary)

Select Distinct Salary
From Employee ORDER BY Salary DESC Offset 0 Rows Fetch Next 3 rows only;

/////////////////////////////////////////////////////////////////////////////////////////
Write a Sql query to find all employee who have the same salary in the Employee table.
Employee(EmployeeId, EmployeeName , Salary)
//
Select Employee,EmployeeName,Salary from Employee where Salary In  (
Select Salary from Employee  group by Salary Having Count(*) > 1 );

////////////////////////////////////////////////////////////////////////
Write a SQL query to retrieve the list of employees who have the highest salary in each department.
Employee(EmployeeId, EmployeeName , Salary,DepartmentId)

SELECT E.EmployeeId, E.EmployeeName, E.Salary, E.DepartmentId
FROM Employee E
INNER JOIN
(
    SELECT DepartmentId, MAX(Salary) AS MaxSalary
    FROM Employee
    GROUP BY DepartmentId
) DeptMax
ON E.DepartmentId = DeptMax.DepartmentId AND E.Salary = DeptMax.MaxSalary;


//////////////////////////////////////////////////////////////////////////////////
Write an SQL query to get the list of employees who do not have any manager.
Employee
---------
EmployeeId
EmployeeName
ManagerId

SELECT EmployeeName
FROM Employee
WHERE ManagerId IS NULL;

//////////////////////////////////
Write a Sql query to retrive the names of employees who earn than the average salary in the Employee table.
Table structure:
Employee(EmployeeId, EmployeeName , Salary)

Select EmployeeId , EmployeeName from Employee where Salary > (Select AVG(Salary) from 
Employee ) ; 

////////////////////////////////
Write a SQL query to fetch the department names along with the total number of employees in each department.
(Assume there are two tables: Employee(EmployeeId , EmployeeName , DepartmentId) and  Department(DepartmentId , DepartmentName)

Select  D.DepartmentName , Count(E.EmployeeId) , from Employee E Left Join Department D On D.DepartmentId  = E.DepartmentId 
group by  D.DepartmentName ;
 
/////////////////////////////////////////////////////////
Write a SQl Query to display departments that have more than 5 employees.

SELECT
    D.DepartmentName,
    COUNT(E.EmployeeId) AS TotalEmployees
FROM
    Employee E
LEFT JOIN
    Department D ON D.DepartmentId = E.DepartmentId
GROUP BY
    D.DepartmentName
HAVING
    COUNT(E.EmployeeId) > 5;


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////Interview Asked Question
//////////////////////////////////////////////////////////////////

Suppose that you have one table, in that you have a column called name, status and address. So
in status column is Boolean column. Suppose that in this particular table have six rows,
three is on and three is off in status coloum . So what I have to update the table to write the SQL queries, to change the on to off and off to on in status coloum .


///
UPDATE YourTable
SET Status = CASE 
               WHEN Status = 1 THEN 0 
               ELSE 1 
             END;


//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////Most asked questions from Ado.net
///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////Chatgpt 
Here’s a curated list of the most frequently asked ADO.NET interview questions for a .NET developer (especially with 3–5 years of experience). These are often asked by technical panelists to test your hands-on knowledge, connection handling, and real-world implementation.


---

✅ Top ADO.NET Interview Questions

//////////////////////////////////////////////////////////////////////////////////////////////🔹 1. What is ADO.NET?

> ADO.NET is a part of the .NET Framework used to interact with databases like SQL Server. It provides classes to connect, retrieve, insert, update, and delete data.




---

/////////////////////////////////////////////////////////////////////////////////////////////////🔹 2. What are the core components of ADO.NET?

> SqlConnection

SqlCommand

SqlDataReader

SqlDataAdapter

DataSet

DataTable





---

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 3. What is the difference between ExecuteReader(), ExecuteScalar(), and ExecuteNonQuery()?

Method	Use For	Returns

What is the difference between ExecuteReader(), ExecuteScalar(), and ExecuteNonQuery()?
Here’s the easiest way to remember and explain:

1. ExecuteReader():
✅ Use when you want to read rows from the database (like SELECT).
❓ Returns: Multiple rows (a reader object like SqlDataReader).
💡 Think of it as: "I want to fetch a table of data (rows and columns)."
Example:

SqlCommand cmd = new SqlCommand("SELECT * FROM Employees", con);
SqlDataReader reader = cmd.ExecuteReader();
2. ExecuteScalar():
✅ Use when you need a single value from the database.
❓ Returns: First column of the first row.
💡 Think of it as: "I just want one small value like count, name, or price."
Example:

SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM Employees", con);
int count = (int)cmd.ExecuteScalar();  // returns just one value
3. ExecuteNonQuery():
✅ Use when you're changing data (like INSERT, UPDATE, DELETE).
❓ Returns: Number of rows affected.
💡 Think of it as: "I’m not reading data, I’m writing or updating it."
Example:

SqlCommand cmd = new SqlCommand("DELETE FROM Employees WHERE Id = 1", con);
int rowsAffected = cmd.ExecuteNonQuery();  // returns number of rows deleted
🔁 Summary Table:
Method	Use Case	Returns
ExecuteReader()	SELECT (read rows)	Multiple rows (SqlDataReader)
ExecuteScalar()	SELECT (1 value)	Single value (first row/col)
ExecuteNonQuery()	INSERT/UPDATE/DELETE	Number of rows affected
🔊 Human-friendly memory tip:
Think like this:

Reader → I want to read data
Scalar → I want just one small value
NonQuery → I’m not reading, just modifying something
Let me know when you're ready and I’ll give you the polished answer for:



---

/////////////////////////////////////////////////////////////////////////////////////////////////////🔹 4. How do you use SqlConnection in ADO.NET?

using(SqlConnection conn = new SqlConnection("Your_Connection_String"))
{
    conn.Open();
    // Execute commands
}


---

////////////////////////////////////////////////////////////////////////////////////////🔹 5. What is SqlDataReader and how does it work?
->Read() -> Moves to the next record(returns false when nomore rows).
> Forward-only, read-only way of reading rows.

Very fast and memory efficient.

Used with ExecuteReader().




SqlCommand cmd = new SqlCommand("SELECT * FROM Employees", conn);
SqlDataReader reader = cmd.ExecuteReader();
while(reader.Read())
{
    var name = reader["Name"].ToString();
}


---

///////////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 6. What is the difference between DataReader and DataAdapter?

Feature	DataReader	DataAdapter

Mode	Connected	Disconnected
Usage	Read-only	Fill/update DataSet
Forward only	Yes	No
Best for	Fast reads	Multiple-table datasets



---

//////////////////////////////////////////////////////////////////////////////////////////////🔹 7. What is a DataSet and DataTable?

DataSet: In-memory collection of data tables.

DataTable: Represents one in-memory table.


DataSet ds = new DataSet();
adapter.Fill(ds, "Employees");
DataTable dt = ds.Tables["Employees"];


---

////////////////////////////////////////////////////////////////////////////////🔹 8. What are Parameterized Queries in ADO.NET? Why are they important?

> Used to prevent SQL Injection and to pass parameters safely.



SqlCommand cmd = new SqlCommand("SELECT * FROM Users WHERE Id = @Id", conn);
cmd.Parameters.AddWithValue("@Id", userId);


---

//////////////////////////////////////////////////////////////////////////////////////////🔹 9. What are connection pooling and its benefits?

> ADO.NET maintains a pool of connections to reuse for better performance. It avoids opening/closing DB connections repeatedly.




---

////////////////////////////////////////////////////////////////////////////////////////🔹 10. How to handle transactions in ADO.NET?

SqlTransaction transaction = conn.BeginTransaction();
SqlCommand cmd = conn.CreateCommand();
cmd.Transaction = transaction;

try
{
    cmd.CommandText = "INSERT INTO Orders VALUES (...)";
    cmd.ExecuteNonQuery();

    transaction.Commit();
}
catch
{
    transaction.Rollback();
}


---

////////////////////////////////////////////////////////////////////////////////////////////////////////🔹 11. What is the difference between Fill() and Update() in SqlDataAdapter?

Fill() → Populates a DataSet with data.

Update() → Pushes changes made in DataSet back to the database.



---

///////////////////////////////////////////////////////////////////////////////////////////////🔹 12. How can you call a stored procedure using ADO.NET?

SqlCommand cmd = new SqlCommand("sp_GetUser", conn);
cmd.CommandType = CommandType.StoredProcedure;
cmd.Parameters.AddWithValue("@UserId", 1);


---

///////////////////////////////////////////////////////////////////////////////////////////////////🔹 13. What are the different CommandType values in ADO.NET?

Text → SQL query

StoredProcedure → Procedure call

TableDirect → Select all from table (rarely used)



---

////////////////////////////////////////////////////////////////////////////////////////////🔹 14. What are some best practices when using ADO.NET?

Always use using() blocks.

Use parameterized queries.

Close connections in finally block.

Handle exceptions properly.

Avoid unnecessary DataSet use if only one table is needed.



---

✅ Would you like:

A full CRUD example using ADO.NET in .NET 8?

Practice questions?

Mock interview Q&A from ADO.NET?


Let me know!


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////ProductBasedCompany DSA
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

  Q> Can you find logest substring without Duplicate character.




/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////Recorded Video Youtube
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////Dependency Injection
-->create Runtime instance for that Service.
--> It provide loosely coupled behaviours.
///////////////////////////////////////How to enable Session in .netCore
///
Add service in DI container
builder.Services.AddSession();
//
Enable middleware
app.UseSession();
///////////////////////////////////////
2 method
developer exception page will be their
with the help of use exception handle we can write run time exception
we can use try , catch , block to handle the method in exceeption level.

/////////////////////////////////////////////////////////Monolothical and Microservices
Monolithical : We had a single IIS-hosting.NET MVC app with one SQL Server database, using Entity Framework, and develoyment was tightly coupled.

Microservices : We build .NET Core Web APIs deployement on Docker + Kubernetes , each with its own database , integrated via API Gateways with RabbitMQ for async events and Serilog + ELK for logging.

////////////////////////////////////////////////////Function and Store Procedure
Store Procedure
-> Store Procedure may or may not return value.
->Insert and update function in Store Procedure.
->we can write Transaction in Store Procedure.
->we can call the function in stored procedure
->we can use try catch block for runtime exception.
-> we can write ddl operation for Store Procedure.

FUNCTION
-> It will return value.
->Function we can only use select because it retriving the data.
->we can not write Transaction in function.
->we can not call store Procedure inside the function.
->we can can not write try , catch , block in function.
-> you can not write the ddl operation for function.

/////////////////////////////////////////////////////////////////////////////Performance Tuning we are doing
we are doing for store Procedure
Supose we want to increse the performance of store Procedure then
->we can do set No count 
->instead of calling table name I will dbo.TableName.
->Instaed of * we can use selected coloum.
->we avoid aggregate functon in where clouse.
->we need to do proper indexing on table
->we should avoid ddl operation on store Procedure.
->we will use table varible instead of temp table.

////////////////////////////////////////////////////////////////////////////what is diffrence between var and dynamic keyword
->at the time declaration , we need to assign the value of var keyword,we can step we can assign the same datatype value .
->In dynamic we can assign the any time of data value .
/////////////////////////////////////////////////////////////performance tuning in web api
faster json serializer.
ansyn ways of creating web api
output chaches
we collect multiple result set in single web api,we will get the response in one api
/////////////////////////////////////////////////////////////////////////////////////
















////////////////////////////////////////////////////////////////////////////////////////////Managerial Round
//////////////////////////////////////////Tell me about previous Project

Thanks for giving me change to work on my project.
Here we are following agail methodology,Here 
and for the defect tracking we use jira tools and for writing test cases.
We are involved in all the agile ceremonies that is scrum , sprint planning meeting retrospective that all my project are ,


/////////////////////////////////////////////////////////////////////Daily working Task
=>Once I login first I will check the mail,then I will part of scrum meating that is part of daily stand up meating, I will change to clearify my dout , what the blocker I faced and what the , before sprint start their will sprint palnning task,user stories product owner assign to ous 
then estimation will going to happencapicity and velocity of team , assigning the story point o the task and after 


///////////////////////////////////////////////////////////////////////////Why you loocking for change in career
Situation:
I worked in my last company for about 5 years. I learned many things there — how to code, how to work with teams, and how to handle tasks.

Task:
But I saw that new tools and new technologies are coming in the market. If I stay with only old knowledge, I will not grow.

Action:
So, I started learning new skills and new technologies in my free time. I also improved how I talk with people and share ideas. Then I decided to look for a new role where I can use these new skills.

Result:
Now, I am ready to bring both my past 5 years of experience and my new skills to the next company, so I can do better work and also keep growing.


/////////////////////////////////////////////////////open Id Implementation

////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////Redefine the Answer
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////L1 round topis
//C#
1. OOP Concepts (Inheritance, Polymorphism, Encapsulation, Abstraction)
1.1 extension method - 18 june.
2. Exception Handling (try-catch-finally, custom exceptions)
3. Collections (List, Dictionary, HashSet, Queue, Stack)
4. LINQ (Filtering, Projections, Joins, Aggregations)
5. Delegates and Events (Multicast Delegates, Event Handlers)
6. Async and Await (Task, Task.Run, Parallel Programming)
7. SOLID Principles and Design Patterns (Singleton, Factory, Repository)
8. File I/O Operations (StreamReader, StreamWriter, FileInfo) // Less Important
9. Memory Management (Garbage Collection, IDisposable, using statement)
10. Reflection and Attributes //Not Yet Revision
11. Performance and Security.

//.Net Core
1. Middleware and Request Pipeline
2. Dependency Injection (Transient, Scoped, Singleton)
3. Configuration Management (appsettings.json, Environment Variables)
4. Logging (Serilog, NLog, Microsoft Extensions Logging)
5. Entity Framework Core (Migrations, LINQ Queries, Relationships)
6. Web API Development (GET, POST, PUT, DELETE, Versioning)
7. Authentication and Authorization (JWT, Identity, Roles)
8. Caching (In-Memory, Distributed)
9. Global Exception Handling
10. API Documentation (Swagger)
11. Performance and Security.

//Angular
1. Components and Modules (Lifecycle Hooks, Communication)
2. Services and Dependency Injection
3. Routing and Navigation (Lazy Loading, Guards)
4. Forms (Template-driven, Reactive Forms, Validation)
5. HTTP Client (GET, POST, PUT, DELETE, Interceptors)
6. Observables and RxJS (map, filter, switchMap, debounceTime)
7. Component Communication (Input, Output, EventEmitter)
8. State Management (ngRx basics)
9. Error Handling and Global Interceptors
10. Angular Material for UI Components
11.  Performance and Security.

//Ms Sql Server
MS SQL Server

1. Joins (Inner, Left, Right, Full Outer)
2. CRUD Operations (Insert, Update, Delete, Select)
3. Stored Procedures and Functions
4. Indexing (Clustered, Non-clustered)
5. Transactions and Locking Mechanisms
6. Views and Triggers
7. Query Optimization and Execution Plans
8. CTE (Common Table Expressions) and Window Function
9. Data Types and Constraints
10. Backup and Restore.
11. Performance and Security.


///Soft Skills & Concepts:
1. Agile Methodologies (Scrum, Sprint Planning, Retrospectives)
2. Code Review Practices and Best Coding Standards
3. Debugging Techniques and Troubleshooting
4. Communication Skills for Team Collaboration
5. Time Management for Delivering Features on Time

//////////////////////L2 round topics

//What is Angular ?
Angular is a component-based framework for building structured, scalable and single page application.
//What is the Angular Advantages ?
1> it is relatively simple to build a single page application.
2> Flexible and structural client application.
3>Angular is cross Plateform and opensourse.
4>Writing Reusable code is easy.
5> Testing is easy.

//What is the diffrence between Angular and Angular JS ? or What are the advantages of Angularover AngularJS ?
 ///Angular js
1> It is only supports javaScript.
2> This framework has a model-view-controller(MVC) architecture.
3>It does have CLI tool.
4>It does not use Dependency Injection.
5> It is not a so fast.

/////Angular
1>It support both JavaScript and TypeScript.
2> This framework has a component archotecture.
3> It has CLI
4> It uses Dependency Injection.
5> It also support moble browser.
6> It is very fast.

//////////////
Study from File.

What is NPM?
--> NPM(Node Pakage Manager ) is an online repository from where you get thousands of free libraries which can be used in your angular application 

//What is the cli
--> The Angular Cli(command-line interface) is a tool that you use to initialise and deplop Angular applications directly from Terminal.
Asynchrouns operstion :- Task running in the background without stopping the application.

/////////////////////
What is the diffrence between JIO and AOT in Angular ?

-->Both JIT and Aot are used to compile Angular Typescript component to Javascript , because browser understands Javascript not Typescript.

Just-In-Time(JIT)   Compiles your application in the browser at runtime.

Ahead-of-Time(AOT)  Compile your application and libraries at build time.


-->All the latest Angulae versions use AOT to compile Typescript to Javascript.
////////////////////////
What is a Selector and Template
Selector :- A selector is used to identify each component uniquely into the component tree.
--> Where to show.

Templete --> A Templete is a HTML View of an Angular component.
Templete --> What to show

->
->
->
->
->
->

Synchrouns operation :- Task excute one after another and app waits for each task to complete 
moving to the next one.

->
  ->
    ->
      ->
        ->
          ->



Observables                                 Promises

-> Emit multiple value over a          Emit single value over the time
   period of time.


->Are lazy. they're not excuted until          -> excute Immediate after creation
  we subscribe to they  using the subscriptiom

-> have cancell by using unsubcribe.            -> Are not cancelled.


/////////////////////////
RxJx
Rxjs is library of javaScript used in angular for handling asynchrouns data such as Api calls. It provide observables.

////////////////////////
What is observable? How to implement it.
An Observable in RxJx helps us handle data strems like Api response or user input , in a smooth and flexible way.

1> Import Observable from Rxjx.
2> Create the Observable that emits data.
3> Subscribe to the component.

/////////////////////
What is the role of HttpClient in Angular ?
 
Httpclient is build in service provided by angular to http requests(Get , post , put , delect 
to send and receive the data from api or server.

///////////////////////////
What are Angualr Forms ? What are the type of Angualar Forms  ?

->What forms are used to handle user's input and manage form data in an application.
->Two type of Angular form.

Template Driven Forms             
-> Most of the code Written in Html.

-> Add FormModule in AddModule to Activate It.

-> best for simple form and have less control.


  Reactive Forms

-> Most of the code Written in TypeScript file.

-> Add ReactiveModule in AppModule to Activate it.
-> Best for large App Application and have more control.


/////////////////////////////
What is Authentication and Authorization in Angular

Authentication : - Confirms who the user is(valid login or not)
Autherisation :- Check what the user is allowed to do(access control for resourse)

//////////////////////////////////////
Can I give the answer for interview, What is the role of HttpClinet in Angular : HttpClient is built in service provided by 
angular for Http request (Get, post, patch , delete) to send and receive the request , if wrong pls correct with most easiest word for human being

//////////////////////////////////// C#
///////////////////////////////////  C#
//////////////////////////////////   C#

///////////////////////////////////////////////
What is Inheritance and why is it Important


->Inheritance is a OOPs concept , child class gets the properties from and behaviors(methods) of a parent class. 

-> Inheritance is used to reusibility and abtraction of code.

Example :
public class Employee
{
public Employee()
{
  //
}
 private int salary;
 
 public class Salary
{
  get
 {
   return experience;
 }
 set
  {
  experience = value ;
 }
}
}


class ContractEmplyee : Employee
  public void CalculateSalary()
 {
  int salary = Experience * 300000 ;
  }

  Console.WriteLine(salary);
  
}


///////////////////////////////////////////
What are type of Inheritance

//////////////////////////////////////
What are the Diffrent type of Inheritance.

1>Single Inheritance
one child class inheritance from one parent class

class Parent
{
public void Show()
{
 Console.WriteLine("This is Parent class");
}

}

class Child : Parent
{
 // child inheritance from parent
}

class Program
{
 static void Main()
 {
  Child obj = new Child();
  obj.Show();
}
}

2> Multilevel Inheritance

A Child class inherits from Parent, and Parent inherits from GrandParent

class GrandParent
{
 public void ShowGrandParent()
{
  Console.WriteLine("GrandParent class");
}

class Parent : GrandParent
{
 public void ShowParent()
{
 Console.WriteLine("Parent class";)
}
}


class Child : Parent
{
 public void ShowParent()
 {
  Console.WriteLine("");
 }
}
class Program
{
 static void Main()
{
 Child obj = new Child();
 obj.ShowGrandParent();
obj.ShowParent();
obj.ShowChild();
}
}

3>One Parent class is get inherited by multiple Child classes

class Employee
{
  public void Work()
 {
   Console.WriteLine("Employee working");
 }
}

class ContractEmplyee : Employee
{
  public void ContractType()
 {
  Console.WriteLine("Contract Employee")
 }
}

class ParmanentEmployee : Employee
{
  public void PermanentType()
  {
   Console.WriteLine("Permanent Employee");
  } 
}

class Program
{
 static void main()
 {
  ContractEmplyee cEmp = new ContractEmplyee();
   cEmp.Work();
   cEmp.ContractType();

  PermanemtEmplyee pEmp = new PermanentEmplyee();
   pEmp.Work();
   pEmp.PermanentType();
 }
}


///////////////////////////////////////////////////
What is Abtraction
Abraction is oops concept , it will show the important part and hide the implementation part ,
    let take the example when we  give exlerate of bike speed to bike will increase but we do
    not know how the speed of bike is increasing

class Employee
{
    public void Main(string[] args)
    {

        Salary();
    }

    public  void Salary()
    {
        ContactEmployeeSalary();
        ParmantEmplyeeSalary();
    }

    public  void ContactEmployeeSalary()
    {
        
    }
    public  void ParmantEmplyeeSalary()
    {
        
    }
}

/////////////////////////////////////
What is Encapsulation
Encapsulation is oops concept , it is used to wrap the data method and property into single units.

example

public class Employee
{
public class EmExperience;

public int Employee
{
 get
{
 return emExperience;
}
 get
{
 emExperience = value;
}
}

public void Main(string[] args)
{
 Employee obj = new Employee();
 
 obj.EmExperience = 3;
 
}


/////////////////////////////////////////////////////////////////
what is Abstraction.

👉 Abstraction is an OOP concept that hides unnecessary details and only shows important parts to the user.

Example:
When you accelerate a bike, the speed increases, but you don’t see how the engine works internally.
The complexity is hidden, and only the important part (speed control) is visible.

How do we achieve Abstraction in C#?
✔ Using abstract classes (with abstract methods).
✔ Using interface (where methods are declared but not defined).

Example Code in C#:
csharp
Copy
Edit
// Abstract class: Defines common structure but hides implementation
abstract class Employee  
{  
    public abstract void CalculateSalary();  // Only method definition (no implementation)  

    public void ShowDetails()  
    {  
        Console.WriteLine("Showing Employee Details");  
    }  
}  

// Permanent Employee class implements its own salary calculation
class PermanentEmployee : Employee  
{  
    public override void CalculateSalary()  
    {  
        Console.WriteLine("Salary = HoursWorked * HourlyRate");  
    }  
}

// Contract Employee class implements a different salary calculation
class ContractEmployee : Employee  
{  
    public override void CalculateSalary()  
    {  
        Console.WriteLine("Salary = (HoursWorked * HourlyRate) - 4000");  
    }  
}

// Main Program
class Program  
{  
    static void Main()  
    {  
        Employee emp1 = new PermanentEmployee();  
        emp1.CalculateSalary();  // Output: Salary = HoursWorked * HourlyRate  
        emp1.ShowDetails();  

        Employee emp2 = new ContractEmployee();  
        emp2.CalculateSalary();  // Output: Salary = (HoursWorked * HourlyRate) - 4000  
    }  
}


//////////////////////////////////////////////////////////
What is Encapsulation

Q: What is Encapsulation?
👉 Encapsulation is an OOP concept that wraps data (variables) and methods (functions) inside a single unit (class).
👉 It hides the data from direct access and provides controlled access using getter and setter methods.

✅ Corrected Example in C#:
csharp
Copy
Edit
public class Employee
{
    private int empExperience;  // Private variable (cannot be accessed directly)

    // Public property with getter and setter
    public int EmpExperience
    {
        get 
        { 
            return empExperience;  
        }
        set 
        { 
            if (value > 0) // Prevents negative experience
                empExperience = value;  
            else
                Console.WriteLine("Experience cannot be negative");  
        }
    }
}

// Main Program
class Department
{
    static void Main(string[] args)  // Fixed the typo in Main()
    {
        Employee emp = new Employee();  
        emp.EmpExperience = 3;  // Setting the experience
        Console.WriteLine("Employee Experience: " + emp.EmpExperience);  // Getting the experience
    }
}

/////////////////////////////////////////////////////////////////////Polymorphism



Polymorphism is oops concept , poly means many and form means form , it will behave diffrent in diffrent place .

The word "Run" can be used in different contexts:
1️⃣ "Running a business"(managing it)
2️⃣ "Running a bike"(riding it)

     -> we have two type of polymorphism 
    1> overloading : In overloading method have the same name in the same class and all the method work diffrently ways. It will happen at compiletime.
    2> overriding  : In overriding  method have the same name and signature but in the diffrent class . it will happen at Runtime.

    or
     Types of Polymorphism in C#:
1️⃣ Method Overloading (Compile-Time Polymorphism)

The same method name is used with different parameters in the same class.

This is resolved at compile time.

2️⃣ Method Overriding(Runtime Polymorphism)

A child class provides a new implementation of a method already present in the parent class.

This happens at runtime.


// Overloading
    class Calculator
{
    // Same method name but different parameters
    public int Add(int a, int b)
    {
        return a + b;
    }

    public int Add(int a, int b, int c)
    {
        return a + b + c;
    }

    public double Add(double a, double b)
    {
        return a + b;
    }
}

class Program
{
    static void Main()
    {
        Calculator calc = new Calculator();
        Console.WriteLine(calc.Add(5, 10));      // Calls method with 2 parameters
        Console.WriteLine(calc.Add(5, 10, 15));  // Calls method with 3 parameters
        Console.WriteLine(calc.Add(5.5, 10.5));  // Calls method with double parameters
    }
}

// Overrinding
class BaseClass
{
    public virtual void Greet()
    {
        Console.WriteLine("Welcome from Base Class!");
    }
}

class SubClass : BaseClass
{
    public override void Greet()
    {
        Console.WriteLine("Welcome from Sub Class!");
    }
}

class Program
{
    static void Main()
    {
        BaseClass obj = new SubClass();
        obj.Greet();  // Calls the overridden method from SubClass
    }
}

/////////////////////////////////////////////////////

WHEN TO USE INTERFACE AND WHEN ABSTRACT CLASS? :::



Abstarction: -
--> common Property / behavior to all the derived class.
--> when we need property, feild, method, contructor.
--> when we want that implementation of method in the same way then go for abstraction.

abstract public Employee
{
    public abstract void CalculateSalary(); 
    
   public void CalculateSalary()
   {
    Console.WriteLine("Tax calculation");
   }
}
Interface: -

--> when you want multiple inheritance achieve then go for Intrface,
--> when you go for contract.
--> when we want loosely coupled thing.
--> 
interface emEmployee
{ 
  void play();
}




///////////////////////////////////////////////
What is Nullable type Nullable type is used to store null values;
this is useful when you want to represent a value that may or may not be present.

using System;
class Program
{
    static void Main(string[] args)
    {
        int? a = null;
        Console.WriteLine(a);
    }
}





/////////////////////////////////////////////////////////////////////////What is the Constructor and type.
--> A Constructor is a special method in a class that is automatically called when we create an object.

--> It is mainly used to initialize the object.

--> The constructor name is same as the class name and it has no return type.

--> Application
1> Initializing the objects with default or required data.
2>Dependency Injection


1> Default Constructor
-->No parameters.
-->Automatically initizes object when no value is passes.

Application
Frameworks like Entity Framework require a parameterless constructor for mapping.

example

public class Product
{
public int Id {get; set ;}
public string Name {get ; set ;}

// Default construction for EF or serialization
public Product()
{
}
}

2> Parameterized Constructor
-> Takes parameter to set values when object is created.

Application 
Dependency Injection., Injecting services in ASP.Net Core
Example
public class OrderServices
{
 private readonly IOrderRepository _repository;

 public OrderService(IOrderRepository repository)
{
 _repository = repository;
}
}

3> Static Constructor
-> Used to initialize static member of the class.
-> Called only once, automatically, when the class is first used.

use : When you want to initialize static data, like connection strings, only once before the class is used. ex : Loading configuration.

Example
public class ConfigManager
{
pulic static string ConnectionString;
static ConfigManager()
{
  ConnectionString = "Server=MyServer";
}
}

4> Private Constructor
   -> Used when we want to restrict the object creation fro  outside.
   -> Mostly used in Singleton Desigb Pattern.
   -> Cannot be inherited.

example:
public class Logger
{
 private static Logger _instance;
 private Logger() {} // Private constructor

 public static Logger GetInstance()
{
   if(_instance == null)
{
  _instance = new Logger();
}
return _instance;
}
}

///////////////////////////////////////////////////////////////////////////What is Method Hinding
--> We use Method Hinding when a child class define a method with the same name as a method in the parent class - but we don't want to override it , just hide or replace it in the child class. 

In Method Hinding , you can hide the implementation of the methods of a base class from the derived class using the new keyword.


When to use it.
--> When the parent class method is not virtual or can't be overridden.
--> When you want the child method to behave diffrently - but only when acccessed throught the child refrence.


example

public class Parent
{
 public void Show()
{
  Console.WriteLine("Parent Show Method");
}
}

public class Child : Parent
{
 public new void Show()
{
 Console.WriteLine("Child Show Method");
}
}


Parent p = new Parent();
p.Show() // output : Parent Show Method

Child c = new Child();
c.Show(); // Child Show Method

Parent pc  = new Child();
pc.Child(); // Parent show Method(hidding , not overring)
///////////////////////Generic
What are Generics in C#?

Generics allow us to create classes, methods, and interfaces that work with any data type in a type-safe way.

Instead of writing the same code for different types (like int, string, etc.), we write it once using generics — and it will work for any type.

Why and When to Use Generics?
Type safety – No need for casting.

Code reusability – Write one method for all data types.

Performance – Avoids boxing/unboxing (in value types).

Clean and maintainable code.

using System;

class Program
{
    static void Main(string[] args)
    {
        bool isEqual = Calculator.AreEqual<int>(10, 10);
        bool isStrEqual = Calculator.AreEqual<string>("Hello", "Hello");

        Console.WriteLine("Int equal: " + isEqual);
        Console.WriteLine("String equal: " + isStrEqual);
    }
}

public class Calculator
{
    public static bool AreEqual<T>(T a, T b)
    {
        return a.Equals(b);
    }
}

///////////////////////////////////////////////////////////
using System.Security.AccessControl;

What is the diffrence between arr and arralist :::

Array

-->Arrays is fixed in size.
-->Arrays are strongly typed.
-->better in performance because typed is Known at compile time.

EXample Array
class Program
{
    public static void Main(string[] args)
    {
        int[] array = new int[10];
        array[0] = 1;
        array[1] = 2;
    }
}

ArrayList

-->Arraylist is not in fixed size.
-->Arraylist is not strongly typed.
--> Arraylist is not better in performance because it is not strongly typed.

EXample Arratlist

class Program
{
    public static void Main(string[] args)
    {
        ArrayList ar = new ArrayList();
        ar.Add(1);
        ar.Add(2);
    }
}

///////////////////////////////////////
using System;

What is the Imumerable in c# :::
--> IEnumerable is an interface in C# that allows us to loop through a collection using a foreach loop.
--> It works internally with IEnumerator, which moves one item at a time.
--> When we use IEnumerable, it pulls data one by one — not all at once in memory.
--> It is useful for read-only access to a collection.


when to use:

--> When you just want to iterate (loop) through a collection like List, Array, Dictionary, etc.
--> Ideal when you don’t need to modify the collection.
--> You can use LINQ with it (Where, Select, etc.).

example
class Program
{
    public static void Main(string[] agts)
    {
        var employee = new List<Employee>()
        {
            new Employee() { ID = 1, Name = "John", Salary = 1000 },
            new Employee() { ID = 2, Name = "Jane", Salary = 2000 }
        };
        foreach(var emp in employee)
        {
            Console.WriteLine($"ID: {emp.ID}, Name: {emp.Name}, Salary: {emp.Salary}");
        }
    }
}

public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public double Salary { get; set; }
}

--> IEnumerable is lazy - loaded — it fetches data only when you access it. This is great for performance 
    when dealing with large datasets.

///////////////////////////////////////////////////////////////


What is the diffrence betwenn Inumerator and Inumerable :::

    IEnumerable
    -- > It represents a collection that can be iterated (looped) using foreach.
    -- > It has one method: GetEnumerator(), which returns an IEnumerator

    IEnumerable<string> fruits = new List<string> { "Apple", "Banana" };

IEnumerator

    It is used to loop through each item one by one in a collection
    It has two main methods:

MoveNext() → moves to next item

Current → gives the current item

    Real-Life Analogy:
IEnumerable = TV Remote(it lets you go through channels)

IEnumerator = Finger that presses Next button (moves from one channel to another)

    using System;
using System.Collections;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        List<string> colors = new List<string> { "Red", "Green", "Blue" };

        IEnumerable<string> enumerable = colors;
        IEnumerator<string> enumerator = enumerable.GetEnumerator();

        while (enumerator.MoveNext())
        {
            Console.WriteLine(enumerator.Current);
        }
    }
}

Final One-Liner (For Interview):
"IEnumerable represents the whole collection, and IEnumerator is the tool that moves through each item in that collection."
//////////////////////////////////////////////////
//Diffrence between Method Overriding and Method hinding
overrding
Say all the point from kindle
public class Parent
{
    public virtual void Show() => Console.WriteLine("Parent");
}

public class Child : Parent
{
    public override void Show() => Console.WriteLine("Child");
}

Parent obj = new Child();
obj.Show();  // Output: Child  (object type decides)


Method Overriding:
→ Child class changes the parent’s method.
→ Uses override keyword.
→ Runs based on object type.
→ Decided at runtime.


//Hiding
Hiding

public class Parent
{
    public void Show() => Console.WriteLine("Parent");
}

public class Child : Parent
{
    public new void Show() => Console.WriteLine("Child");
}

Parent obj = new Child();
obj.Show();  // Output: Parent  (reference type decides)


Method Hiding:
→ Child class hides the parent’s method.
→ Uses new keyword.
→ Runs based on reference type.
→ Decided at compile time.

 

/////////////////////////////////////////////
what is Extensition Methods :::
Extension method is a method injected (added) into an existing class
(or struct or interfaces), without modifying the sourse code of that 
class(or struct or interface).

--> Create the class without extensions method.
--> Create the static class with static method.
-->static class that uses the this keyword before the first parameter 
--> to extend the functionality of an existing type without modifying the original type


///As developer
//
namespace Products
{
    public class Product
    {
        public int WorkingHours ;
        public int WorkingPerWages;
    }
}
//

using Products;

namespace ProductExtensions
{

    public static class ProductExtension
    {
        public static int CalculateSalary(this Product product)
        {
           return  product.WorkingHours * product.WorkingPerWages;
        }
    }
}
//
using Products;

using ProductExtensions;

namespace Programs
{
  class program
  {
        public static void Main(string[] args)
        {
            Product p = new Product() { WorkingHours = 100 ,
         WorkingPerWages = 500 };
            Console.WriteLine(p.CalculateSalary());
        }
  }
}

//As the base library
public static class IntExtensition
{
    public static int DoubleIt(this int number)
    {
        return number * 2;
    }
}

class Program
{
    static void Main()
    {
        int x = 5;
        int result = x.DoubleIt();// Calls the extensitiom method
        Console.WriteLine(result); // Output: 10
    }
}

///////////////////////////////////////
//What are the important components of .Net Framework ? What are their roles?
//-->CLR : It's the engion of .Net that runs your code, manages memory,and handle security.
//-->cts : It ensure all .net languages use the same data types so they can work together.
//-->FCL or BCL :It's a big collection of ready-made classes and functions you can use to build your apps faster.
//-->CLS :It's a set of rules that .Net languages follow so they can talk to each other easily.


//////////////////////////////////////////////////
////////////////////////////////////////////////SQL
////////////////////////////////////////////////
///////////////////////////////////////////////
What is the diffrence between where and having in sql?
//where
-->Where is used to filter the rows before grouping.
-->you cannot .
Having
-->Having is used to filter groups after using the Group By.
--> You can use aggregate functions in HAVING.

Example:
Select Department , Avg(salary) AS
AverageSalary from Employee
where status = 'Active'
group by Department
Having AVG(Salary) > 50000;
//////////////////////////////What is Diffrence bewteen Delete,Truncate , Drop in Sql

////Delect 
1> Used to remove the specific rows from a table.
2>you can use where to delete the 
3>can be rolled back(if inside a transaction)
4>It is a DML(Data Manipulation Language) command.
5>Table structure does not changes.

Example:
Delect from Employee Where Employee = 5 ;

//////Truncate
1>Remove all rows from table(empties the table).
2>Cannot be rolled back in many 
databases(in SQL Server, rollback is possible if used a transaction).
3>It is a DDL(Data Defination Language) command.
4> Table structure does not changes.

Example
TRUNCATE Table Employee;

//Drop
-->Delete the entire table from database(structure + data);
--> Cannot be rolled back.
--> It is DDL(Data Defination Language) command

Example
Drop Table Employee;

-->In short Where filters individual recoreds, Having filters grouped results.

///////////////////////////////////////////////////////What is the diffrence between Union And Union All.
//Union
--> Combines the result of two or more Select statements.
--> Remove duplicate rows(show only unique data).
--> All SELECT statements must have the same number of columns and the same data type.

Example
Select Name from TableA
Union 
Select Name from TablesB

UNION All
--> Combines the result of two or more SELECT statements.
--> Keeps all the rows, including duplicates.
--> All SELECT statement must have the same number of coloums and the same data type


Example
SELECT Name from TableA.
Union All
Select Name from TablesB.

Final
Union --> remove duplicate row
UnionALL --> Keep all the rows.

/////////////////////////////////////////
How to optimise the SQL Query 
1. Use Proper Indexing

You have a Customers table and want to find a customer by their email.

---

Step 1: Create a Table

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name NVARCHAR(100),
    Email NVARCHAR(100),
    Phone NVARCHAR(20)
);

Step 2: Insert Sample Data

INSERT INTO Customers (CustomerID, Name, Email, Phone)
VALUES
(1, 'Alice', 'alice@example.com', '12345'),
(2, 'Bob', 'bob@example.com', '67890'),
(3, 'Charlie', 'charlie@example.com', '24680');

---

Step 3: Query Without Index

SELECT * FROM Customers WHERE Email = 'bob@example.com';

This will scan the whole table (called Table Scan) because no index exists on Email.


---

Step 4: Add an Index

CREATE NONCLUSTERED INDEX IX_Customers_Email ON Customers(Email);

---

Step 5: Run the Same Query Again

SELECT * FROM Customers WHERE Email = 'bob@example.com';

Now SQL Server will use the index on Email to quickly find the row, instead of scanning the whole table.

2. Avoid SELECT *

Fetch only needed columns.

-- Bad
SELECT * FROM Orders;

-- Good
SELECT OrderID, OrderDate, CustomerID FROM Orders;


---

3. Use EXISTS Instead of IN for Subqueries

EXISTS is faster when checking existence.

-- Slower
SELECT Name FROM Employees
WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'NY');

-- Faster
SELECT Name FROM Employees e
WHERE EXISTS (
  SELECT 1 FROM Departments d
  WHERE d.Location = 'NY' AND e.DepartmentID = d.DepartmentID
);


---

4. Avoid Functions on Indexed Columns in WHERE

Functions prevent index use.

-- Bad: can't use index
SELECT * FROM Users WHERE YEAR(DateOfBirth) = 1990;

-- Good
SELECT * FROM Users WHERE DateOfBirth >= '1990-01-01' AND DateOfBirth < '1991-01-01';


---

5. Use Joins Instead of Subqueries Where Appropriate

-- Subquery (can be slower)
SELECT Name FROM Students
WHERE StudentID IN (SELECT StudentID FROM Results WHERE Score > 90);

-- Better
SELECT DISTINCT s.Name
FROM Students s
JOIN Results r ON s.StudentID = r.StudentID
WHERE r.Score > 90;


---

6. Use Table Variables or Temporary Tables for Large Intermediate Data

-- Using temp table for heavy processing
SELECT * INTO #TempLargeData FROM LargeTable WHERE Status = 'Active';

-- Then work with #TempLargeData
SELECT COUNT(*) FROM #TempLargeData;


---

7. Update Statistics and Use Query Plans

-- Update statistics
UPDATE STATISTICS Products;

-- View execution plan in SSMS (Ctrl + M before running query)


---

8. Use WITH (NOLOCK) Carefully for Read-Only Queries

-- Avoids locking (but allows dirty reads)
SELECT * FROM Orders WITH (NOLOCK);





//////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
////////////////////////////////////////////////////////.NetCore
///////////////////////////////////////////////////////
////////What is .NetCore
--> .Net Core is a free, open-sourse,and cross-plateform framework for building diffrent types of applications like web apps, Apis and cloud services
--> it runs on windowns , Linux and Mac.

//////////Key Point
Open-Sourse
Cross-plateform
Used for building modern web apps,APIs,cloud services, console apps and more. 
/////////////////////////////////////////////////////How to handle the error in Asp.netcore.

Global- Error Handling - so the whole app doesn't crash:

if(app.Enviroment.IsDevelopment())
{
app.UseDeveloperExceptionPage();//Show detailed error in development;
}
else
{
 app.UseExceptionHandler("/Home/Error");//Show friendly erro page in Production.
}

Try-catch Block -for specific code
try
{

}
catch(Exception ex)
{
_logger.LogError(ex,"Something went wrong.");
return StatusCode(500, "An error occured.");
}

-> Global error handling saves the full app.
-> Try-Catch handles errors in specific code blocks.
-> Logging helps us track the issue.

////////////////////////////////////
///////////////////////////////////Some of important question
///////////////////////////////////
What is diffrence between rest api and Soap api.

//Rest Api
--> Works over HTTP protocol.
--> Sends data in JSON format(easy to read/write).
--> It's lightweight and faster.
--> Used in modern web and mobile apps.


//Soap API
-->Used only XML format.
-->Has strict rules and security.
-->More heavyweigth and slower than REST.
--> Often used in bancking, finance, enterprise systems.
--> Example: XML request with a predefined structure.

Simple Analogy:
REST is like a WhatsApp message - quick and simple.
SOAP is like a legal document - formal, secure and structure.

Summary(one-liner for interview)
REST is faster and simple; Soap is strict and more secure.

//////////////////////////////////////
First() and FirstOrDefault() are used to get the first matching element from a list or collection.


///First()
--> Meaning : Return the first element that matches your condition.
-->If no match is found : It will throw an exception.
-->When to use : When you are sure the collection will have at lease one matching item.
 
example :
var number = new List<int>{1,2,3,4,5};
var firstEven = numbers.First(n => n % == 0);

2) FirstOrfault()
 --> Meaning : Return the first element that matches your condition.
 --> If no match is found : It will return the default value(like null for classes, 0 for numbers).
 When to use --> When you're not sure if the list contains a match, and you want to avoid errors.

example :
 var number = new List<int> {1,3,5};
 var firstEven = number.FirstOrDefault(n => n % 2 == 0);

////////////////////////////////////////////////////////////////////////////////////////////////////////Performance and Security Question for L2 Round
Q> How do you improve the performance of .net Core application?
-> Caching strategies(In-Memory, Distribution Cache).
-> Async programming and Task Parallel Library.
->Reducing database calls and optimizing LINQ queries.
->Using IQueryable vs IEnumerable.

Q>What are the best practices for optimizing SQL queries ?
->Proper indexing(Clustered , Non-Clustered).
->Avoiding SELECT *; using only required coloums.
->Using Stored Procedure instead of raw queries.
->Optimizing joins and subqueries.

Q>How can you improve the startup time of an ASP.NET Core application?
->Minimize middleware components.
->Use AddRazorRuntimeCompilation() only in development.
->Eager loading vs Lazy loading optimization.

Q>What is lazy loading and eager loading in Entity Framework, and which one is better for performance?
-> Explanation of both approaches.
->Scenarios where each is optimal for performance.

Q> How do you handle large data loads efficiently in .NET Core and SQL Server?
Using pagination with Skip and Take.
-> Using pagination with Skip and Take.
-> Implementing bulk inserts with sqlBulkCopy.
->Leveraging Asynchronous data`base operations.


////////////////////Security Best Practises
1.> How do you secure WEB APIs in .NET Core ?
-> Authentication(JWT,OAuth2 , OpenID Connect).
->Authorization with poicies and roles.
->Preventing over-posting with DTOs.

2>What is CORS AND WHY is it important in Angular applications ?
Explanation of Corss-Origin Resourse Sharing.
How to Configure CORS in .NET Core.

3>What is CORS and why is it important in Angular applications?
Explanation of Cross-Origin Resource Sharing.
How to configure CORS in .NET Core.

4>What are the common vulnerabilities in web applications and how do you prevent them?

SQL Injection → Parameterized Queries.
Cross-Site Scripting (XSS) → Proper Encoding and Validation.
Cross-Site Request Forgery (CSRF) → Anti-Forgery Tokens.
5>How do you handle data encryption in .NET Core applications?

Usage of AES, RSA for data encryption.
Hashing passwords with Identity or BCrypt.

6>What is the difference between Authentication and Authorization?

Explanation with real-world examples.
Role-based vs Policy-based authorization in .NET Core.

///////////////////////////////////////////////////Angular Specific (Performance + Security):
1>How do you optimize Angular applications for better performance?

Lazy Loading of modules.
Ahead-of-Time (AOT) Compilation.
Change detection strategy (OnPush).

2>How do you prevent XSS attacks in Angular?
Angular's DOM sanitization.
Safe navigation ([innerHTML] with caution).

3>How do you handle large list rendering in Angular?
Using ngFor with trackBy.
Virtual scrolling for large lists.

//////////////////////////////////////////

Great question! Here's a super simple and interview-ready explanation of the difference between throw ex; and throw; in C# — in the most human-friendly way:

---

✅ Q: What is the difference between throw ex; and throw; in C#?

🔸 throw ex;

> Resets the original error location.



It throws the exception again but overwrites the stack trace.

So you lose the original line where the error actually happened.


try
{
    // Error happens here
}
catch (Exception ex)
{
    throw ex;  // ❌ Loses original stack trace
}

🧠 Why it’s bad?

In real applications, you won't know where the error really happened — only where it was re-thrown.



---

🔹 throw;

> Keeps the original error location.



It rethrows the same exception without resetting the stack trace.


try
{
    // Error happens here
}
catch (Exception ex)
{
    throw;  // ✅ Preserves original error line
}

🧠 Why it's better?

Developers can debug exactly where the error occurred.



---

✅ Summary for Interview:

throw ex;	throw;

Resets the stack trace	Keeps original stack trace
Harder to debug	Easier to debug
Avoid in production	Recommended way



---

✅ Real-life analogy:

> throw ex; is like taking a photo of the accident after cleaning the scene — you lose real info.
throw; is like showing the actual place and time the accident happened.




---

Would you like a short .NET Core example showing how this impacts logging or debugging in a real application?


/////////////////////////////////////////////////////////////
break Statement in C#"

break is used when you want to say:

"I'm done with this loop or switch - exit immediately."

Let's learn how, why, where, and when to use it with real-life examples, flow control visuals, and top-level coding practices.

What is break?

The break statement immediately stops the current loop (for, while, do-while) or switch-case.

It tells the compiler:

Stop looping right now, and jump out!

Example 1: Exit a for loop early

Csharp

Copy code

for (int i = 1 i <= 10 i++)

{

if (i == 5)

break;

Console.WriteLine("i = " + i);

}

Output:

Copy code

i = 1

i = 2

i = 4

When i == 5, it hits break, exits the loop immediately.

///
continue Statement in

continue tells your loop:

"Skip the current round move to the next one immediately."

It's very powerful when you want to:

Ignore invalid data

Skip even/odd numbers

Avoid unnecessary processing

Let's master this now in human language, code, real-world examples, and expert developer style.

What is continue?

The continue statement skips the rest of the current iteration, and moves the loop directly to the next round.









///////////////////////////////pls check this solution
// Problem:

// Design a basic task scheduler where tasks can be added with a scheduled time, and the scheduler will return tasks in execution order.

// Requirements:

// void AddTask(string taskName, DateTime executeAt)
// string? GetNextTask() — returns the next task to execute based on time

// Expectation:

// Candidate should use a priority queue or sorted data structure, and follow good OO design.
// Promises , emitter, even emitter, canActivate, 

Syntax

for (int i = 1; i <= 5; i++)
{
    if (i == 3)
        continue;

    Console.WriteLine(i);
}
Output :
1  
2  
4  
5




/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////SQL Interview Qestion
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

Sorce : https://www.interviewbit.com/sql-interview-questions/
What is Database?
What is DBMS?
3. What is RDBMS? How is it different from DBMS?
What is SQL?
5. What is the difference between SQL and MySQL?


/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////Sample code Creating Api With ADo.net
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////Get
// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/



//////////////////////////////////////Post

// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/



////////////////////////////////////////////////////////////////Update 
// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/


//////////////////////////////////////////Selete
// End-to-End Fullstack Example: Property Listing API with POST (Create) Feature
// Stack: Angular 18 (Frontend) + .NET 8 (Backend) + EF Core + Clean Architecture + async/await

/*
  Backend (.NET 8)
  Layers:
    - Controller (API layer)
    - Service (Business logic)
    - Repository (Database interaction using EF Core)
    - DbContext & Models
*/

// --- Models/Property.cs ---
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; } = string.Empty;
    public double Price { get; set; }
    public string Location { get; set; } = string.Empty;
}

// --- Data/PropertyDbContext.cs ---
public class PropertyDbContext : DbContext
{
    public PropertyDbContext(DbContextOptions<PropertyDbContext> options) : base(options) {}
    public DbSet<Property> Properties => Set<Property>();
}

// --- Repository/IPropertyRepository.cs ---
public interface IPropertyRepository
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Repository/PropertyRepository.cs ---
public class PropertyRepository : IPropertyRepository
{
    private readonly PropertyDbContext _context;
    public PropertyRepository(PropertyDbContext context)
    {
        _context = context;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _context.Properties.ToListAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        _context.Properties.Add(property);
        await _context.SaveChangesAsync();
        return property;
    }
}

// --- Services/IPropertyService.cs ---
public interface IPropertyService
{
    Task<List<Property>> GetAllPropertiesAsync();
    Task<Property> AddPropertyAsync(Property property);
}

// --- Services/PropertyService.cs ---
public class PropertyService : IPropertyService
{
    private readonly IPropertyRepository _repository;
    public PropertyService(IPropertyRepository repository)
    {
        _repository = repository;
    }

    public async Task<List<Property>> GetAllPropertiesAsync()
    {
        return await _repository.GetAllPropertiesAsync();
    }

    public async Task<Property> AddPropertyAsync(Property property)
    {
        return await _repository.AddPropertyAsync(property);
    }
}

// --- Controllers/PropertyController.cs ---
[ApiController]
[Route("api/[controller]")]
public class PropertyController : ControllerBase
{
    private readonly IPropertyService _service;
    public PropertyController(IPropertyService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var data = await _service.GetAllPropertiesAsync();
        return Ok(data);
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] Property property)
    {
        if (!ModelState.IsValid) return BadRequest(ModelState);
        var result = await _service.AddPropertyAsync(property);
        return CreatedAtAction(nameof(Get), new { id = result.Id }, result);
    }
}

// --- Program.cs ---
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<PropertyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IPropertyRepository, PropertyRepository>();
builder.Services.AddScoped<IPropertyService, PropertyService>();
builder.Services.AddControllers();

var app = builder.Build();
app.UseHttpsRedirection();
app.MapControllers();
app.Run();

// --- appsettings.json ---
/*
"ConnectionStrings": {
  "DefaultConnection": "Server=.;Database=PropertyDb;Trusted_Connection=True;TrustServerCertificate=True"
}
*/

/*
  Frontend (Angular 18)
*/

// --- property.model.ts ---
export interface Property {
  id?: number;
  title: string;
  price: number;
  location: string;
}

// --- property.service.ts ---
@Injectable({ providedIn: 'root' })
export class PropertyService {
  private baseUrl = 'https://localhost:5001/api/property';

  constructor(private http: HttpClient) {}

  getAll(): Observable<Property[]> {
    return this.http.get<Property[]>(this.baseUrl);
  }

  add(property: Property): Observable<Property> {
    return this.http.post<Property>(this.baseUrl, property);
  }
}

// --- property-form.component.ts ---
@Component({ selector: 'app-property-form', templateUrl: './property-form.component.html' })
export class PropertyFormComponent {
  property: Property = { title: '', price: 0, location: '' };

  constructor(private propertyService: PropertyService) {}

  onSubmit(): void {
    this.propertyService.add(this.property).subscribe(result => {
      alert('Property added successfully!');
      this.property = { title: '', price: 0, location: '' };
    });
  }
}

// --- property-form.component.html ---
<form (ngSubmit)="onSubmit()">
  <input type="text" placeholder="Title" [(ngModel)]="property.title" name="title">
  <input type="number" placeholder="Price" [(ngModel)]="property.price" name="price">
  <input type="text" placeholder="Location" [(ngModel)]="property.location" name="location">
  <button type="submit">Add Property</button>
</form>

/*
✅ You now have:
- Fully working Create (POST) operation using .NET 8, EF Core, async/await
- Clean layered architecture with real enterprise interview structure
- Angular 18 form to submit data
*/





/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////Solid Priciple
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

// Original class violating SRP
public class User
{
    public string Name { get; set; }
    public string Email { get; set; }

    // Methods for managing user data
    public void SaveUserToDatabase()
    {
        // Code to save user to the database
    }

    // Methods for sending email notifications
    public void SendEmailNotification(string message)
    {
        // Code to send email
    }
}

// Refactored classes following SRP
public class User
{
    public string Name { get; set; }
    public string Email { get; set; }
}

public class UserManager
{
    // Methods for managing user data
    public void SaveUserToDatabase(User user)
    {
        // Code to save user to the database
    }
}

public class EmailService
{
    // Methods for sending email notifications
    public void SendEmailNotification(User user, string message)
    {
        // Code to send email
    }
}


/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////Testack Related Question
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Q> Why we arenot using file Like XML.
Q> What is Concurrency.
Q> What is Diffrence between Union and Join.
https://www.youtube.com/watch?v=8nb_CVmjBrI.
-> UNOIN : - 1> Number of Column must be same for both select statement.
2>The colomn must be same datatype.


//////////////////////////////////Deloild
1> which company are currently working, what is the role , which project you have worked, which technology are you worked.
OOP Concept : Four piller of oops , Incapsulation , Overloading , Ovverriding, static , Access Modifier,
.NETCore : How .netCore Benificial, diffrence between .netCore and MVC Struture , What is middleware , what is startup class,what are configure and configure services method,What are exception in .net
await and asyc,Services ,what are use of services. Why Angular Not react , where did you declare the component.We declare the component in Module,why you need to declare the componet in Angular,What is data binding, What are two type of form reactive form, Form group , when to use which one , what is the difffrence between them.What are pipes in Angular(diffrent pipes in Anular like dates pipes ect thatis used).

DSA : reverse the string , fibonacci series.




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Kindle Clone Angular
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


What is Angular ?
Angular is a component-based framework for building structured, scalable and single page application.
//What is the Angular Advantages ?
1> it is relatively simple to build a single page application.
2> Flexible and structural client application.
3>Angular is cross Plateform and opensourse.
4>Writing Reusable code is easy.
5> Testing is easy.

//What is the diffrence between Angular and Angular JS ? or What are the advantages of Angularover AngularJS ?
 ///Angular js
1> It is only supports javaScript.
2> This framework has a model-view-controller(MVC) architecture.
3>It does have CLI tool.
4>It does not use Dependency Injection.
5> It is not a so fast.

/////Angular
1>It support both JavaScript and TypeScript.
2> This framework has a component archotecture.
3> It has CLI
4> It uses Dependency Injection.
5> It also support moble browser.
6> It is very fast.

//////////////
Study from File.

What is NPM?
--> NPM(Node Pakage Manager ) is an online repository from where you get thousands of free libraries which can be used in your angular application 

//What is the cli
--> The Angular Cli(command-line interface) is a tool that you use to initialise and deplop Angular applications directly from Terminal.
Asynchrouns operstion :- Task running in the background without stopping the application.

////////////////////////////////Q8)
=) what is the role of Angular.json file in Angular
=The angular.json file is the primary configuration file 
for an Angular project.

///////////////////////////Q9)
What is the difference between JIT and AOT in Angular? V. IMP.


Both JIT and AOT are used to compile Angular Typescript components to Javascript, because browser understands Javascript not Typescript.

ANGULAR COMPILE

DETAILS

Just-in-Time (JIT)

Compiles your application in the browser at runtime.

ng serve --configuration development   # Uses JIT

Ahead-of-Time (AOT)


This was the default until Angular 8.

Compiles your application and libraries at build time.

This is the default starting in Angular 9.

All the latest Angular versions use AOT to compile Typescript to Javascript.

Advantage of AOT-Loading in AOT is much quicker than the JIT, because it already has compiled your code at build time.

ng build --configuration production    # Uses AOT

Interview Analogy:

JIT is like cooking food when the guest arrives flexible, but makes them wait.

AOT is like cooking in advance - ready to serve fast.
/////////////////////
What is the diffrence between JIO and AOT in Angular ?

-->Both JIT and Aot are used to compile Angular Typescript component to Javascript , because browser understands Javascript not Typescript.

Just-In-Time(JIT)   Compiles your application in the browser at runtime.

Ahead-of-Time(AOT)  Compile your application and libraries at build time.


-->All the latest Angulae versions use AOT to compile Typescript to Javascript.
////////////////////////
What is a Selector and Template
Selector :- A selector is used to identify each component uniquely into the component tree.

///////////////////////////////15
What is Data Binding in Angular?V. IMP.


Data binding is the way to communicate between your typescript
code of your component and html view of component.




Think of it like a two-way road between logic and UI.


---

🔄 Types of Data Binding (with simple explanation + example)


---

🔹 1.String Interpolation (One-Way Binding: Component → View)
String Interpolation is a one-way data-binding technique that is
used to transfer the data from a TypeScript code(component)
to an HTML template (view).


2. It is represented inside ({data); double curly braces.

➡️ Show data from TypeScript in HTML using {{ }}.

// app.component.ts
export class AppComponent {
  title = 'Hello Abhishek!';
}

<!-- app.component.html -->
<h1>{{ title }}</h1>

🧠 Interview line:

> "Interpolation displays data from the component in the view using double curly braces."




---

🔹 2. Property Binding (One-Way Binding: Component → View)

➡️ Property binding is a superset of interpolation.
It can do whatever interpolation can do. In addition, it can set an
element property to a non-string data value like Boolean.

<input [value]="title" />

🧠 Interview line:

> "Property binding sets element properties using square brackets []."




---

🔹 3. Event Binding (One-Way: View → Component)
Event binding is used to handle the events raised by the user actions like button click.

➡️ When something happens in the UI (like button click), call a method in TypeScript.

<button (click)="showMessage()">Click Me</button>

showMessage() {
  alert("Hello from Angular!");
}

🧠 Interview line:

> "Event binding listens to user actions like clicks and calls a method using ()."




---

🔹 4. Two-Way Binding (Component ⇄ View)
Two-way data binding in Angular will help users to
exchange data from the view to component and
then from component to the view at the same time.
➡️ Sync data in both directions using [(ngModel)].

// app.component.ts
export class AppComponent {
  name = '';
}

<input [(ngModel)]="name" />
<p>Hello {{ name }}</p>

🧠 Interview line:

> "Two-way binding uses [(ngModel)] to sync data between the UI and the component."



✔️ Don't forget to import FormsModule in app.module.ts to use ngModel.


---

✅ Final Summary (for interview):

> "Data Binding in Angular connects HTML and TypeScript.
It lets data flow one-way (from component to UI or UI to component), or two-way using ngModel.
Angular supports 4 types: Interpolation, Property Binding, Event Binding, and Two-Way Binding."


/////////////////////////////////////
Absolutely, Abhishek! Here's a clean, human-friendly and interview-ready answer for Q20 to Q26 — with examples and simple words so even a non-tech person can understand.


---

✅ Q20. What are Directives in Angular? What are the types?

Answer:

> Directives are instructions in the HTML that tell Angular to do something.



They are used to change the appearance, behavior, or layout of elements in the DOM.


---

✅ Three Types of Directives:

Type	What It Does	Example

1. Component Directive	Custom HTML element (comes with template + logic)	<app-header></app-header>
2. Structural Directive	Changes structure/layout of DOM (adds/removes HTML)	*ngIf, *ngFor, *ngSwitch
3. Attribute Directive	Changes the look or behavior of an element	[ngStyle], [ngClass]



---

✅ Q21. What is *ngIf Structural Directive?

Answer:

> *ngIf is used to show or hide elements based on a condition.



📦 Think of it like: "If this is true, show it. If false, hide it."

✅ Example:

<p *ngIf="isLoggedIn">Welcome, Abhishek!</p>

In TypeScript:

isLoggedIn = true;

If isLoggedIn is false, the <p> will not be in the HTML at all.


---

✅ Q22. What is *ngFor Structural Directive?

Answer:

> *ngFor is used to loop through a list and show multiple elements.



📦 Think of it like: "For each item in the list, show this block."

✅ Example:

<ul>
  <li *ngFor="let user of users">{{ user }}</li>
</ul>

users = ['Abhishek', 'Raj', 'Kiran'];

This will create 3 <li> items.


---

✅ Q23. What is *ngSwitch Structural Directive?

Answer:

> *ngSwitch is used to switch between views based on a value — like a switch-case.



✅ Example:

<div [ngSwitch]="role">
  <p *ngSwitchCase="'admin'">Admin Panel</p>
  <p *ngSwitchCase="'user'">User Dashboard</p>
  <p *ngSwitchDefault>Guest View</p>
</div>

role = 'admin';

It will show "Admin Panel".


---

✅ Q24. What is [ngStyle] Attribute Directive?

Answer:

> ngStyle is used to apply CSS styles dynamically.



✅ Example:

<p [ngStyle]="{ color: isActive ? 'green' : 'red' }">
  Status: {{ isActive ? 'Active' : 'Inactive' }}
</p>

isActive = true;

The <p> text will be green if isActive is true.


---

✅ Q25. What is [ngClass] Attribute Directive?

Answer:

> ngClass is used to add or remove CSS classes dynamically.



✅ Example:

<p [ngClass]="{ 'online': isOnline, 'offline': !isOnline }">
  Connection Status
</p>

.online { color: green; }
.offline { color: red; }

isOnline = true;

The <p> will get class="online" when online.


---

✅ Q26. What is the difference between Component, Structural, and Attribute Directives?

Feature	Component	Structural Directive	Attribute Directive

What it does	Creates a custom UI element	Adds/removes elements	Modifies existing element
Example	<app-user>	*ngIf, *ngFor	[ngStyle], [ngClass]
Template required?	✅ Yes	❌ No	❌ No
Use case	UI & logic container	Show/hide or repeat HTML	Change CSS, behavior


🧠 Analogy:

Component = Your own full widget

Structural = Decides what HTML appears

Attribute = Styles or behaviors applied to HTML



---

Let me know if you'd like a quiz or real project task using these!

/////////////////////////////////////

Absolutely, Abhishek! Here's a very easy-to-remember, interview-friendly, and code-based explanation for each Angular question (Q27 to Q30 + repeated Q20). Think of these as smart short answers with real understanding.


---

✅ Q27. What is a Decorator in Angular?

> Decorator is a special function in Angular that adds extra features to classes, properties, methods, or parameters.



You’ll see them starting with @ symbol like @Component, @Input, @Injectable.


---

✅ Example:

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html'
})
export class UserComponent {}

🧠 This tells Angular:
“Hey, this class is a component and it has a selector + template.”


---

✅ Q28. What are the types of Decorators in Angular?

There are 4 main types:

Decorator	Use Case	Example

@Component()	Declares a class as a component	@Component({...})
@Directive()	Declares a custom directive	@Directive({...})
@Injectable()	Marks a class for Dependency Injection	@Injectable()
@Input() / @Output()	For component communication (parent-child)	@Input() name: string;



---

✅ Q29. What are Pipes in Angular?

> Pipes are used to transform data in the template.



🧠 Example: Format dates, currency, uppercase/lowercase.


---

✅ Built-in Pipe Example:

<p>{{ today | date:'fullDate' }}</p>

today = new Date();

Output: Wednesday, May 29, 2025


---

✅ Types of Pipes:

Type	Example	Description

Built-in	date, uppercase, currency, json, percent	Already provided by Angular
Custom	You create your own	@Pipe({ name: 'myPipe' })



---

✅ Parameterized Pipe:

> You pass a parameter to the pipe for customization.



✅ Example:

<p>{{ price | currency:'INR':'symbol' }}</p>

Converts number to: ₹1,000.00


---

✅ Q30. What is Chaining Pipes?

> You can apply multiple pipes together, one after the other.



✅ Example:

<p>{{ name | uppercase | slice:0:4 }}</p>

If name = "abhishek", output = ABHI
(First uppercase, then slice first 4 letters)


---

✅ Q20 (Repeated). What are Directives? Types?

Already answered above, but in short:

> Directives are instructions in the HTML to tell Angular how to behave.




---

Type	Example	Use

Structural	*ngIf, *ngFor	Add/remove elements
Attribute	[ngStyle], [ngClass]	Change look/behavior
Component	@Component()	Custom element



---

🔚 Summary Table (Quick Glance)

Feature	Purpose	Example

Decorator	Add metadata to class/property	@Component, @Input
Pipe	Transform data in template	`{{ name
Directive	Control HTML layout/behavior	*ngIf, [ngClass]



---

Let me know if you'd like mock interview questions or project-based tasks using these!




--> Where to show.

Absolutely, Abhishek! Here's the interview-ready, simple explanation, and code examples for each question from Q31 to Q36 — one by one. You’ll be able to explain these like a top 1% developer in the most human-friendly way!


---

✅ Q31. What is a Service in Angular?

> A Service is a reusable TypeScript class in Angular used to share logic, fetch data, or hold values across components.



🧠 Think of a service like a helper file.


---

✅ Q32. How to create a Service in Angular?

Use Angular CLI:

ng generate service my-data

This creates:

my-data.service.ts



---

✅ Example:

// my-data.service.ts
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MyDataService {
  getUserName() {
    return "Abhishek Singh";
  }
}


---

//////////////////////////////////////////////////////////////////////✅ Q33. How to use Dependency Injection with a Service in Angular?

Defination : -> Dependency Injection(DI) is a design patter used in Software developement to provide an 
object's dependencies from outside rather than creating them inside, which makes the code loosely coupled and easier to maintain.

//4 Steps to inject service dependency in the component :
 1) First step is create the service - (LoggingService).
//1. Create the Service
@Injectable()
export class LoggingService
{
logToConsole()
{
console.Log("clicked logged");
}
}

2. Second step is, set the providers as the service name(LoggingService) , inside the any component decorator as shown below.
We inject the service in a component’s constructor.
@Component(
{
selector : 'app-login',
templateUrl: './login.component.html';
providers : [LoggingService]
})

3) Third step is, inside the constructor parameter create a new property(loggingService) and then assign the Service type(LoggingService) hee.
@Component(
{
selector : 'app-login',
templateUrl: './login.component.html';
providers : [LoggingService]
})

export class LoginComponent
{
 constructor(private loggingService : LoggingService)
{

}
}

4.Finally use the property(loogingService), to call the method(logToConsole) of the LoggingService.

export class LoginComponent
{
 constructor(private loggingService : LoggingService)
{
  this.loggingService.LogToConsole();
}
}
✅ Example:

// app.component.ts
import { Component } from '@angular/core';
import { MyDataService } from './my-data.service';

@Component({
  selector: 'app-root',
  template: `<p>{{ name }}</p>`
})
export class AppComponent {
  name: string = '';

  constructor(private myService: MyDataService) {
    this.name = myService.getUserName(); // using the service
  }
}

🧠 This is called Constructor Injection.


---

✅ Q34. What is Hierarchical Dependency Injection?

> Angular creates a tree of injectors. Each component can have its own service instance or share a global one.



🧠 Example:

Service in @Injectable({ providedIn: 'root' }) → global singleton.

Service provided in component.ts → new instance only for that component.


✅ Example:

@Component({
  selector: 'child-component',
  providers: [MyDataService]  // new instance just for this component
})

This is useful when:

You want separate copies of a service (e.g., counters, temporary storage).



---

✅ Q35. What is a Provider in Angular?

> A provider tells Angular how to create and inject a service.



You define it in:

@Injectable({ providedIn: 'root' }) → auto global provider.

OR inside providers: [] in module/component.


✅ Example:

@NgModule({
  providers: [MyDataService]  // this is a provider
})


---

✅ Q36. What is the role of @Injectable in a Service?

> @Injectable() tells Angular that this class can be injected using Dependency Injection.



✅ Example:

@Injectable({
  providedIn: 'root'
})
export class MyDataService {
  // Angular knows this is injectable now
}

Without @Injectable, Angular will throw an error if the service has dependencies.


---

🔚 Summary Table (Quick Recap):

Topic	In Simple Words

Service	Reusable class for logic or data
Create Service	ng generate service name
DI with Service	Inject in constructor
Hierarchical DI	Separate or shared instance depending on scope
Provider	How Angular knows to create the service
@Injectable	Marks service as injectable



---

Want a quick real-world example of a Weather API service or Login Auth service to master this?

///////////////////////////////////////////////////////////////////////////////////////37) What are parent - child Component ?
Absolutely, Abhishek! Let’s break this down in the most simple, interview-friendly way, with a real working code example to show Parent-Child Components in Angular.


---

✅ What are Parent-Child Components in Angular?

> In Angular, Parent-Child Components are two components where:



The Parent component holds the data.

The Child component receives that data and may also send something back.


🧠 You can think of it like a father passing a message to his son, or a son informing his father.


---

✅ How Does Communication Happen?

@Input() → Used to send data from Parent to Child

@Output() → Used to send data from Child to Parent



---

🔷 1. Parent to Child (using @Input())

✅ Step 1: Child Component Code

// child.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<h3>Hello {{ userName }}</h3>`
})
export class ChildComponent {
  @Input() userName: string = '';  // receiving data
}


---

✅ Step 2: Parent Component Code

// parent.component.ts
@Component({
  selector: 'app-parent',
  template: `<app-child [userName]="parentName"></app-child>`
})
export class ParentComponent {
  parentName = 'Abhishek';  // sending data
}


---

🔷 2. Child to Parent (using @Output())

✅ Step 1: Child Component Code

// child.component.ts
import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<button (click)="sendMessage()">Send</button>`
})
export class ChildComponent {
  @Output() messageEvent = new EventEmitter<string>();

  sendMessage() {
    this.messageEvent.emit('Hello from child!');
  }
}


---

✅ Step 2: Parent Component Code

// parent.component.ts
@Component({
  selector: 'app-parent',
  template: `
    <app-child (messageEvent)="receiveMessage($event)"></app-child>
    <p>{{ message }}</p>
  `
})
export class ParentComponent {
  message: string = '';

  receiveMessage(msg: string) {
    this.message = msg;
  }
}


---

💡 Interview Summary Answer:

> Parent-Child communication in Angular is when one component (Parent) shares or receives data with another component (Child).
We use:



@Input() → to send data from parent to child.

@Output() with EventEmitter → to send data back from child to parent.



---

Would you like to also practice Sibling to Sibling communication (using a shared service)? Let me know!

/////////////////////////////////////////////////////////////////////////////////////What is @Input() Decorator in Angular ?
Absolutely, Abhishek! Let's break this down into super simple terms with interview-ready answers and code so that you never have to memorize — just understand clearly.


---

✅ Q: What is @Input() Decorator in Angular?

🎯 Interview-Friendly Answer:

> @Input() is a built-in Angular decorator that allows a child component to receive data from its parent component.



Think of it like: 📤 Parent sends data → 📥 Child receives it using @Input().


---

✅ Real-life Analogy:

🧠 Like a parent writing their child’s name on a lunchbox → the child reads it and knows it's theirs.


---

✅ How to Transfer Data from Parent to Child using @Input()?


---

🔹 1. Create Child Component

✅ child.component.ts

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  template: `<h3>Welcome, {{ name }}!</h3>`
})
export class ChildComponent {
  @Input() name: string = '';  // receives data from parent
}


---

🔹 2. Use Child Component inside Parent Template

✅ parent.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  template: `<app-child [name]="parentName"></app-child>`
})
export class ParentComponent {
  parentName = 'Abhishek';  // sending this to child
}


---

🔹 Output on Browser:

<h3>Welcome, Abhishek!</h3>


---

✅ Summary for Interview:

> In Angular, @Input() is used when you want to send data from a parent to a child component.
You declare a property in the child with @Input() and bind data to it using square brackets [property] in the parent.




---

💡 Bonus Tip:

You can also rename the property using an alias:

@Input('customName') name: string;

And use it like:

<app-child [customName]="parentName"></app-child>


---

Would you like the next one: @Output() – Child to Parent communication?

////////////////////////////////////////////////////////////45) What is Routing ? How to setup Routing ?
=> Routing helps in navigating from one view to another view with the help of URL.
=> Router-outlet in Angular works as a placeholder, which is used to load the diffrent component dynamically based on the activated component via Routing.

////////////////////////////////////////////////////////////47)What is Router Links ?
RouterLink is used to navigate to a diffrent route.
//////////////////////////////////////////////////// 51) What is Observable ? How to implement Observable ?
=>Observable are used to sream data to multile components.
=>Basically, to received the data from Api's and continuously stream it to the multiple components.
=> It's a 3 step process
1) Import Observable from RxjS Library.
2) Create Observable & Emit data.
3) Finally subscribe the data.

=>When a user opens the property listing page, Angular uses Observable  to fetch property data from Api.
=>If API sends new updates, UI will update automatically.

//Trade Off
Pros : Real-time, async, powerful for stream(chat, live property updates).
Cons : If you don't unscribe(in long-living components), it may cause memory leaks.

///////////////////////////////////////////////////////////////////////////52) What is the role of HTTPClient in Angular ?
=> HttpClient is a build-in service class provided by Angular, which  is used to perform HTTP requests(GET/POST/PUT/DELETE) to send and receive data from Api or Service.
=> Pakege name is - @angular/common/http packages

//Project Use
=> When a buyer opens the app,HttpClient fetches property listings from backend API.
=> When a seller adda a property, HttpClient sends the property data to the backend using POST.
=> It's like the bridge between Angular frontend and .NET backend.





Templete --> A Templete is a HTML View of an Angular component.
Templete --> What to show

->
->
->
->
->
->

Synchrouns operation :- Task excute one after another and app waits for each task to complete 
moving to the next one.

->
  ->
    ->
      ->
        ->
          ->



Observables                                 Promises

-> Emit multiple value over a          Emit single value over the time
   period of time.


->Are lazy. they're not excuted until          -> excute Immediate after creation
  we subscribe to they  using the subscriptiom

-> have cancell by  unsubcribe.            -> Are not cancelled.


/////////////////////////
RxJx
Rxjs is library of javaScript used in angular for handling asynchrouns data such as Api calls. It provide observables.
RxJS (Reactive Extensions for JavaScript) is a library for handling data streams (like events, API calls, user clicks, typing, etc.) in a powerful way.
In Angular, RxJS is mainly used with Observables to handle async operations (like API calls, user input, timers, WebSocket messages).

//What are RxJS Operators?

👉 In RxJS (used in Angular), operators are like tools you use to work with data streams (Observables).
They help you transform, filter, combine, or handle errors in async data (like API calls, events, etc.).

Think of them like different filters in Instagram 📸 → you apply a filter to modify the picture.
Similarly, RxJS operators modify data streams.

Types of RxJS Operators (with Easy Example)

//1. Creation Operators – Create Observables

of() → creates observable from values.

from() → creates observable from array/promise.


import { of, from } from 'rxjs';

of(1, 2, 3).subscribe(x => console.log(x)); // 1,2,3
from([10, 20, 30]).subscribe(x => console.log(x)); // 10,20,30
//
2. Transformation Operators – Change the data

map() → transform data.

mergeMap(), switchMap(), concatMap() → handle async API calls.


import { of } from 'rxjs';
import { map } from 'rxjs/operators';

of(2, 4, 6).pipe(map(x => x * 10)).subscribe(console.log); // 20, 40, 60


---

3. Filtering Operators – Pick only what you need

filter() → only values that match condition.

take() → take first N values.

first() / last() → pick first or last.


import { of } from 'rxjs';
import { filter } from 'rxjs/operators';

of(1, 2, 3, 4, 5).pipe(filter(x => x % 2 === 0)).subscribe(console.log); // 2, 4


---

4. Combination Operators – Combine streams

merge() → merge multiple observables.

concat() → run one after another.

forkJoin() → wait for all observables to complete.

combineLatest() → combine latest values from multiple streams.



---

5. Utility Operators – Helpers

tap() → debug/log values.

delay() → delay emission.

timeout() → throw error if not completed in time.
---

6. Error Handling Operators

catchError() → handle errors gracefully.

retry() → retry observable if failed.


import { throwError, of } from 'rxjs';
import { catchError } from 'rxjs/operators';

throwError(() => 'Something went wrong')
  .pipe(catchError(err => of('Default Value')))
  .subscribe(console.log); // Output: "Default Value"

////////////////////////
What is observable? How to implement it.
An Observable in RxJx helps us handle data strems like Api response or user input , in a smooth and flexible way.

1> Import Observable from Rxjx.
2> Create the Observable that emits data.
3> Subscribe to the component.

/////////////////////
What is the role of HttpClient in Angular ?
 
Httpclient is build in service provided by angular to http requests(Get , post , put , delect 
to send and receive the data from api or server.

///////////////////////////
What are Angualr Forms ? What are the type of Angualar Forms  ?

->What forms are used to handle user's input and manage form data in an application.
->Two type of Angular form.

Template Driven Forms             
-> Most of the code Written in Html.

-> Add FormModule in AddModule to Activate It.

-> best for simple form and have less control.


  Reactive Forms

-> Most of the code Written in TypeScript file.

-> Add ReactiveModule in AppModule to Activate it.
-> Best for large App Application and have more control.


/////////////////////////////
What is Authentication and Authorization in Angular

Authentication : - Confirms who the user is(valid login or not)
Autherisation :- Check what the user is allowed to do(access control for resourse)

//////////////////////////////////////
Can I give the answer for interview, What is the role of HttpClinet in Angular : HttpClient is built in service provided by 
angular for Http request (Get, post, patch , delete) to send and receive the request , if wrong pls correct with most easiest word for human being

///////////////////////////////////////87
what is the interceptor,When and why we should use 
Great question, Abhishek! Let’s break down HTTP Interceptor in Angular with the most human-friendly explanation, real-world analogy, and simple code — so it’s interview-perfect and you don’t need to memorize anything.


---

✅ Q: What is an HTTP Interceptor in Angular?

🧠 Easy Answer (Human Words):

> An HTTP Interceptor is like a security checkpoint.
It sits in the middle of every API request or response and lets you:



Add something (like a token),

Change something (like a header),

Or handle errors (like unauthorized access).


It runs before the request goes out and after the response comes in.


---

🔐 Real-World Analogy:

Think of it like a security guard at a gate:

Before you go out: the guard adds your ID badge (token).

After you come back: the guard checks your package (response).



---

✅ Why & When to Use Interceptor?

📌 Use it when you want to:

Automatically attach JWT tokens to every request.

Log every request or response.

Catch errors globally in one place (like 401 Unauthorized).

Add custom headers, loading spinners, etc.



---

✅ Code Example: Add Token to All Requests


---

🔹 Step 1: Create the Interceptor

import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = 'sample-jwt-token'; // In real life, get it from localStorage or AuthService

    const clonedRequest = req.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });

    return next.handle(clonedRequest);
  }
}


---

🔹 Step 2: Register Interceptor in App Module

import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { AuthInterceptor } from './auth.interceptor';

@NgModule({
  // ...
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true
    }
  ]
})
export class AppModule { }


---

🔍 What Happens Now:

✅ Every time your Angular app sends an HTTP request, the interceptor automatically adds the token.


---

📝 Summary for Interview (One-liners):

Interceptor is a middleman for HTTP requests/responses.

Used to add token, handle errors, log data, etc.

Helps avoid repeating code in every service or request.

Think of it like a security filter for your API calls.



---

Would you like to also learn how to handle errors with Interceptor or practice a mock interview-style question?

////////////////////////////////////////////////////////////////////////////83
1)POST(USERNAME, Password).
2)Authenticate and Create JET Token.
3)Return Reponse(JWT Tokens)
4)Soted the JWT TOKEN at stored storage.
5)Requested data(JWT token : Header)
6)Validate token signature
7)Send Data.



/////////////////////////////////////////////////////////////////////////////////85
1)Ceate a reactive loginform, setup email and password.
2)Create one SubmitLogin method and check whether form is valid or not.
3)if valid, call service(authservice) method(proceedLogin) and send the loginform value and use 
subscribe method to get result from the observable.
4)Store the token in  local storage of browser, so that for next subsequence request, only token is send , not the credentials again.
5) create Service(AuthService).
6) Inside service set API url()apiurl.
7) Setup HTTPCLIENT to send the request using API url.
8)Use Observable to received the data or token from the request and return it to the component. 
//////////////////////////////////Q92
//What are various ways to communicate between the component.
Q>what are the various ways to communicate between the components.
1>@Input @Output
2>Ng - content
3>@ViewChild   @ViewChildren
4>@ContentChild @ContentChilren




/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////Interciew Question
//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
Create a custom Angular directive to convert color of highlighted text to green?
<div>Hello</div>, on hoving hello it will change the colour in Angular 18


//
Here’s how you can create a custom Angular 18 directive that changes the color of the text to green when you hover over it:


---

1️⃣ Create the Directive

ng generate directive highlight-green


---

2️⃣ highlight-green.directive.ts

import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appHighlightGreen]'
})
export class HighlightGreenDirective {

  constructor(private el: ElementRef, private renderer: Renderer2) { }

  @HostListener('mouseenter') onMouseEnter() {
    this.renderer.setStyle(this.el.nativeElement, 'color', 'green');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.renderer.removeStyle(this.el.nativeElement, 'color');
  }

}


---

3️⃣ Use It in HTML

<div appHighlightGreen>Hello</div>

Explanation:

@HostListener('mouseenter') → triggers when you hover over the element.

@HostListener('mouseleave') → resets when you move the mouse away.

Renderer2 → safely updates DOM styles.


/////////////////////////////////////////////////////////////////////////////////////////////////Angular Performance
/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
1. LozyLoading :- Load only the parts of the app when they are needed.
2. OnPuch Change Detection :- Update only what changes instead of checking everything.
3. TrackBy in ngFor :- Reuse existing list items  instead of rebuilding them.
4. ///////////////////////////////////////////Optiming Imaze And Assets :- Call only when required ,and cache results if posssible.
Exalanation
Great question 👍. Optimizing images and assets in Angular is an important part of making your app fast, especially when it runs in browsers with slow internet or on mobile. Let me break it down simply and practically (and how you can say in an interview):


---

🔹 1. Use Optimized Image Formats

Instead of heavy .png or .jpeg, use modern formats like WebP or AVIF (much smaller size, better quality).

Example:

<img src="assets/images/property.webp" alt="Property" />

This reduces image size by 30–50%, making the app load faster.



---

🔹 2. Responsive Images

Use different image sizes for desktop and mobile.

Example:

<img 
  src="assets/images/property-small.webp"
  srcset="assets/images/property-large.webp 1024w, 
          assets/images/property-medium.webp 768w"
  sizes="(max-width: 768px) 100vw, 50vw"
  alt="Property"
/>

This ensures users don’t download a large image on small screens.



---

🔹 3. Lazy Loading Images

Load images only when they come into view (instead of all at once).

In Angular, you can simply add:

<img src="assets/images/property.webp" loading="lazy" alt="Property">

Or use a third-party directive (like ng-lazyload-image).



---

🔹 4. Compress & Optimize Assets

Before deploying, compress images using tools like:

ImageOptim / TinyPNG / Squoosh.


For assets (JS, CSS, JSON), Angular CLI automatically does minification & compression in production build:

ng build --configuration production

This reduces file size, improves load speed.



---

🔹 5. Use CDN for Heavy Assets

Instead of serving large images (like property photos) from your Angular app, serve them via CDN (CloudFront, Cloudflare, etc.).

Example:

<img src="https://cdn.myapp.com/property1.webp" alt="Property">



---

✅ In Interview Answer (Simple):
"In our Angular project, we optimize images and assets by using modern formats like WebP, responsive images for mobile/desktop, lazy loading images so they load only when visible, and compressing images before deployment. We also rely on Angular production build for minification and sometimes use a CDN for faster delivery of large assets like property photos."


---

👉 Do you want me to also cover Angular-specific asset optimizations (like preloading, caching, and service workers for PWA)? That’s usually asked in interviews as a follow-up.

5. Use Async Pipes :- Helps Angular handle data without extra manual subscription.
2.//////////////////////////////////////////////////////////////////////////////////////////////Custum pipes   
/////////////////////////////////////////////////////////////////////////////////////////////////Async Pipes 
/////////////////////////////////////////////////////////////////////////////////////////////////state management      
/////////////////////////////////////////////////////////////////////////////////////////////////Redix 
/////////////////////////////////////////////////////////////////////////////////////////////////Subjective Observable
/////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////Parent child communication
////////////////////////////Parent -> Child
parent send the data down to child

<h2>Parent Component</h2>
<app-child [message] = "parentMessage"></app-child>

imports : [ChildComponent],
export class ParentComponent
{
 parentMessage = "Hello from Parent";
}

export class ChildChildren
{
  @Input() message!: string ;
  // data comes from parent. 
}
///////////////////////////////////////////////////////////////////////////////////////////////////Scope of Heirarchy

      







