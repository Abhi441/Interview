1)Kindle Question 200.
2)Angular Question.
3)Coding Question , C#(Sheet) , Sql(Sheeet) , Linq Query (sheet). , Angular(Sheet).
4)Most asked Question.(apart from I do not have kindle).
5) Solid Preciple , Design patter , Creating Api (frontend ,backend , database). , Prepare for all the coding question that you have incounter(security + performance), cors, cross question. AI innterview question
6)EF and Ado.net.

///////////////////////////////////////////////////////////////////////////////////////////Q)1
What are the Main Concept of OOPS ? WHAT ARE CLASSES AND OBJECTS ?

//Class : A class is a LOGICAL UNIT OR BLUEPRINT that contains feilds, methods , and Properties
-> It doesn't occupy memory until an object is crated.
1) Constructor is a method in the class which gets excuted when a class object is created.
2) A feilds is avariable of any type. It is basically the data.
3) A property  is a member that provides helps in read and write of private feilds.
4) A methods is a code blocks that contains a series of statement.
//
OBJECT - An object is an INSTANCE of a class.
-> It is a real-world entity created based on the class blueprint.
->It occupies memory and can have unique value for its properties.


//Real-World Example
Example 1 : Car Blueprint
Class : A blueprint of a Car defines.
properties : Color , brand , engine type.
methods : start(), sleep() , accelerator().

Object : A specific car type
car1 : Red, Tesla, Electric.
Car2 : Blue , BMW, Diesel.

///
Code Example
Public Class Car
{
public string Colour {get ; set ;}
public string Brand  {get ; set; }

public void Start()
{
Console.WriteLine("Car Started");
}
Car car1 = new Car{colour = "Red" , Brand = "Tesla"};
Car car2 = new Car{Colour = "Blue" , Brand = "BMW"};

car1.Start();

}
Output : Car started;
//
EXAMPLE 2 : In Book


////////////////////////////////////////////////////////////////////////////////////2)
What is Inheritance ? Why INHERITANCE IS IMPORTANT ?
-> Inheritance is creating a PARENT-CHLD relationship between two classes where child automaticallyy get the properties and
get the properties and methods of the parent.

-> It allows you to reused code and establish a relatiship between classes(e.g., is-a relationship).
//
Why is Inheritance Impotant ?
1) Code Reusability : Avoid duplicating code across related classes.
2) Abraction of code.
2) Extensibility : Enables adding new features to existing code without modification it.

Example
//namespace Pro
//{ 

//class Employee
//{
//    int a = 10;
//    public  void CalculateSalary()
//    {
//        Console.WriteLine("CalculateSalary");
//    }
//}

//class Department : Employee
//{
//    int b = 20;
//    public  void Depart()
//    {
//        Console.WriteLine("This  is DepartMent");
//    }
//}

//class Program
//{
//    public static void Main()
//    {
//        Department Dm = new Department();

//           Dm.CalculateSalary(); // CalculateSalary method is not present Department class but we can call the CalculateSalary() by refrences of Department class.

//    }
// }
//}

/////////////////////////////////////////////////////////////////////////////////3)
What are the diffrence type of inheritance ?
-> Single Inheritance : One bae class with one derived class
Example : 
class BaseClass1
{
public void Animal()
{
Console.WriteLine("Animals");
}
}
class DerivedClass1 : BaseClass
{
public void Dog()
{
Console.WriteLine("Dog");
}
}

->Multiple Inheritance :Multiple Inheritance - In this case Multiple Base classes can be there for single derived class. Remember in C#,
multiple inheritance can only be achieved with the help of interfaces. Which means only one base or
abstract class is allowed, and rest must be interfaces.

Example:
class BaseClass2
{
public void Animal() {
Console.WriteLine("Animal");
}
}
interface I2
{
public void Fly();
}

class DerivedClass2: BaseClass2, I2
{
public void Eagle() {
Console.WriteLine("Eagle");
}
public void Fly() {
Console.WriteLine("Fly");

}
}

->Multilevel inheritance – In this, there is a GrandParent class then there is a Parent class which is derived from GrandParent class and then there is Child class which is derived from Parent class.
Grandparent class -> Parent class -> Child class Here the Child class will get the properties
of both Parent class and GrandParent class automatically.

class BaseClass2
{
public void Animal() {
Console.WriteLine("Animal"); }
}
class DerivedClass3: BaseClass2
{
public void Dog() {
Console.WriteLine("Dog");
}
}
class DerivedClass4 : DerivedClass3
{
public void Labrador() {

 Console.WriteLine("Labrador");
}

->Hierarchal inheritance - In this One, child class is derived more from than one base class. This is the most used type of inheritance.
EXAMPLE :
class BaseClass4
{
public void Animal() {
Console.WriteLine("Animal");
}
}

class DerivedClass5: BaseClass4
{
public void Dog() 
{
Console.WriteLine("Dog");
}
}
class DerivedClass6: BaseClass4
{
public void Cat() {
Console.WriteLine("Dog");
}
}

///////////////////////////////////////////////////////////////////////////////////////Q4)
//HOW TO PREVENT A CLASS FROM BEING INHERITED?

By using SEALED keyword in class.

See the screenshot below, you marked the class ABC as sealed. If you will try to derive this class "ABC" in a child class "XYZ" then
it will give a compiler error because ABC is marked as Sealed.

EXAMPLE : 
sealed class ABC {}
class XYZ: ABC { } //Invalid
class Sealed ClassEx.ABC
CS0509: 'XYZ': cannot derive from sealed type 'ABC

///////////////////////////////////////////////////////////////////////////////////////Q5)
WHAT IS ABSTRACTION? 
Defination :-
Abstraction means showing only required things and hide the BACKGROUND details.
->It allows you to focus on what an object does, not how it does it.

//Why is Abraction Important
->Simplifies complex system by breaking them into smaller , more manageable parts.
-> Hides unnessary implemention details , reducing.
-> promotes code reusability and maintainbility.

Example :
//using System;
//public abstract class Vehicle
//{
//    public abstract void StartEngine();// only the declaration is provided; the implementation 

//    public void DisplayInfo()
//    {
//        Console.WriteLine("This is a vehicle");
//    }
//}

//public class Car : Vehicle
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Car engion started");
//    }
//}

//public interface IRefuelable
//{
//    void Refuel();
//}

//public class Bike : Vehicle , IRefuelable
//{
//    public override void StartEngine()
//    {
//        Console.WriteLine("Bikes engion started");
//    }

//    public void Refuel()
//    {
//        Console.WriteLine("Bike refueled.");
//    }
//}

//public class Program
//{
//   public static void Main(string[] args)
//    {
//        Vehicle car = new Car();
//        car.StartEngine(); // Car engine started.
//        car.DisplayInfo(); // This is a vehicle.

//        Bike bike = new Bike();
//        bike.StartEngine();  //Bike engion started.
//        bike.Refuel();       //Bike refueled
//    }
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////Q6)
Encapsulation means WRAPPING of data and methods/properties into a single unit. Why I included properties 
here because properties are nothing else but special methods only. Why they special methods, 
because they just do one thing and that is getting and setting private fields.

Example : 
//    //
// class Employee
//{
//    private int experience; //This feild can not be excess without Property.
//    public int Experience
//    {
//        get
//        {
//            return experience;
//        }
//        set
//        {
//            experience = value;
//        }
//    }
//}

//class Program
//{
//    public static void Main(string[] args)
//    {
//        Employee em = new Employee();
//        em.Experience = 10;
//    }

//}

///////////////////////////////////////////////////////////////////////////////////Q7)
//WHAT IS POLYMORPHISM AND WHAT ARE ITS TYPES? ❖      
Polymorphism is the ability of a variable, object, or function to take on MULTIPLE FORMS. 
What is multiple forms? For example, in English “RUNNING” word can be used for “running a race” or “running a business”. 
In both cases the meaning is different but the name “RUNNING” is same.

///Overloading (compile time check)
//class Employee
//{
//    public void ClaculateSalary(int a, int b)
//    {
//        Console.WriteLine(a * b);
//    }
//    public void ClaculateSalary(int a, int b, int c) // changing the number of parameter
//    {
//        Console.WriteLine(a * b * c);
//    }
//    public void ClaculateSalary(long a, int b, int c)
//    {
//        Console.WriteLine(a * b * c);
//    }

//}

//class Program
//{
// public static void Main(string[] args)
//   {
//        Employee Em = new Employee();

//        Em.ClaculateSalary(3, 4);
//        Em.ClaculateSalary(3, 4 , 5);
//        Em.ClaculateSalary(300000000000, 4, 5);

//    }
//}

//Overrding
//Overriding in c# allows a subclass(derived class) to provide a specific implementation of a method that is already defind in its base class.
//It is achieved using the virtual keyword in the base class and the override keyword in the derived class.

////Example:
//using System ;

//public class Animal
//{
//   public virtual void MakeSound()
//    {
//        Console.WriteLine("Animal makes the sound");
//    }
//}

//public class Dog : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Dog barks");
//    }
//}

//public class Cat : Animal
//{
//    public override void MakeSound()
//    {
//        Console.WriteLine("Cat meows");
//    }
//}

//public class Program
//{
//    public static void Main(string[] args)
//    {
//        Animal myDog = new Dog();
//        Animal myCat = new Cat();
//        // Polymorphic behavior - the method called is determined at runtime
//        myDog.MakeSound(); //Dog bargs  // Method selection is based on object type not refrence type.
//        myCat.MakeSound(); //Cat meows  // Even when refrence as Animal , the overriden method in Dog or cat is called.
//        // when overriden is not used the base class method is called.
//    }
//}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////8)
//What is Method Overloading ? In How many ways a methods can be overloaded ?
-> Method Overloading is a type of polymorphism in which we can create multiple methods of the same name in the same class, 
and all the methods works diffrent ways.
->The Compiler determines which method to invoke based on the arguments passed at compile time(hence it's part of Compiler-Time Polymorphism)

//Why is methods Overloading is important ?
Code Readability :-> use the same methods name for similar operations.
Flexibility : Allows calling methods with diffrent types or numbers of arguments.
//How many ways can a Methods Be Overloaded?
1)By Changing the Number of Parameters.
Example : Add(int a , int b) and Add(int a , int b , int c).
2)By changing the Number of Prameters : 
Example : Add(int a , int b) and Add(double a , double b)
3)By Changing the Order of Parameters :
Example : Print(string name , int age) and Print(int age , string name)
//Example:
public class MethodOverloading
{
public int Add(int a, int b)
{
return a + b;
}
public int Add(int a, int b, int c)
{
return a + b + c;
}
public double Add(double a, double b, int c)
{ return a + b + c;
}

public double Add(double a, int c, double b)
{
return a + b + c;
}
}

////////////////////////////////////////////////////////////////////////////////////9)
//WHAT IS THE DIFFERENCE BETWEEN OVERLOADING AND OVERRIDING?

1. Method overloading is a type polymorphism, in which we can create multiple methods of the same name in the same class, and all methods work in different ways.
1. Method overriding is having methods with the SAME NAME and SIGNATURE but in different classes.

2.Method Overloading will not use any special keywords.
2. Overriding uses VIRTUAL keyword for base class method and OVERRIDE keyword for derived class method. 

3. Method overloading doesn’t need inheritance. It is in same class. 
3. Method overriding NEEDS INHERITANCE (Base class/ Derived class). It is not possible in same class.


////////////////////////////////////////////////////////////////////////////////////////////////////10)
//What is the diffrence between method Overriding and Method Hiding.
//Method Overloading
What :-> Ref Redefining a method in derived classe that exists in the base class.

When :-> used to change or extend the behavior of a base method.

How  :-> it Achieved resing virtual (in the base clans/ and override (in the derived class),

Binding :-> Resolved at runtime (runtime polymorphism).
//Method Hiding
Whet :-> Hiding a method in the base class by a neur method in the derived class with the the same home.
When :-> used to replace a baser class meshed in the derived class without affecting ther bate class.

How :-> Achieved sesing the now keyword.

Bindings Resolved at compile time.

//Kindle Answer
Q)An method overriding is having method with the Some Nome and Signature but in different classe

public class Base Class
{
public virtual void print ()
{
Condole.WriteLine("BaseClass Print");
}
}
Pubile public class Scrived Class: Base class
{
public public override void print()
{
Console.WriteLine(" Child Clals Print");
}
}

-->Method Hiding, you can hide ther & implementation of the method of a base class from the derived class dlong the now keyword.

public class Base Class
{
public void Print()
{
Condole.WriteLine("Baseclass Print ");
}
}
Public public class Derived Class: BaseClass.
{
public now void Print()
{
Console.WriteLine("childrenllall Print");
}
}

////////////////////////////////Q> 32

Difference between ArrayList and Hashtable in C#

🔷 1. ArrayList in C#

✅ Simple Meaning:

-->It stores a list of items, even if they are of different types.

-->You can access items by index (like array).

-->Allows duplicate values.

-->Slower for large data sets (it searches by position, not key).


✅ Real-World Analogy:

Imagine a shopping basket — you just throw items in, one after another. You don’t label them, you just remember the position.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}


//You can access items by index (like array)
class Program
{
    static void Main()
    {
        ArrayList basket = new ArrayList();
        basket.Add("Apple"); // string
        basket.Add(3); // int
        basket.Add(4.5); // double
        basket.Add("Apple"); // duplicate allowed

        foreach (var item in basket)
        {
            Console.WriteLine(item);
        }
    }
}
---

🔷 2. Hashtable in C#

✅ Simple Meaning:

-->It stores data as Key → Value pairs.

-->Each key must be unique, but values can be repeated.

-->Fast access using the key (uses hash function).

-->Used when you want to look up values based on a name, ID, etc.


✅ Real-World Analogy:

Think of a dictionary: You search a word (key) to get its meaning (value). You don’t care where it is physically — it finds it fast.


---

✅ Example Code:

using System;
using System.Collections;

class Program
{
    static void Main()
    {
        Hashtable phoneBook = new Hashtable();
        phoneBook.Add("John", "123456");
        phoneBook.Add("Alice", "789012");
        phoneBook.Add("Bob", "345678");
        phoneBook["Alice"] = "999999"; // ✅ updates value
        // phoneBook.Add("John", "000000"); ❌ Error – duplicate key

        foreach (DictionaryEntry entry in phoneBook)
        {
            Console.WriteLine($"{entry.Key}: {entry.Value}");
        }
    }
}

✅ Real-Life Use Cases:

ArrayList → Storing a random collection like UI controls, logs, temporary mixed data.

Hashtable → Storing user settings ("Theme" → "Dark"), phone books, ID → Names.

/////////////////////////////////////////////Q40
what is Extensition Methods :::
Extension method is a method injected (added) into an existing class
(or struct or interfaces), without modifying the sourse code of that 
class(or struct or interface).

--> Create the class without extensions method.
--> Create the static class with static method.
-->static class that uses the this keyword before the first parameter 
--> to extend the functionality of an existing type without modifying the original type


///As developer
//
namespace Products
{
    public class Product
    {
        public int WorkingHours ;
        public int WorkingPerWages;
    }
}
//

using Products;

namespace ProductExtensions
{

    public static class ProductExtension
    {
        public static int CalculateSalary(this Product product)
        {
           return  product.WorkingHours * product.WorkingPerWages;
        }
    }
}
//
using Products;

using ProductExtensions;

namespace Programs
{
  class program
  {
        public static void Main(string[] args)
        {
            Product p = new Product() { WorkingHours = 100 ,
         WorkingPerWages = 500 };
            Console.WriteLine(p.CalculateSalary());
        }
  }
}

//As the base library
public static class IntExtensition
{
    public static int DoubleIt(this int number)
    {
        return number * 2;
    }
}

class Program
{
    static void Main()
    {
        int x = 5;
        int result = x.DoubleIt();// Calls the extensitiom method
        Console.WriteLine(result); // Output: 10
    }
}
//////////////////////////////////////////////////////////Q41
=> Delegate is a variable that holds the refrences to a methods.Or you can say it's a pointer to a function.
=> A delegate can  refre to more  than one methods  of same return  type and parameters.

//
👨‍💻 Code Example (Super Easy):

using System;

public class Program
{
    // Step 1: Declare a delegate
    public delegate void GreetDelegate(string name);

    // Step 2: Create a method to point to
    public static void SayHello(string name)
    {
        Console.WriteLine("Hello " + name);
    }

    public static void Main()
    {
        // Step 3: Create delegate instance and assign method
        GreetDelegate greet = SayHello;

        // Step 4: Call method using delegate
        greet("Abhishek");
    }
}

Output:

Hello Abhishek

//

> A delegate is like a function pointer in C#.
It lets us pass methods as arguments or call them indirectly.
It's useful when we want to decouple logic or use event-based programming.
1. Passing methods as arguments using a delegate


2. Decoupling logic via event-like behavior




---

✅ 1. Passing Methods as Arguments (Callback-style)

using System;

public class Program
{
    // Delegate definition
    public delegate void Operation(int a, int b);

    // Method 1
    public static void Add(int a, int b)
    {
        Console.WriteLine("Add: " + (a + b));
    }

    // Method 2
    public static void Multiply(int a, int b)
    {
        Console.WriteLine("Multiply: " + (a * b));
    }

    // A method that takes a delegate (method) as argument
    public static void Calculate(int x, int y, Operation op)
    {
        op(x, y); // Indirectly calling the passed method
    }

    public static void Main()
    {
        Calculate(5, 3, Add); // Output: Add: 8
        Calculate(5, 3, Multiply); // Output: Multiply: 15
    }
}

🎯 What’s Happening:

Calculate method is reusable for different operations.

We are passing Add and Multiply as arguments using delegate Operation.



---

✅ 2. Decoupling Logic Using Delegates (Real-Life Style)

using System;

public class PaymentService
{
    public delegate void PaymentHandler(string message);

    public void ProcessPayment(PaymentHandler notify)
    {
        // Business logic
        Console.WriteLine("Processing payment...");

        // Notify after success
        notify("Payment successful!");
    }
}

public class Program
{
    public static void ShowMessage(string msg)
    {
        Console.WriteLine("Notification: " + msg);
    }

    public static void Main()
    {
        var service = new PaymentService();

        // Pass ShowMessage as delegate (event-style decoupling)
        service.ProcessPayment(ShowMessage);
    }
}

🎯 What’s Happening:

PaymentService doesn’t care how the notification is shown — it's decoupled.

We just inject the logic using a delegate
////////////////////////////////////////////////////////////////Q 42
//What is Multiple delegate 
=>A multiple Delegate is a delegate that holds the refrences of more than one function.
✅ Real-Life Analogy

> Imagine one button click is connected to 3 things:

✅ Show message
✅ Save to database
✅ Send email

One action → many methods = Multicast Delegate




---

✅ Code Example (C#)

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void Notify();

    // Step 2: Define methods to link
    public static void Message1()
    {
        Console.WriteLine("Message 1: Logging info...");
    }

    public static void Message2()
    {
        Console.WriteLine("Message 2: Sending email...");
    }

    public static void Main()
    {
        // Step 3: Create multicast delegate
        Notify notify = Message1;
        notify += Message2; // Add second method

        // Step 4: Invoke delegate → both methods will run
        notify();
    }
}

✅ Output:

Message 1: Logging info...
Message 2: Sending email...


---

✅ Summary for Interview (One-liner):

> A multicast delegate holds multiple methods and calls them in order when the delegate is invoked. Useful when one action should trigger many things.

////////////////////////////////////////////////////////Q43
//What are ANonymous delegate in C#
In Anomyous Delegate, you can create a delegate, but there is no  need to declare the method associated with it.

✅ Interview-Ready Definition:

> Anonymous delegates are methods without a name, used directly where they are needed.



They are useful when:

You want to write a small method on the spot.

You don’t want to define a separate named method.



---

✅ Super Simple Explanation:

Imagine instead of creating a named function like AddNumbers(), you just write the logic right where it’s needed — that’s an anonymous delegate.


---

✅ Code Example:

using System;

public class Program
{
    // Step 1: Define a delegate type
    public delegate void GreetDelegate(string name);

    public static void Main()
    {
        // Step 2: Use an anonymous delegate directly
        GreetDelegate greet = delegate(string name)
        {
            Console.WriteLine("Hello " + name);
        };

        // Step 3: Call the delegate
        greet("Abhishek");
    }
}



---

✅ Output:

Hello Abhishek


---

✅ Real-World Use Case:

Let’s say you’re writing code to log a message or handle a button click quickly — you don’t need a separate method, just use an anonymous delegate right there.


---

✅ Summary for Interview:

> Anonymous delegate = a method without a name, written inline where it's used.
Saves time and makes code shorter and cleaner, especially for small logic blocks.

/////////////////////////////////////////////////////////////////////Q44)
//What is the diffrence between Events And Delegate.
->A Delegate is a variable that hold the refrence to a method or pointer to a function.
->The event is a notification mechanism 

//yet to fill the kindle answer.

---

✅ Interview-Ready Explanation (in Human Words)

🎯 Delegate is like a reference to a method — it knows how to call a method.

🎯 Event is a wrapper built on top of a delegate, used when something happens (like a button click). It helps restrict who can trigger the action.


---

✅ Simple Analogy:

Delegate is like your mobile phone — you can call anyone if you have their number (method).

Event is like a doorbell — others can press it (subscribe), but only the house (class) can decide what happens when it rings (raise the event).



---

✅ Real-Life Example in Code:

using System;

public delegate void Notify(); // Delegate declaration

public class Process
{
    // EVENT based on delegate
    public event Notify OnCompleted;

    public void StartProcess()
    {
        Console.WriteLine("Process Started...");
        // Do some work here...
        Console.WriteLine("Process Completed.");
        
        // Raise the event
        OnCompleted?.Invoke(); // Only this class can raise it
    }
}

public class Program
{
    public static void Main()
    {
        Process process = new Process();

        // Subscribe to the event
        process.OnCompleted += () => Console.WriteLine("Notification: Process finished!");

        process.StartProcess(); // This will trigger the event
    }
}


---

✅ Output:

Process Started...
Process Completed.
Notification: Process finished!


---

✅ Summary for Interview:

Feature Delegate Event

What it is A pointer to a method A message broadcaster built on delegates
Who can call Anyone with reference Only the class that declares it
Use case When you want to pass a method When you want to notify subscribers



---

✅ 1-Line Answer:

> Delegates hold a reference to methods; Events use delegates to notify when something happens, and only the class that defines the event can raise it.


////////////////////////////////////////////////////81>
What is CLUSTRED INDEX ?
--> A clustered indexdefines the order in which  data is physically stored into table.
--> only one clustered index allowed per table.
Example :
CREATE TABLE EMPLOYEE(
ID INT PRIMARY KEY , // By default create a clusred indes
NAME  VARCHAR(100),
Salary INT
)

///////////////////////////////////////////////////////////////////////////////////////////////68>
what is the diffrence between DBMS And RDBMS.
//DBMS
1) DBMS stores data as file.
2) No relationship between data.
3)Normilation is not present.
4) It deals with small quantity of data.
5)Examples : XML.

//RDBMS
1)RDBMS stores data in Tabular form.
2)Data is stored in the  form of table which are RELATED to each other. Eg: Foreign key reelationsheep.
3)Normalization is present.
4)It deals with LARZE amount of data.
5)Example : MySql, PostSql, SqlServer, Oracle.

///////////////////////////////////////////////////////////////////////////69)
//What is a Constrains in SQL? What are its TYPE.
Sql constrains are used to specify rules for the data in a table.
Constrains are used to limit the type of data that can go into a table.

Example

LA PRIMARY KEY field which can uniquely identify each tow in a table

LA FOREIGN Plaid which can uniquely idently sad row in in another table,

4. CHECK constraint helps to validate the valves of cuta meet a particular condition.

CREATE TABLE Students(

10 In NOT NULL PRIMARY KEY

Nase varchar(255) NOT NULL,

CoursaID int FOREIGN REFERENCES Courses (CourseID)。

Age Int NOT NULL CHECK (AGE 18),

AdmissionDate date DEFAULT GETDATE().

CONSTRAINT UC Student UNIQUE (ID, Nane)

6.UNIQUE constraint tells that all the values in the column must be unique

2. NOT NULL maint telh that we cannot store a null value in a

DEFAULT specifies a default value for the colume when on value i specified by the e

//////////////////////////////////////////////////////////////////////////////////70)
//WHAT IS THE DIFFERENCE BETWEEN PRI-MARY KEY AND UNIQUE KEY?

Primary Key

1 Primary Key Can't Accept Null Values.

2 Creates Clustered Index

3

Only One Primary key in a Table

Unique Key

Unique Key Can Accept Only One Null Value

Creates Non-Clustered Index

More than One Unique Key in a Table.
///////////////////////////////////////////////////////71

What is a Trigger in SQL Server?

Triggers are stored programs, which are AUTOMATIC-ALLY executed or fired when some events (insert, delete and update) occur.



---

✅ Why Do We Use Triggers?

To enforce business rules automatically

To log changes or maintain audit trails

To prevent invalid data from being inserted

To enforce relationships or complex constraints

To automatically update other tables



---

📚 Types of Triggers in SQL Server

Category Trigger Type When it Fires

🔁 DML Triggers AFTER Triggers After INSERT/UPDATE/DELETE operations
 INSTEAD OF Triggers Replaces INSERT/UPDATE/DELETE operation
⏱️ DDL Triggers ON DATABASE / ON ALL SERVER On schema changes like CREATE, ALTER
💣 Logon Triggers AFTER LOGON Fires when a user logs in to SQL Server



---

🔁 1. DML Triggers (Data Manipulation Language)

These are most commonly used.

✅ a) AFTER Trigger

Executes after the operation (INSERT, UPDATE, DELETE).


CREATE TRIGGER trg_AfterInsert
ON Employees
AFTER INSERT
AS
BEGIN
   PRINT 'A row was inserted in Employees table.'
END

✅ b) INSTEAD OF Trigger

Executes instead of the operation — can be used on views too.


CREATE TRIGGER trg_InsteadOfDelete
ON Employees
INSTEAD OF DELETE
AS
BEGIN
   PRINT 'Delete operation blocked on Employees table.'
END


---

⏱️ 2. DDL Triggers (Data Definition Language)

Fires when you run commands like CREATE, DROP, or ALTER.

CREATE TRIGGER trg_DDL_Log
ON DATABASE
FOR CREATE_TABLE, DROP_TABLE
AS
BEGIN
   PRINT 'DDL Change detected on the database!'
END


---

💣 3. Logon Triggers

Used to control or monitor SQL Server logins.

CREATE TRIGGER trg_LogonCheck
ON ALL SERVER
FOR LOGON
AS
BEGIN
   PRINT 'A user just logged in.'
END


---

🔍 Trigger Concepts to Understand Deeply

Concept Explanation

INSERTED table Contains new rows being inserted or updated
DELETED table Contains old rows being deleted or updated
Can't call triggers manually Triggers are automatic, not manually executable
Triggers are transactional If a trigger fails, the whole operation rolls back

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////72)
View : view is Virtual table which contains of a subset of data contains in a table of more than one table.

-->View are not stored in memory like table then why to use views :
1> Views can be easily Indexed to improve the performance.
2>Extra security - DBA can hide the actual table names and expose views for read only operation 
3> User don't need to know where data comes from.
4>Don't repeat the same JOINS or filters in 10 places.
--> Remember, in a view query is stored but the data is never stored like a table.


Example :
CREATE VIEW vw_ActiveEmployees AS
SELECT EmpID , FullName ,Department
from Employees
WHERE Status = 'Active';

Select * From vw_ActiveEmployees;

//////////////////////////////////////////////////////////////////////////////////////73)
WHAT IS THE DIFFERENCE BETWEEN HAV-ING CLAUSE AND WHERE CLAUSE?

1. WHERE Clause is used before GROUP BY Clause.

HAVING Clause is used after GROUP BY Clause.

2. WHERE Clause cannot contain AGGREGATE function. HAVING Clause can contain aggregate function.

SELECT COUNT(CustomerID), Country FROM Customers

WHERE Country = "India"

GROUP BY Country

HAVING COUNT (CustomerID) > 5;

////////////////////
WHAT IS SUB QUERY OR NESTED QUERY OR INNER QUERY IN SQL?

A Subquery or Inner query or a Nested query is a query within another SQL query and embedded within the WHERE clause.
///////////////////////////75)
WHAT IS AUTO INCREMENT/ IDENTITY COLUMN IN SQL SERVER?

Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

CREATE TABLE Persons (

Personid int IDENTITY(1,1) PRIMARY KEY,

FirstName varchar(255),

Age int

);

///////////////////////////////////76)
WHAT ARE JOINS IN SQL?

A join clause is used to COMBINE rows from two or more tables, based on a related column between them.

///////////////////////////////////////////////77)
What is join and type ?
LEFT OUTER JOIN: As you can see in the diagram It returns all records from the

left table, and the matched records from the right table.

RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched rec-ords from the left table.

FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.

(INNER) JOIN: Returns records that have matching values in both tables. Inner join is the mostly used join in all joins.

///////////////////////////////////78
WHAT IS SELF-JOIN?

A self-join is a join of a table to itself.

//////////////////////////////////80
WHAT ARE INDEXES IN SQL SERVER?

SQL Indexes are used in relational databases to retrieve data VERY FAST.

They are like indexes at the start of the BOOKS, which pur-pose is to find a topic quickly.

//////////////////////////////81)
WHAT IS CLUSTERED INDEX?

CLUSTERED INDEX

A clustered index defines the order in which data is phys-ically stored in a table.

Clustered index are similar to the Dictionary. See how you will find any word.

There is only one way to find a word so similarly there can be only one clustered index per table possible.

In SQL Server, if you set a primary key on a column then it will automatically create a clustered index on that col-umn.

//////////////////////////82)
WHAT IS NON-CLUSTERED INDEX? NON-CLUSTERED INDEX A non-clustered index is stored at one place and table data is stored in another place. So, this index is not physically stored. It is like the index of a BOOK.

///////////////////////83)
WHAT IS THE DIFFERENCE BETWEEN CLUSTERED AND NON-CLUSTERED INDEX? 1. A clustered index defines the order in which data is physically stored in a table. For example, Dictionary. A non-clustered index is stored at one place and table data is stored in another place. For example, Book Index. 2. A table can have only one clustered index. A table can have multiple non-clustered index. 3. Clustered index is faster. Non-clustered index is slower.


//////////////////////////////84)
HOW TO CREATE CLUSTERED AND NON-CLUSTERED INDEX IN A TABLE? CLUSTERED INDEX When you create a PRIMARY KEY constraint, a clustered index on the column or columns is automatically created. NON-CLUSTERED INDEX


//////////////////////////85)
IN WHICH COLUMN YOU WILL APPLY THE INDEXING TO OPTIMIZE THIS QUERY. “select id, class from student where name=”happy””? The column after WHERE condition, which is “name” here.


/////////////////////86)
WHAT IS THE DIFFERENCE BETWEEN STORED PROCEDURE AND FUNCTIONS?

/////////////////////87)
HOW TO OPTIMIZE A STORED PROCEDURE OR SQL QUERY? Below are some techniques to optimize a stored procedure: Use SET NOCOUNT ON Specify column names instead of using * in SELECT statement. Use schema name before objects or table names. Example: SELECT EmpID, Name FROM dbo.Employee Do not use DYNAMIC QUERIES. They are vulnerable to SQL Injections. Use EXISTS () instead of COUNT (). Example: IF( EXISTS (SELECT 1 FROM db.Employees)) is better than SELECT Count(1) FROM dbo. Employee Use TRANSACTION when required only


/////////////////////////////88)
WHAT IS A CURSOR? WHY TO AVOID THEM? A database Cursor is a control which enables traversal/ iteration over the rows or records in the table. It’s a 5-step process: 1. Declare 2. Open 3. Fetch using while loop 4. Close 5. Deallocate

/////////////////////////////89)
WHAT IS THE DIFFERENCE BETWEEN SCOPE_IDENTITY AND @@IDENTITY? scope_identity and @@identity, both are used to get the last value entered in the identity column of the table. The @@identity returns the last identity created in the same session. The session is the database connection. The scope_identity() function returns the last identity created in the same session and the same scope. The scope is the current query or the current stored procedure. Normally we have to use scope_identity() function inside stored procedures.


//////////////////////////90)
WHAT IS CTE IN SQL SERVER? A Common Table Expression, is a TEMPORARY named result set, that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement.

//////////////////////91)
WHAT IS THE DIFFERENCE BETWEEN DELETE, TRUNCATE AND DROP COMMANDS? 

DELETE

1. It is a DML.

2. It is used to delete the one or more rows(data) of a table.

3. It can be rollback.

DELETE FROM Employees WHERE Emp_Id = 7;

TRUNCATE

1. It is a DDL.

2. It is used to delete all rows from the table.

3. It can be rollback.

4. Trincate will remove all the records from the table Employees but not the structure/ schema.

TRUNCATE TABLE Employees;

DROP

1. It is a DDL.

2. It is used to drop the whole table with STRUCTURE/SCHEMA.

3. It can not be rollback.

4. It will remove the structure/schema also.

DROP TABLE Employees;


/////////////////////////////
WHAT ARE ACID PROPERTIES?

ACID properties are used when you are handling transac-tions in SQL.

Atomicity

Each transaction is "all or nothing"

Consistency

Data should be valid according to all defined rules

Isolation

Transactions do not affect each other

Durability

Committed data would not be lost, even after power failure.

//////////////////////////////94
WHAT ARE MAGIC TABLES IN SQL SERVER? Magic tables are the temporary logical tables that are created by the SQL server whenever there are insertion or deletion or update( D.M.L) operations. Types of magic tables: INSERTED – The recently inserted row gets added to the
INSERTED magic table. DELETED – The recently deleted row gets added to the DELETED magic table. The use of magic tables are TRIGGERS.

////////////////////////////////////////////82>
What is NON-CLUSTERED INDEX ?
A non -clustred index is stored at one place and table is stored in another place.So this is not physically stored.

Example :
CREATE TABLE EMPLOYEE(
ID INT PRIMARY KEY , // By default create a clusred indes
NAME  VARCHAR(100),
Salary INT
)
//Example
Non-Clustered Index

CREATE NONCLUSTERED INDEX IX_Employee_Name
ON Employee(name);

Clustered Index = Sorted actual data.
Non-Clustored Index = Pointer to actial data.

//ADVANTAGES
Use it
-> You Serch frequently by coloumns other than the primary key.
Example : SELECT * FROM EMPLOYEE WHERE Name = 'Abhishek';



////////////////////////////////////////////////////////////////////////////////83>
What is the diffrence between clustered and non clustored index ?
=>
A clustered index defines the order in which data is physically stored in a table. for example Dictionary.
A non-clustred index is stored at one place and table data is stored in another place. for example , Bookplace

A table can have only one clustred index.
Atable can have multiple non-clustred index.

Clustered index is faster.
Non-Clustered index is slower.

////////////////////////////////////////////////86>
1. SP may or may not return a value, but Function must return a value
🔸 Stored Procedure Example:
CREATE PROCEDURE sp_GetEmployee
AS
BEGIN
    SELECT * FROM Employees; -- No return needed
END
✅ Here, it just performs an action, doesn't return any single value.

🔹 Function Example:
CREATE FUNCTION fn_GetTotalSalary()
RETURNS INT
AS
BEGIN
    DECLARE @total INT;
    SELECT @total = SUM(Salary) FROM Employees;
    RETURN @total;
END
✅ Function must return a value (here: total salary).

2. SP can have input/output parameters, Function only has input parameters
🔸 Stored Procedure with Output:
CREATE PROCEDURE sp_GetEmployeeCount
    @DeptId INT,
    @Count INT OUTPUT
AS
BEGIN
    SELECT @Count = COUNT(*) FROM Employees WHERE DepartmentId = @DeptId;
END
🔹 Function can only have input:
CREATE FUNCTION fn_GetDeptSalary(@DeptId INT)
RETURNS INT
AS
BEGIN
    DECLARE @salary INT;
    SELECT @salary = SUM(Salary) FROM Employees WHERE DepartmentId = @DeptId;
    RETURN @salary;
END
❌ You cannot use OUTPUT parameters in a function.

3. We can call a Function inside a SP, but cannot call SP inside a Function
✅ Call function inside SP:
CREATE PROCEDURE sp_ShowSalary
AS
BEGIN
    DECLARE @total INT;
    SET @total = dbo.fn_GetTotalSalary(); -- calling function
    PRINT @total;
END
❌ Cannot do this in function:
-- INVALID:
-- You cannot write this inside a FUNCTION

-- EXEC sp_GetEmployee; -- ❌ Not allowed inside a function
4. Cannot use SP in SELECT/INSERT/UPDATE — but can use Function
❌ SP cannot be used:
-- INVALID:
SELECT *, sp_GetEmployee() FROM Employees; -- ❌ Error
✅ Function can be used:
-- Valid:
SELECT Name, dbo.fn_GetDeptSalary(DepartmentId) AS TotalDeptSalary FROM Employees;
✅ Functions can be used inside SELECT, WHERE, JOIN, etc.

5. TRY-CATCH works in SP, not in Function
✅ TRY-CATCH in SP:
CREATE PROCEDURE sp_TryCatchDemo
AS
BEGIN
    BEGIN TRY
        SELECT 1 / 0; -- Will cause error
    END TRY
    BEGIN CATCH
        PRINT 'Error occurred!';
    END CATCH
END
❌ NOT allowed in Function:
-- TRY-CATCH is not allowed inside a FUNCTION in SQL Server
6. Transactions possible in SP, not in Function
✅ SP with transaction:
CREATE PROCEDURE sp_UpdateSalary
AS
BEGIN
    BEGIN TRANSACTION
        UPDATE Employees SET Salary = Salary + 1000;
    COMMIT TRANSACTION
END
❌ Transactions NOT allowed in function:
-- BEGIN TRAN / COMMIT TRAN are not allowed inside FUNCTION
🔚 Summary Table:
Feature	Stored Procedure (SP)	Function
Return Value	Optional	Must return something
Parameters	Input + Output	Input only
Callable from SQL query	❌ No	✅ Yes
Use in SELECT/UPDATE/DELETE	❌ No	✅ Yes
Use inside Function	❌ No	✅ Function only
TRY-CATCH / Transactions	✅ Yes	❌ No


///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////.NetCore
///////////////////////////////////////////////////////////////////164
//what is .Net Core
=> .Net Core is completely a New framework , which is a Free and Open-Source platorm developed and maintained by Microsoft.

//////////////////////////////////////////////////////////////165
What is .Net STANDARN ?
=>.Net Standard is not a framework. .Net Standard define a set of API's or you can say libraries or set of rules.
If any Framework will follow these rules that  means it is compliant with .NET standard Right now .NET Framework, .NET Core
and Xamarin follow .Net standard.
/////////////////////////////////////////////////////////////////166
//What is the Advantages of .NetCore OVER .NET FRAMEWORK
.Net core
Cross Plateform => Window ,Linux ,MacOS
OPEN SOURCE => Free to use , Modify, Distribution
HOSTING =>Kestrel , IIS, Nginx.
BUILD-IN DEPENDENCY INJECTION => Loosely Coupled Design, Reusability, Tesability.
Support Multiple IDE => Visual Studio, Visual Studio for Mac , Visual Studio Code.


.NETFRAMEWORK
.Net Framework only supports Windows.
.NET Framework is paid.
.NET Framework only support IIS Hosting.
.NET framework don't have build in dependency injection.
.NET framework only support Visual Studio IDE.

/////////////////////////////////////////////////////////////////////////////////////////170
What is the role of configuration methods ? 
=>Configuration method specifies how the app responds to Http request and responde .It is used to setup request pipeline. 
it is not optional
//Example :

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
if (env.IsDevelopment())
{
app. UseDeveloperExceptionPage();
}
else
{
}

app.UseExceptionHandler("/Home/Error");

app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.UseEndpoints (endpoints =>

{

endpoints.MapControllerRoute(

name: "default",

pattern: "(controller-Home}/{action-Index}/{id?)");

});

/////////////////////////////////////////////////////////////////////////////////////////Dependency Injection
What is Dependency Injection


///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////END OF KINDLE
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////Singleton
✅ Interview-Friendly Answer:
Q: What is a Singleton Class in C#?

A Singleton is a special class where only one object (instance) can be created during the application's lifetime.
It's useful when you need just one shared thing, like a single database connection, a logging service, or a settings manager.

💡 Real-World Analogy:
Think of a TV Remote in a room — you don’t need 10 remotes.
Everyone uses the same one to control the TV.
That’s how a Singleton works — one object shared everywhere.

🧠 Why use Singleton?
To share data across multiple places.
To save memory and avoid creating duplicate objects.
To make sure there’s only one access point to something.
✅ Simple Code Example:
public class SingletonLogger
{
    private static SingletonLogger _instance;

    // Private constructor: no one can create from outside
    private SingletonLogger() { }

    // Public method to get the single instance
    public static SingletonLogger GetInstance()
    {
        if (_instance == null)
        {
            _instance = new SingletonLogger();
        }

        return _instance;
    }

    public void Log(string message)
    {
        Console.WriteLine("Log: " + message);
    }
}
🔄 How to Use It:
class Program
{
    static void Main()
    {
        var logger1 = SingletonLogger.GetInstance();
        var logger2 = SingletonLogger.GetInstance();

        logger1.Log("App started");
        logger2.Log("Something happened");

        Console.WriteLine(logger1 == logger2); // true — same object
    }
}
✅ Summary (for Interview):
Singleton ensures only one instance of a class exists.
Useful for things like Logger, Config Manager, DB Connection.
It helps avoid duplication and keeps things centralized.
Would you like me to show the Thread-safe version or how Singleton is used in ASP.NET Core (like in services)?





Great question! Interviewers love asking about Thread-Safe Singleton — especially for multithreaded apps.





---



✅ Interview-Friendly Explanation:



Q: How to make Singleton thread-safe in C#?



> In multithreaded apps, multiple threads might try to create the Singleton at the same time — which can break the "only one object" rule.

So, we use locking to make sure only one thread can create the object — this is called thread-safe Singleton.







////////////////////
//How to make Signaloton Thread Safe
---



💡 Think of a Bank ATM



Only one person can withdraw at a time.

If two people try at once, the system must lock the ATM temporarily — that’s thread safety.





---



✅ Code: Thread-Safe Singleton (with lock)



public class SingletonLogger

{

    private static SingletonLogger _instance;

    private static readonly object _lock = new object();



    // Private constructor

    private SingletonLogger() { }



    public static SingletonLogger GetInstance()

    {

        // Lock to allow only one thread inside this block at a time

        lock (_lock)

        {

            if (_instance == null)

            {

                _instance = new SingletonLogger();

            }

        }



        return _instance;

    }



    public void Log(string message)

    {

        Console.WriteLine("Log: " + message);

    }

}





---



🧪 How to Use:



class Program

{

    static void Main()

    {

        var logger1 = SingletonLogger.GetInstance();

        var logger2 = SingletonLogger.GetInstance();



        Console.WriteLine(logger1 == logger2); // ✅ true: same object

    }

}





---



✅ Summary (for interview):



Use lock to make Singleton thread-safe.



lock ensures only one thread creates the object.



This avoids race conditions in multithreaded environments.



////////////////////////////////////////////////////////////////
//What is reference type and Value Type
--> “Value types store actual values in stack memory . Reference types store the memory address and point to shared data in heap. 

-->with value types, changes don’t affect others. But with reference types, changes reflect across all references.”

-->🔍 Common Value Types in C#:

int, float, bool, char, double, struct


-->🔍 Common Reference Types in C#:

class, string, array, object, interface

-->
EXAMPLE : 
Code Example (Value Type):

int a = 5;
int b = a;
b = 10;

Console.WriteLine(a); // Output: 5
Console.WriteLine(b); // Output: 10

📌 a and b are separate copies, so changing b does not affect a.
-->
 Code Example (Reference Type):

class Person
{
    public string Name;
}

Person p1 = new Person { Name = "Abhishek" };
Person p2 = p1;
p2.Name = "Sunil";

Console.WriteLine(p1.Name); // Output: Sunil
Console.WriteLine(p2.Name); // Output: Sunil


////////////////////////////////////////////////////////////////////////////All the satus code

//Frequently used
200 OK. You'll hopefully see this response code in the majority of your API calls. ...
201 Created. ...
301 Moved Permanently. ...
302 Found. ...
404 Not Found. ...
429 Too Many Requests. ...
401 Unauthorized. ...
500 Internal Server Error.

//All Satus code


1xx Informational:
Indicates that the request was received and understood. These are temporary responses and consist of a Status-Line and optional headers, and are terminated by an empty line.
100 Continue: The client should continue with its request.
101 Switching Protocols: The server is switching protocols.
2xx Success:
Indicates that the client's request was successfully received, understood, and accepted. 
200 OK: Standard success response for various requests.
201 Created: The request has succeeded and a new resource has been created. Commonly used after a POST request. 
202 Accepted: The request has been accepted for processing, but the processing is not yet complete.
204 No Content: The server successfully processed the request, but is not returning any content.
3xx Redirection:
Indicates that further action needs to be taken by the user agent to fulfill the request.
301 Moved Permanently: The resource has been permanently moved to a new URI.
302 Found: The resource is temporarily located at a different URI.
304 Not Modified: The client's cached version of the resource is still valid.
4xx Client Error:
Indicates that the client's request contains bad syntax or cannot be fulfilled. 
400 Bad Request: The server cannot process the request due to a client error (e.g., malformed syntax).
401 Unauthorized: The request requires user authentication.
403 Forbidden: The server understood the request but refuses to authorize it.
404 Not Found: The server cannot find the requested resource.
405 Method Not Allowed: The HTTP method used is not supported for the requested resource.
409 Conflict: The request could not be completed due to a conflict with the current state of the resource.
429 Too Many Requests: The user has sent too many requests in a given amount of time.
5xx Server Error:
Indicates that the server failed to fulfill an apparently valid request. 
500 Internal Server Error: A generic error message, given when an unexpected condition was encountered by the server.
501 Not Implemented: The server does not support the functionality required to fulfill the request.
503 Service Unavailable: The server is currently unable to handle the request due to temporary overloading or maintenance.

/////////////////////////////////////////////////////////////////////////Web Api Security
1. Authentication (Who are you?)
This step checks who the user is.
Example: Login with username/password → API gives a token (JWT or OAuth2).
Every time the user calls API, they must send this token in the request header.
If token is missing or fake → API rejects.
👉 This makes sure only real users can call the API.

2. Authorization (What can you do?)
After knowing the user, we check what permissions they have.
Example:
A buyer can view properties but cannot delete.
An admin can manage users and listings.
This is usually role-based or policy-based in .NET.
👉 This makes sure users cannot do operations outside their role.

3. Data Protection (Keep data safe in travel)
Use HTTPS so data is encrypted while moving between server and client.
Use password hashing & encryption in database (never store plain text).
Example: bcrypt, SHA-256.
👉 This protects from hackers stealing sensitive info.

4. Other API Security Best Practices
CORS Policy → Only allow trusted websites/apps to use your API.
Rate Limiting / Throttling → Prevent misuse by limiting requests per user.
Input Validation → Avoid SQL Injection, XSS by cleaning user input.
Logging & Monitoring → Keep track of suspicious activities.
API Gateway / Firewall → Extra shield for enterprise systems.
🚀 Example (in .NET + Angular project like yours):
User logs in → API checks credentials → API returns a JWT token.
Angular app stores token (in memory/local storage).
For every API call → Angular sends token in Authorization header.
.NET API middleware validates token → allows or denies request.

////////////////////////////////////////////////////////////////////////////////////////Performance
1. Use Asynchronous Code (async/await) –

Don’t block the thread. Example: Instead of waiting for a database call to finish, let the app do other work in parallel.





2. Caching –

Store frequently used data in memory (like Redis or In-Memory Cache) so we don’t always hit the database.





3. Database Optimization –



Use AsNoTracking() in EF Core for read-only queries (it avoids unnecessary tracking).



Write efficient SQL queries and indexes.







4. Use Dependency Injection Wisely –

Register services with correct lifetimes (Singleton, Scoped, Transient) so memory is not wasted.





5. Reduce Startup Time –

Only load what is needed when the application starts.





6. Compression & Minification –

Enable response compression (gzip/brotli) so data transfer is smaller.





7. Logging & Monitoring –

Use structured logging (Serilog, Application Insights) to find performance bottlenecks.





8. Use Background Services –

Heavy tasks (like sending emails, reports) should run in background jobs (Hangfire, Quartz) instead of blocking user requests.


////////////////////////////////////////////////////////////////////////////////////////////.Single() and Include()
.Include() is used in Entity Framework(EF/EF core) to eager load relatedd entities(like a SQL JOIN) .
.Include() = eager loading (load related data immediately).
////////////////////////////////////////////////////////////////////////////////////////////Thread and vax thread.
////////////////////////////////////////////////////////////////////////////////////////////Condition aggretion  (sql)
SUM() , Count() , AVG() .
////////////////////////////////////////////////////////////////////////////////////////////Single IR 
Single IR in live data processing means using a single integration Runtime(the engine of ADF / Synapse) to fetch transform ,and load live seaming data with low latency and less overhead , instead of manahging multiple IRs. 
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////What are design patter used in making Stock market application.
1. Observer Pattern (very important in stock market apps)
Why: Stock prices keep changing in real time. If one price changes, all users looking at that stock should get updated immediately.
How: Observer pattern allows me to notify all users automatically whenever there is a change.
Example in app: When the price of TCS shares changes, all traders' dashboards update instantly.
2. Factory Pattern
Why: The application might need to create different types of financial instruments (Stocks, Bonds, Mutual Funds, Options). Instead of writing messy new everywhere, a Factory can create objects in a clean way.
Example in app: If tomorrow a new type of asset is added, we don’t have to change everywhere, just extend the factory.
3. Singleton Pattern
Why: Some components like logging service, configuration, cache, or database connection should have only one instance across the whole app.
Example in app: One global configuration for connecting to stock market APIs.
4. Strategy Pattern (optional, but good to mention)
Why: Different users might have different order execution strategies (e.g., Market Order, Limit Order, Stop Loss). Strategy pattern allows plugging in new algorithms without rewriting code.
Example in app: A trader can switch between "Market order" and "Limit order" easily.
🎯 Final Easy Answer (interview-ready):

"For a stock market application, I would use the Observer pattern to handle real-time stock price updates to all users, the Factory pattern to create different financial instruments cleanly, and the Singleton pattern for shared resources like logging or database connections. If we need different trading strategies, I can also use the Strategy pattern. These patterns will keep the system scalable, easy to maintain, and ready for future changes."

/////////////////////////////////////////////////////////////////////////////////Observable Patter
👉 "Observer Pattern is like a WhatsApp group.

When the admin posts a message (event), all group members (subscribers) get notified immediately.
In stock market applications:
 1. Observer

👉 An Observer is like a person waiting for updates.
It says: “Tell me when something changes.”

Example:
You (Observer) subscribe to a YouTube channel. You don’t keep checking daily—YouTube tells you when a new video is uploaded.


---

🔹 2. Observable

👉 An Observable is the thing that produces updates.
It’s the source of truth that others can watch.

Example:
The YouTube channel is the Observable. It produces videos (data/events) and notifies all subscribers (Observers).


---

🔹 3. Subscriber

👉 A Subscriber is the one who connects to the Observable to actually receive the updates.

Example:
When you click “Subscribe” on YouTube, you become a Subscriber. Now whenever a video is uploaded, you’ll get notified.


The Stock is the subject (Observable).
Investors/Traders are observers (Subscribers).
When a stock price changes, the Stock notifies all Investors instantly.
This way, we avoid checking prices again and again, and changes are pushed in real-time."
---
🏢 Enterprise-Level Example: Stock Market
We’ll implement a Stock Price Notification System using the Observer Pattern.
Step 1: Create Observer Interface
// IObserver.cs

public interface IObserver

{

    void Update(string stockName, decimal price);

}



Step 2: Create Subject (Observable) Interface



// IStock.cs

public interface IStock

{

    void Attach(IObserver observer);

    void Detach(IObserver observer);

    void Notify();

}



Step 3: Concrete Subject (Stock)



// Stock.cs

using System.Collections.Generic;



public class Stock : IStock

{

    private List<IObserver> _observers = new();

    private string _stockName;

    private decimal _price;



    public Stock(string stockName, decimal price)

    {

        _stockName = stockName;

        _price = price;

    }



    public void Attach(IObserver observer) => _observers.Add(observer);

    public void Detach(IObserver observer) => _observers.Remove(observer);



    public void SetPrice(decimal price)

    {

        _price = price;

        Notify(); // Notify observers whenever price changes

    }



    public void Notify()

    {

        foreach (var observer in _observers)

        {

            observer.Update(_stockName, _price);

        }

    }

}



Step 4: Concrete Observer (Investor)



// Investor.cs

public class Investor : IObserver

{

    private string _name;



    public Investor(string name)

    {

        _name = name;

    }



    public void Update(string stockName, decimal price)

    {

        Console.WriteLine($"Notification for {_name}: {stockName} is now ₹{price}");

    }

}



Step 5: Test Implementation



// Program.cs

using System;



class Program

{

    static void Main()

    {

        // Create Stock (Observable)

        Stock reliance = new Stock("Reliance", 2500);



        // Create Investors (Observers)

        Investor abhishek = new Investor("Abhishek");

        Investor rahul = new Investor("Rahul");



        // Attach observers

        reliance.Attach(abhishek);

        reliance.Attach(rahul);



        // Price Change -> Notifies Investors

        reliance.SetPrice(2600);

        reliance.SetPrice(2700);



        // Rahul leaves the subscription

        reliance.Detach(rahul);



        // Only Abhishek gets notified

        reliance.SetPrice(2800);

    }

}





---



✅ Output



Notification for Abhishek: Reliance is now ₹2600

Notification for Rahul: Reliance is now ₹2600

Notification for Abhishek: Reliance is now ₹2700

Notification for Rahul: Reliance is now ₹2700

Notification for Abhishek: Reliance is now ₹2800





---



🏆 Where is this used in real enterprise apps?



Stock Market / Trading Apps (price updates → traders)



News Feeds (new post → followers)



E-commerce (stock available → notify users)



Event-driven Microservices (publish/subscribe model)

////////////////////////////////////////////////////////////////////////////////Factory
The Factory Pattern is one of the most commonly asked design patterns in interviews, especially for enterprise-level applications.


---

🔹 What is Factory Pattern (easy words)

Think of a Factory as a machine that creates objects for you.

Instead of using new everywhere in your code, you tell the factory:
👉 "Hey, I need an object of type X."
👉 The factory decides which class to create and gives it to you.


This makes your code:
✅ Clean
✅ Flexible
✅ Easy to extend (you just add new products without changing existing code).


---

🔹 Real-World Enterprise Example: Payment System

Imagine you’re building an E-commerce application.

Payment can be done via Credit Card, PayPal, or UPI.

Instead of writing new CreditCardPayment() everywhere,
we create a PaymentFactory that gives the right object.



---

🔹 Step 1: Define Payment Interface

public interface IPayment
{
    void Pay(decimal amount);
}


---

🔹 Step 2: Implement Different Payment Methods

public class CreditCardPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using Credit Card.");
    }
}

public class PayPalPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using PayPal.");
    }
}

public class UpiPayment : IPayment
{
    public void Pay(decimal amount)
    {
        Console.WriteLine($"Paid {amount} using UPI.");
    }
}


---

🔹 Step 3: Create Factory

public class PaymentFactory
{
    public static IPayment GetPayment(string paymentType)
    {
        return paymentType.ToLower() switch
        {
            "creditcard" => new CreditCardPayment(),
            "paypal" => new PayPalPayment(),
            "upi" => new UpiPayment(),
            _ => throw new ArgumentException("Invalid payment type")
        };
    }
}


---

🔹 Step 4: Use Factory in Application

public class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Enter Payment Method (CreditCard / PayPal / UPI):");
        string method = Console.ReadLine();

        Console.WriteLine("Enter amount:");
        decimal amount = Convert.ToDecimal(Console.ReadLine());

        IPayment payment = PaymentFactory.GetPayment(method);
        payment.Pay(amount);

        Console.ReadKey();
    }
}


---

🔹 Example Run

Enter Payment Method (CreditCard / PayPal / UPI):
paypal
Enter amount:
1500
Output → Paid 1500 using PayPal.


---

🔹 How This Helps in Enterprise Applications

Suppose tomorrow your company adds Bitcoin Payment 🚀
👉 You just add a new BitcoinPayment class and extend the factory.
👉 No need to touch existing code → Open/Closed Principle (SOLID).



---

✅ Easy answer for manager/interviewer:
"I’ll use the Factory Pattern whenever I need to create objects of different types, like different payment methods in a stock market or e-commerce application. This way, adding new types is easy, and I don’t repeat object creation logic everywhere."

////////////////////////////////////////////////////////////////////////////////Signalton
💡 Easy Explanation (Human-Friendly)

Singleton Pattern means → Only one object (instance) of a class exists in the whole application.

It’s like:

A Government → only one Prime Minister exists.

A Logger Service → only one logging instance writing to the file.

A Database Connection Pool → only one shared object controlling all DB connections.



So, instead of creating multiple objects again and again, we use one shared object everywhere.


---

🏗️ C# Singleton Code (Basic)

public sealed class Logger
{
    // 1. Create a private static instance (only one)
    private static readonly Logger _instance = new Logger();

    // 2. Private constructor (nobody can create object from outside)
    private Logger() 
    {
        Console.WriteLine("Logger instance created!");
    }

    // 3. Public property to access the instance
    public static Logger Instance
    {
        get
        {
            return _instance;
        }
    }

    // 4. Example method
    public void Log(string message)
    {
        Console.WriteLine($"[LOG]: {message}");
    }
}


---

🏢 Enterprise-Level Example (Real Use Case)

Let’s say we are building a Stock Market Application.
We need one central Logger to log all buy/sell activities.

public class StockMarket
{
    public void BuyStock(string stock, int quantity)
    {
        Logger.Instance.Log($"Buying {quantity} shares of {stock}");
    }

    public void SellStock(string stock, int quantity)
    {
        Logger.Instance.Log($"Selling {quantity} shares of {stock}");
    }
}


---

✅ Testing the Singleton

class Program
{
    static void Main(string[] args)
    {
        StockMarket market1 = new StockMarket();
        StockMarket market2 = new StockMarket();

        market1.BuyStock("AAPL", 50);
        market2.SellStock("GOOG", 20);

        // Both are using the same Logger instance
        Logger logger1 = Logger.Instance;
        Logger logger2 = Logger.Instance;

        Console.WriteLine(Object.ReferenceEquals(logger1, logger2) 
            ? "Both are same instance (Singleton works!)"
            : "Different instances (Singleton failed!)");
    }
}


---

🏆 Output

Logger instance created!
[LOG]: Buying 50 shares of AAPL
[LOG]: Selling 20 shares of GOOG
Both are same instance (Singleton works!)


---

🎯 Interview Answer (Easy Words)

👉 “I will use the Singleton Pattern when I want only one object in the whole system. For example, in a Stock Market application, I can have only one Logger instance to track all buy/sell transactions. This ensures consistency, saves memory, and prevents conflicts.”
