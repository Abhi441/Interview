 1.What is Clean Code?
Clean code is simple, direct, and easy to read. It is code that is maintainable, understandable, and flexible. The book emphasizes that code should be written for humans first, and machines second.
Uncle Bob defines clean code as code that:
Reads like well-written prose.
Has meaningful names.
Minimizes complexity.
Has minimal duplication.
Expresses intent clearly.
Has fewer bugs.
2. Meaningful Names
Choose Descriptive Names:

Use clear and descriptive names for variables, functions, classes, and methods. The name should convey the purpose and role of the variable or function.
Bad Example:
csharp
Copy code
int d;  // what is 'd'?
Good Example:
csharp
Copy code
int daysSinceLastLogin;
Avoid Misleading Names:

Names should not be misleading or ambiguous. They should accurately represent what the code or data does.
For example, donâ€™t name a variable accountList if it's actually a map or dictionary of accounts.
Use Pronounceable and Searchable Names:

Names should be easy to say and type. Avoid cryptic abbreviations.
Bad Example:
csharp
Copy code
int genymdhms;  // what does this mean?
Good Example:
csharp
Copy code
int generationTimestamp;
3. Functions
Functions Should Be Small:

A function should do one thing, and it should do that one thing well. Uncle Bob advocates for small, well-named functions to improve readability and reduce complexity.
The principle behind "Functions Should Be Small" in Clean Code is to keep each function focused on a single responsibility. The idea is that functions should be short, well-defined, and do one thing well. When functions are small and focused, they are easier to read, test, and maintain. This helps improve the overall quality of the code by reducing complexity and making it more modular and flexible.

Explanation:
In the Bad Example:

csharp
Copy code
public void processOrder() {
    validateOrder();
    checkInventory();
    calculateDiscounts();
    generateInvoice();
    sendEmailNotification();
}
This function is doing multiple tasks: validating the order, checking inventory, calculating discounts, generating the invoice, and sending an email notification.
The problem is that it's not clear what the main purpose of the function is. It is trying to handle several different actions related to processing an order, which makes it harder to understand, test, and maintain.
If this function grows over time, it could become much more complex and lead to code duplication or increased coupling between unrelated parts of the code.
In the Good Example:

csharp
Copy code
public void processOrder() {
    validateOrder();
    checkInventory();
    applyDiscounts();
    createInvoice();
    notifyCustomer();
}
The function is still calling multiple smaller functions, but now the names are more clear and action-oriented (e.g., applyDiscounts() instead of calculateDiscounts(), and notifyCustomer() instead of sendEmailNotification()).
This improves readability because it provides a clearer picture of what the function does at a high level. Each action describes a specific step in processing an order, and the names of the smaller functions reflect that.
More importantly, it becomes easier to modify and extend. If the way you generate invoices or notify customers changes, you only need to modify those smaller, focused functions rather than dealing with the complexities of a large function.

