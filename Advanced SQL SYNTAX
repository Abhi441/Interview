Sure! A Stored Procedure in SQL is a precompiled collection of SQL statements that can be executed as a single unit. Stored procedures help improve performance, security, and reusability.


---

1. Basic Syntax of a Stored Procedure

CREATE PROCEDURE ProcedureName
AS
BEGIN
    -- SQL Statements
    SELECT * FROM Employees;
END;

Executing the Procedure:

EXEC ProcedureName;


---

2. Stored Procedure with Input Parameter

CREATE PROCEDURE GetEmployeesByDepartment
    @DeptID INT
AS
BEGIN
    SELECT EmployeeID, FirstName, LastName
    FROM Employees
    WHERE DepartmentID = @DeptID;
END;

Executing the Procedure with a Parameter:

EXEC GetEmployeesByDepartment @DeptID = 3;


---

3. Stored Procedure with Output Parameter

CREATE PROCEDURE GetEmployeeCountByDepartment
    @DeptID INT,
    @EmployeeCount INT OUTPUT
AS
BEGIN
    SELECT @EmployeeCount = COUNT(*) FROM Employees WHERE DepartmentID = @DeptID;
END;

Executing the Procedure with an Output Parameter:

DECLARE @Count INT;
EXEC GetEmployeeCountByDepartment @DeptID = 3, @EmployeeCount = @Count OUTPUT;
PRINT @Count;


---

4. Stored Procedure with Multiple Parameters

CREATE PROCEDURE UpdateEmployeeSalary
    @EmpID INT,
    @NewSalary DECIMAL(10,2)
AS
BEGIN
    UPDATE Employees
    SET Salary = @NewSalary
    WHERE EmployeeID = @EmpID;
END;

Executing the Procedure with Multiple Parameters:

EXEC UpdateEmployeeSalary @EmpID = 101, @NewSalary = 75000.00;


---

5. Stored Procedure with Transactions & Error Handling

CREATE PROCEDURE TransferSalary
    @FromEmpID INT,
    @ToEmpID INT,
    @Amount DECIMAL(10,2)
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        UPDATE Employees SET Salary = Salary - @Amount WHERE EmployeeID = @FromEmpID;
        UPDATE Employees SET Salary = Salary + @Amount WHERE EmployeeID = @ToEmpID;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        PRINT 'Error occurred during transaction.';
    END CATCH;
END;

Executing the Procedure:

EXEC TransferSalary @FromEmpID = 101, @ToEmpID = 102, @Amount = 5000.00;


---

Key Benefits of Stored Procedures:

✔ Performance Improvement – Precompiled SQL code runs faster
✔ Security – Reduces SQL injection risks by parameterized execution
✔ Reusability – Can be used multiple times with different parameters
✔ Transaction Management – Ensures data consistency with COMMIT/ROLLBACK

Would you like an example for dynamic SQL stored procedures as well?




//////////////////////////////////////////////////////////////////
Creating a Custom Trigger in SQL Server

A custom trigger in SQL Server is a database object that automatically executes a predefined action when a specific event (INSERT, UPDATE, DELETE) occurs on a table.


---

Steps to Create a Custom Trigger in SQL Server:

1. Define the event that triggers it (AFTER INSERT, AFTER UPDATE, AFTER DELETE, or INSTEAD OF).


2. Use the INSERTED and DELETED tables to track changes.


3. Implement custom logic inside the trigger.




---

Example 1: Custom Audit Logging Trigger (AFTER INSERT)

This trigger logs every new employee added into an AuditLog table.

Step 1: Create an Audit Log Table

CREATE TABLE AuditLog (
    AuditID INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT,
    ActionType VARCHAR(50),
    ActionDate DATETIME DEFAULT GETDATE()
);

Step 2: Create the Custom Trigger

CREATE TRIGGER trg_AfterInsert_Employees
ON Employees
AFTER INSERT
AS
BEGIN
    INSERT INTO AuditLog (EmployeeID, ActionType)
    SELECT EmployeeID, 'INSERT' FROM INSERTED;
END;


---

Example 2: Prevent Deletion (INSTEAD OF DELETE)

This trigger prevents employees from being deleted but marks them as inactive instead.

CREATE TRIGGER trg_PreventDelete_Employees
ON Employees
INSTEAD OF DELETE
AS
BEGIN
    UPDATE Employees
    SET IsActive = 0
    WHERE EmployeeID IN (SELECT EmployeeID FROM DELETED);
    
    PRINT 'Employees cannot be deleted. They are marked as inactive instead.';
END;


---

Example 3: Track Salary Changes (AFTER UPDATE)

This trigger logs salary changes when an employee's salary is updated.

CREATE TRIGGER trg_TrackSalaryChange
ON Employees
AFTER UPDATE
AS
BEGIN
    INSERT INTO AuditLog (EmployeeID, ActionType)
    SELECT d.EmployeeID, 'SALARY UPDATE'
    FROM DELETED d
    JOIN INSERTED i ON d.EmployeeID = i.EmployeeID
    WHERE d.Salary <> i.Salary;
END;


---

How to Test Your Custom Trigger

Run the following SQL commands to check if your triggers work:

INSERT INTO Employees (EmployeeID, Name, Salary, IsActive) VALUES (1, 'John Doe', 50000, 1);
UPDATE Employees SET Salary = 60000 WHERE EmployeeID = 1;
DELETE FROM Employees WHERE EmployeeID = 1;
SELECT * FROM AuditLog; -- View logged actions


---

How to View Existing Triggers

To see all triggers in your database:

SELECT name, object_id, type_desc 
FROM sys.triggers;


---

Would you like a custom trigger for a specific use case in your project?



