//////////////////////L1 round topis
//C#
1. OOP Concepts (Inheritance, Polymorphism, Encapsulation, Abstraction)
2. Exception Handling (try-catch-finally, custom exceptions)
3. Collections (List, Dictionary, HashSet, Queue, Stack)
4. LINQ (Filtering, Projections, Joins, Aggregations)
5. Delegates and Events (Multicast Delegates, Event Handlers)
6. Async and Await (Task, Task.Run, Parallel Programming)
7. SOLID Principles and Design Patterns (Singleton, Factory, Repository)
8. File I/O Operations (StreamReader, StreamWriter, FileInfo) // Less Important
9. Memory Management (Garbage Collection, IDisposable, using statement)
10. Reflection and Attributes //Not Yet Revision

//.Net Core
1. Middleware and Request Pipeline
2. Dependency Injection (Transient, Scoped, Singleton)
3. Configuration Management (appsettings.json, Environment Variables)
4. Logging (Serilog, NLog, Microsoft Extensions Logging)
5. Entity Framework Core (Migrations, LINQ Queries, Relationships)
6. Web API Development (GET, POST, PUT, DELETE, Versioning)
7. Authentication and Authorization (JWT, Identity, Roles)
8. Caching (In-Memory, Distributed)
9. Global Exception Handling
10. API Documentation (Swagger)

//Angular
1. Components and Modules (Lifecycle Hooks, Communication)
2. Services and Dependency Injection
3. Routing and Navigation (Lazy Loading, Guards)
4. Forms (Template-driven, Reactive Forms, Validation)
5. HTTP Client (GET, POST, PUT, DELETE, Interceptors)
6. Observables and RxJS (map, filter, switchMap, debounceTime)
7. Component Communication (Input, Output, EventEmitter)
8. State Management (ngRx basics)
9. Error Handling and Global Interceptors
10. Angular Material for UI Components

//Ms Sql Server
MS SQL Server

1. Joins (Inner, Left, Right, Full Outer)
2. CRUD Operations (Insert, Update, Delete, Select)
3. Stored Procedures and Functions
4. Indexing (Clustered, Non-clustered)
5. Transactions and Locking Mechanisms
6. Views and Triggers
7. Query Optimization and Execution Plans
8. CTE (Common Table Expressions) and Window Function
9. Data Types and Constraints
10. Backup and Restore.


///Soft Skills & Concepts:
1. Agile Methodologies (Scrum, Sprint Planning, Retrospectives)
2. Code Review Practices and Best Coding Standards
3. Debugging Techniques and Troubleshooting
4. Communication Skills for Team Collaboration
5. Time Management for Delivering Features on Time

//////////////////////L2 round topics

//What is Angular ?
Angular is a component-based framework for building structured, scalable and single page application.
//What is the Angular Advantages ?
1> it is relatively simple to build a single page application.
2> Flexible and structural client application.
3>Angular is cross Plateform and opensourse.
4>Writing Reusable code is easy.
5> Testing is easy.

//What is the diffrence between Angular and Angular JS ? or What are the advantages of Angularover AngularJS ?
 ///Angular js
1> It is only supports javaScript.
2> This framework has a model-view-controller(MVC) architecture.
3>It does have CLI tool.
4>It does not use Dependency Injection.
5> It is not a so fast.

/////Angular
1>It support both JavaScript and TypeScript.
2> This framework has a component archotecture.
3> It has CLI
4> It uses Dependency Injection.
5> It also support moble browser.
6> It is very fast.

//////////////
Study from File.

What is NPM?
--> NPM(Node Pakage Manager ) is an online repository from where you get thousands of free libraries which can be used in your angular application 

//What is the cli
--> The Angular Cli(command-line interface) is a tool that you use to initialise and deplop Angular applications directly from Terminal.
Asynchrouns operstion :- Task running in the background without stopping the application.

/////////////////////
What is the diffrence between JIO and AOT in Angular ?

-->Both JIT and Aot are used to compile Angular Typescript component to Javascript , because browser understands Javascript not Typescript.

Just-In-Time(JIT)   Compiles your application in the browser at runtime.

Ahead-of-Time(AOT)  Compile your application and libraries at build time.


-->All the latest Angulae versions use AOT to compile Typescript to Javascript.
////////////////////////
What is a Selector and Template
Selector :- A selector is used to identify each component uniquely into the component tree.
--> Where to show.

Templete --> A Templete is a HTML View of an Angular component.
Templete --> What to show

->
->
->
->
->
->

Synchrouns operation :- Task excute one after another and app waits for each task to complete 
moving to the next one.

->
  ->
    ->
      ->
        ->
          ->



Observables                                 Promises

-> Emit multiple value over a          Emit single value over the time
   period of time.


->Are lazy. they're not excuted until          -> excute Immediate after creation
  we subscribe to they  using the subscriptiom

-> have cancell by using unsubcribe.            -> Are not cancelled.


/////////////////////////
RxJx
Rxjs is library of javaScript used in angular for handling asynchrouns data such as Api calls. It provide observables.

////////////////////////
What is observable? How to implement it.
An Observable in RxJx helps us handle data strems like Api response or user input , in a smooth and flexible way.

1> Import Observable from Rxjx.
2> Create the Observable that emits data.
3> Subscribe to the component.

/////////////////////
What is the role of HttpClient in Angular ?
 
Httpclient is build in service provided by angular to http requests(Get , post , put , delect 
to send and receive the data from api or server.

///////////////////////////
What are Angualr Forms ? What are the type of Angualar Forms  ?

->What forms are used to handle user's input and manage form data in an application.
->Two type of Angular form.

Template Driven Forms             
-> Most of the code Written in Html.

-> Add FormModule in AddModule to Activate It.

-> best for simple form and have less control.


  Reactive Forms

-> Most of the code Written in TypeScript file.

-> Add ReactiveModule in AppModule to Activate it.
-> Best for large App Application and have more control.


/////////////////////////////
What is Authentication and Authorization in Angular

Authentication : - Confirms who the user is(valid login or not)
Autherisation :- Check what the user is allowed to do(access control for resourse)

//////////////////////////////////////
Can I give the answer for interview, What is the role of HttpClinet in Angular : HttpClient is built in service provided by 
angular for Http request (Get, post, patch , delete) to send and receive the request , if wrong pls correct with most easiest word for human being

//////////////////////////////////// C#
///////////////////////////////////  C#
//////////////////////////////////   C#

///////////////////////////////////////////////
What is Inheritance and why is it Important


->Inheritance is a OOPs concept , child class gets the properties from and behaviors(methods) of a parent class. 

-> Inheritance is used to reusibility and abtraction of code.

Example :
public class Employee
{
public Employee()
{
  //
}
 private int salary;
 
 public class Salary
{
  get
 {
   return experience;
 }
 set
  {
  experience = value ;
 }
}
}


class ContractEmplyee : Employee
  public void CalculateSalary()
 {
  int salary = Experience * 300000 ;
  }

  Console.WriteLine(salary);
  
}


///////////////////////////////////////////
What are type of Inheritance

//////////////////////////////////////
What are the Diffrent type of Inheritance.

1>Single Inheritance
one child class inheritance from one parent class

class Parent
{
public void Show()
{
 Console.WriteLine("This is Parent class");
}

}

class Child : Parent
{
 // child inheritance from parent
}

class Program
{
 static void Main()
 {
  Child obj = new Child();
  obj.Show();
}
}

2> Multilevel Inheritance

A Child class inherits from Parent, and Parent inherits from GrandParent

class GrandParent
{
 public void ShowGrandParent()
{
  Console.WriteLine("GrandParent class");
}

class Parent : GrandParent
{
 public void ShowParent()
{
 Console.WriteLine("Parent class";)
}
}


class Child : Parent
{
 public void ShowParent()
 {
  Console.WriteLine("");
 }
}
class Program
{
 static void Main()
{
 Child obj = new Child();
 obj.ShowGrandParent();
obj.ShowParent();
obj.ShowChild();
}
}

3>One Parent class is get inherited by multiple Child classes

class Employee
{
  public void Work()
 {
   Console.WriteLine("Employee working");
 }
}

class ContractEmplyee : Employee
{
  public void ContractType()
 {
  Console.WriteLine("Contract Employee")
 }
}

class ParmanentEmployee : Employee
{
  public void PermanentType()
  {
   Console.WriteLine("Permanent Employee");
  } 
}

class Program
{
 static void main()
 {
  ContractEmplyee cEmp = new ContractEmplyee();
   cEmp.Work();
   cEmp.ContractType();

  PermanemtEmplyee pEmp = new PermanentEmplyee();
   pEmp.Work();
   pEmp.PermanentType();
 }
}


///////////////////////////////////////////////////
What is Abtraction
Abraction is oops concept , it will show the important part and hide the implementation part ,
    let take the example when we  give exlerate of bike speed to bike will increase but we do
    not know how the speed of bike is increasing

class Employee
{
    public void Main(string[] args)
    {

        Salary();
    }

    public  void Salary()
    {
        ContactEmployeeSalary();
        ParmantEmplyeeSalary();
    }

    public  void ContactEmployeeSalary()
    {
        
    }
    public  void ParmantEmplyeeSalary()
    {
        
    }
}

/////////////////////////////////////
What is Encapsulation
Encapsulation is oops concept , it is used to wrap the data method and property into single units.

example

public class Employee
{
public class EmExperience;

public int Employee
{
 get
{
 return emExperience;
}
 get
{
 emExperience = value;
}
}

public void Main(string[] args)
{
 Employee obj = new Employee();
 
 obj.EmExperience = 3;
 
}


/////////////////////////////////////////////////////////////////
what is Abstraction.

👉 Abstraction is an OOP concept that hides unnecessary details and only shows important parts to the user.

Example:
When you accelerate a bike, the speed increases, but you don’t see how the engine works internally.
The complexity is hidden, and only the important part (speed control) is visible.

How do we achieve Abstraction in C#?
✔ Using abstract classes (with abstract methods).
✔ Using interface (where methods are declared but not defined).

Example Code in C#:
csharp
Copy
Edit
// Abstract class: Defines common structure but hides implementation
abstract class Employee  
{  
    public abstract void CalculateSalary();  // Only method definition (no implementation)  

    public void ShowDetails()  
    {  
        Console.WriteLine("Showing Employee Details");  
    }  
}  

// Permanent Employee class implements its own salary calculation
class PermanentEmployee : Employee  
{  
    public override void CalculateSalary()  
    {  
        Console.WriteLine("Salary = HoursWorked * HourlyRate");  
    }  
}

// Contract Employee class implements a different salary calculation
class ContractEmployee : Employee  
{  
    public override void CalculateSalary()  
    {  
        Console.WriteLine("Salary = (HoursWorked * HourlyRate) - 4000");  
    }  
}

// Main Program
class Program  
{  
    static void Main()  
    {  
        Employee emp1 = new PermanentEmployee();  
        emp1.CalculateSalary();  // Output: Salary = HoursWorked * HourlyRate  
        emp1.ShowDetails();  

        Employee emp2 = new ContractEmployee();  
        emp2.CalculateSalary();  // Output: Salary = (HoursWorked * HourlyRate) - 4000  
    }  
}


//////////////////////////////////////////////////////////
What is Encapsulation

Q: What is Encapsulation?
👉 Encapsulation is an OOP concept that wraps data (variables) and methods (functions) inside a single unit (class).
👉 It hides the data from direct access and provides controlled access using getter and setter methods.

✅ Corrected Example in C#:
csharp
Copy
Edit
public class Employee
{
    private int empExperience;  // Private variable (cannot be accessed directly)

    // Public property with getter and setter
    public int EmpExperience
    {
        get 
        { 
            return empExperience;  
        }
        set 
        { 
            if (value > 0) // Prevents negative experience
                empExperience = value;  
            else
                Console.WriteLine("Experience cannot be negative");  
        }
    }
}

// Main Program
class Department
{
    static void Main(string[] args)  // Fixed the typo in Main()
    {
        Employee emp = new Employee();  
        emp.EmpExperience = 3;  // Setting the experience
        Console.WriteLine("Employee Experience: " + emp.EmpExperience);  // Getting the experience
    }
}

/////////////////////////////////////////////////////////////////////Polymorphism



Polymorphism is oops concept , poly means many and form means form , it will behave diffrent in diffrent place .

The word "Run" can be used in different contexts:
1️⃣ "Running a business"(managing it)
2️⃣ "Running a bike"(riding it)

     -> we have two type of polymorphism 
    1> overloading : In overloading method have the same name in the same class and all the method work diffrently ways. It will happen at compiletime.
    2> overriding  : In overriding  method have the same name and signature but in the diffrent class . it will happen at Runtime.

    or
     Types of Polymorphism in C#:
1️⃣ Method Overloading (Compile-Time Polymorphism)

The same method name is used with different parameters in the same class.

This is resolved at compile time.

2️⃣ Method Overriding(Runtime Polymorphism)

A child class provides a new implementation of a method already present in the parent class.

This happens at runtime.


// Overloading
    class Calculator
{
    // Same method name but different parameters
    public int Add(int a, int b)
    {
        return a + b;
    }

    public int Add(int a, int b, int c)
    {
        return a + b + c;
    }

    public double Add(double a, double b)
    {
        return a + b;
    }
}

class Program
{
    static void Main()
    {
        Calculator calc = new Calculator();
        Console.WriteLine(calc.Add(5, 10));      // Calls method with 2 parameters
        Console.WriteLine(calc.Add(5, 10, 15));  // Calls method with 3 parameters
        Console.WriteLine(calc.Add(5.5, 10.5));  // Calls method with double parameters
    }
}

// Overrinding
class BaseClass
{
    public virtual void Greet()
    {
        Console.WriteLine("Welcome from Base Class!");
    }
}

class SubClass : BaseClass
{
    public override void Greet()
    {
        Console.WriteLine("Welcome from Sub Class!");
    }
}

class Program
{
    static void Main()
    {
        BaseClass obj = new SubClass();
        obj.Greet();  // Calls the overridden method from SubClass
    }
}

/////////////////////////////////////////////////////

WHEN TO USE INTERFACE AND WHEN ABSTRACT CLASS? :::



Abstarction: -
--> common Property / behavior to all the derived class.
--> when we need property, feild, method, contructor.
--> when we want that implementation of method in the same way then go for abstraction.

abstract public Employee
{
    public abstract void CalculateSalary(); 
    
   public void CalculateSalary()
   {
    Console.WriteLine("Tax calculation");
   }
}
Interface: -

--> when you want multiple inheritance achieve then go for Intrface,
--> when you go for contract.
--> when we want loosely coupled thing.
--> 
interface emEmployee
{ 
  void play();
}




///////////////////////////////////////////////
What is Nullable type Nullable type is used to store null values;
this is useful when you want to represent a value that may or may not be present.

using System;
class Program
{
    static void Main(string[] args)
    {
        int? a = null;
        Console.WriteLine(a);
    }
}





/////////////////////////////////////////////////////////////////////////What is the Constructor and type.
--> A Constructor is a special method in a class that is automatically called when we create an object.

--> It is mainly used to initialize the object.

--> The constructor name is same as the class name and it has no return type.

--> Application
1> Initializing the objects with default or required data.
2>Dependency Injection


1> Default Constructor
-->No parameters.
-->Automatically initizes object when no value is passes.

Application
Frameworks like Entity Framework require a parameterless constructor for mapping.

example

public class Product
{
public int Id {get; set ;}
public string Name {get ; set ;}

// Default construction for EF or serialization
public Product()
{
}
}

2> Parameterized Constructor
-> Takes parameter to set values when object is created.

Application 
Dependency Injection., Injecting services in ASP.Net Core
Example
public class OrderServices
{
 private readonly IOrderRepository _repository;

 public OrderService(IOrderRepository repository)
{
 _repository = repository;
}
}

3> Static Constructor
-> Used to initialize static member of the class.
-> Called only once, automatically, when the class is first used.

use : When you want to initialize static data, like connection strings, only once before the class is used. ex : Loading configuration.

Example
public class ConfigManager
{
pulic static string ConnectionString;
static ConfigManager()
{
  ConnectionString = "Server=MyServer";
}
}

4> Private Constructor
   -> Used when we want to restrict the object creation fro  outside.
   -> Mostly used in Singleton Desigb Pattern.
   -> Cannot be inherited.

example:
public class Logger
{
 private static Logger _instance;
 private Logger() {} // Private constructor

 public static Logger GetInstance()
{
   if(_instance == null)
{
  _instance = new Logger();
}
return _instance;
}
}

///////////////////////////////////////////////////////////////////////////What is Method Hinding
--> We use Method Hinding when a child class define a method with the same name as a method in the parent class - but we don't want to override it , just hide or replace it in the child class. 

In Method Hinding , you can hide the implementation of the methods of a base class from the derived class using the new keyword.


When to use it.
--> When the parent class method is not virtual or can't be overridden.
--> When you want the child method to behave diffrently - but only when acccessed throught the child refrence.


example

public class Parent
{
 public void Show()
{
  Console.WriteLine("Parent Show Method");
}
}

public class Child : Parent
{
 public new void Show()
{
 Console.WriteLine("Child Show Method");
}
}


Parent p = new Parent();
p.Show() // output : Parent Show Method

Child c = new Child();
c.Show(); // Child Show Method

Parent pc  = new Child();
pc.Child(); // Parent show Method(hidding , not overring)
///////////////////////Generic
What are Generics in C#?

Generics allow us to create classes, methods, and interfaces that work with any data type in a type-safe way.

Instead of writing the same code for different types (like int, string, etc.), we write it once using generics — and it will work for any type.

Why and When to Use Generics?
Type safety – No need for casting.

Code reusability – Write one method for all data types.

Performance – Avoids boxing/unboxing (in value types).

Clean and maintainable code.

using System;

class Program
{
    static void Main(string[] args)
    {
        bool isEqual = Calculator.AreEqual<int>(10, 10);
        bool isStrEqual = Calculator.AreEqual<string>("Hello", "Hello");

        Console.WriteLine("Int equal: " + isEqual);
        Console.WriteLine("String equal: " + isStrEqual);
    }
}

public class Calculator
{
    public static bool AreEqual<T>(T a, T b)
    {
        return a.Equals(b);
    }
}

///////////////////////////////////////////////////////////
using System.Security.AccessControl;

What is the diffrence between arr and arralist :::

Array

-->Arrays is fixed in size.
-->Arrays are strongly typed.
-->better in performance because typed is Known at compile time.

EXample Array
class Program
{
    public static void Main(string[] args)
    {
        int[] array = new int[10];
        array[0] = 1;
        array[1] = 2;
    }
}

ArrayList

-->Arraylist is not in fixed size.
-->Arraylist is not strongly typed.
--> Arraylist is not better in performance because it is not strongly typed.

EXample Arratlist

class Program
{
    public static void Main(string[] args)
    {
        ArrayList ar = new ArrayList();
        ar.Add(1);
        ar.Add(2);
    }
}

///////////////////////////////////////
using System;

What is the Imumerable in c# :::
--> IEnumerable is an interface in C# that allows us to loop through a collection using a foreach loop.
--> It works internally with IEnumerator, which moves one item at a time.
--> When we use IEnumerable, it pulls data one by one — not all at once in memory.
--> It is useful for read-only access to a collection.


when to use:

--> When you just want to iterate (loop) through a collection like List, Array, Dictionary, etc.
--> Ideal when you don’t need to modify the collection.
--> You can use LINQ with it (Where, Select, etc.).

example
class Program
{
    public static void Main(string[] agts)
    {
        var employee = new List<Employee>()
        {
            new Employee() { ID = 1, Name = "John", Salary = 1000 },
            new Employee() { ID = 2, Name = "Jane", Salary = 2000 }
        };
        foreach(var emp in employee)
        {
            Console.WriteLine($"ID: {emp.ID}, Name: {emp.Name}, Salary: {emp.Salary}");
        }
    }
}

public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public double Salary { get; set; }
}

--> IEnumerable is lazy - loaded — it fetches data only when you access it. This is great for performance 
    when dealing with large datasets.

///////////////////////////////////////////////////////////////


What is the diffrence betwenn Inumerator and Inumerable :::

    IEnumerable
    -- > It represents a collection that can be iterated (looped) using foreach.
    -- > It has one method: GetEnumerator(), which returns an IEnumerator

    IEnumerable<string> fruits = new List<string> { "Apple", "Banana" };

IEnumerator

    It is used to loop through each item one by one in a collection
    It has two main methods:

MoveNext() → moves to next item

Current → gives the current item

    Real-Life Analogy:
IEnumerable = TV Remote(it lets you go through channels)

IEnumerator = Finger that presses Next button (moves from one channel to another)

    using System;
using System.Collections;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        List<string> colors = new List<string> { "Red", "Green", "Blue" };

        IEnumerable<string> enumerable = colors;
        IEnumerator<string> enumerator = enumerable.GetEnumerator();

        while (enumerator.MoveNext())
        {
            Console.WriteLine(enumerator.Current);
        }
    }
}

Final One-Liner (For Interview):
"IEnumerable represents the whole collection, and IEnumerator is the tool that moves through each item in that collection."
//////////////////////////////////////////////////
//Diffrence between Method Overriding and Method hinding
overrding
Say all the point from kindle
public class Parent
{
    public virtual void Show() => Console.WriteLine("Parent");
}

public class Child : Parent
{
    public override void Show() => Console.WriteLine("Child");
}

Parent obj = new Child();
obj.Show();  // Output: Child  (object type decides)


Method Overriding:
→ Child class changes the parent’s method.
→ Uses override keyword.
→ Runs based on object type.
→ Decided at runtime.


//Hiding
Hiding

public class Parent
{
    public void Show() => Console.WriteLine("Parent");
}

public class Child : Parent
{
    public new void Show() => Console.WriteLine("Child");
}

Parent obj = new Child();
obj.Show();  // Output: Parent  (reference type decides)


Method Hiding:
→ Child class hides the parent’s method.
→ Uses new keyword.
→ Runs based on reference type.
→ Decided at compile time.

 

/////////////////////////////////////////////
what is Extensition Methods :::
Extension method is a method injected (added) into an existing class
(or struct or interfaces), without modifying the sourse code of that 
class(or struct or interface).

--> Create the class without extensions method.
--> Create the static class with static method.
-->static class that uses the this keyword before the first parameter 
--> to extend the functionality of an existing type without modifying the original type


///As developer
//
namespace Products
{
    public class Product
    {
        public int WorkingHours ;
        public int WorkingPerWages;
    }
}
//

using Products;

namespace ProductExtensions
{

    public static class ProductExtension
    {
        public static int CalculateSalary(this Product product)
        {
           return  product.WorkingHours * product.WorkingPerWages;
        }
    }
}
//
using Products;

using ProductExtensions;

namespace Programs
{
  class program
  {
        public static void Main(string[] args)
        {
            Product p = new Product() { WorkingHours = 100 ,
         WorkingPerWages = 500 };
            Console.WriteLine(p.CalculateSalary());
        }
  }
}

//As the base library
public static class IntExtensition
{
    public static int DoubleIt(this int number)
    {
        return number * 2;
    }
}

class Program
{
    static void Main()
    {
        int x = 5;
        int result = x.DoubleIt();// Calls the extensitiom method
        Console.WriteLine(result); // Output: 10
    }
}

///////////////////////////////////////
//What are the important components of .Net Framework ? What are their roles?
//-->CLR : It's the engion of .Net that runs your code, manages memory,and handle security.
//-->cts : It ensure all .net languages use the same data types so they can work together.
//-->FCL or BCL :It's a big collection of ready-made classes and functions you can use to build your apps faster.
//-->CLS :It's a set of rules that .Net languages follow so they can talk to each other easily.


//////////////////////////////////////////////////
////////////////////////////////////////////////SQL
////////////////////////////////////////////////
///////////////////////////////////////////////
What is the diffrence between where and having in sql?
//where
-->Where is used to filter the rows before grouping.
-->you cannot .
Having
-->Having is used to filter groups after using the Group By.
--> You can use aggregate functions in HAVING.

Example:
Select Department , Avg(salary) AS
AverageSalary from Employee
where status = 'Active'
group by Department
Having AVG(Salary) > 50000;
//////////////////////////////What is Diffrence bewteen Delete,Truncate , Drop in Sql

////Delect 
1> Used to remove the specific rows from a table.
2>you can use where to delete the 
3>can be rolled back(if inside a transaction)
4>It is a DML(Data Manipulation Language) command.
5>Table structure does not changes.

Example:
Delect from Employee Where Employee = 5 ;

//////Truncate
1>Remove all rows from table(empties the table).
2>Cannot be rolled back in many 
databases(in SQL Server, rollback is possible if used a transaction).
3>It is a DDL(Data Defination Language) command.
4> Table structure does not changes.

Example
TRUNCATE Table Employee;

//Drop
-->Delete the entire table from database(structure + data);
--> Cannot be rolled back.
--> It is DDL(Data Defination Language) command

Example
Drop Table Employee;

-->In short Where filters individual recoreds, Having filters grouped results.

///////////////////////////////////////////////////////What is the diffrence between Union And Union All.
//Union
--> Combines the result of two or more Select statements.
--> Remove duplicate rows(show only unique data).
--> All SELECT statements must have the same number of columns and the same data type.

Example
Select Name from TableA
Union 
Select Name from TablesB

UNION All
--> Combines the result of two or more SELECT statements.
--> Keeps all the rows, including duplicates.
--> All SELECT statement must have the same number of coloums and the same data type


Example
SELECT Name from TableA.
Union All
Select Name from TablesB.

Final
Union --> remove duplicate row
UnionALL --> Keep all the rows.

/////////////////////////////////////////
How to optimise the SQL Query 
1. Use Proper Indexing

You have a Customers table and want to find a customer by their email.

---

Step 1: Create a Table

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name NVARCHAR(100),
    Email NVARCHAR(100),
    Phone NVARCHAR(20)
);

Step 2: Insert Sample Data

INSERT INTO Customers (CustomerID, Name, Email, Phone)
VALUES
(1, 'Alice', 'alice@example.com', '12345'),
(2, 'Bob', 'bob@example.com', '67890'),
(3, 'Charlie', 'charlie@example.com', '24680');

---

Step 3: Query Without Index

SELECT * FROM Customers WHERE Email = 'bob@example.com';

This will scan the whole table (called Table Scan) because no index exists on Email.


---

Step 4: Add an Index

CREATE NONCLUSTERED INDEX IX_Customers_Email ON Customers(Email);

---

Step 5: Run the Same Query Again

SELECT * FROM Customers WHERE Email = 'bob@example.com';

Now SQL Server will use the index on Email to quickly find the row, instead of scanning the whole table.

2. Avoid SELECT *

Fetch only needed columns.

-- Bad
SELECT * FROM Orders;

-- Good
SELECT OrderID, OrderDate, CustomerID FROM Orders;


---

3. Use EXISTS Instead of IN for Subqueries

EXISTS is faster when checking existence.

-- Slower
SELECT Name FROM Employees
WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'NY');

-- Faster
SELECT Name FROM Employees e
WHERE EXISTS (
  SELECT 1 FROM Departments d
  WHERE d.Location = 'NY' AND e.DepartmentID = d.DepartmentID
);


---

4. Avoid Functions on Indexed Columns in WHERE

Functions prevent index use.

-- Bad: can't use index
SELECT * FROM Users WHERE YEAR(DateOfBirth) = 1990;

-- Good
SELECT * FROM Users WHERE DateOfBirth >= '1990-01-01' AND DateOfBirth < '1991-01-01';


---

5. Use Joins Instead of Subqueries Where Appropriate

-- Subquery (can be slower)
SELECT Name FROM Students
WHERE StudentID IN (SELECT StudentID FROM Results WHERE Score > 90);

-- Better
SELECT DISTINCT s.Name
FROM Students s
JOIN Results r ON s.StudentID = r.StudentID
WHERE r.Score > 90;


---

6. Use Table Variables or Temporary Tables for Large Intermediate Data

-- Using temp table for heavy processing
SELECT * INTO #TempLargeData FROM LargeTable WHERE Status = 'Active';

-- Then work with #TempLargeData
SELECT COUNT(*) FROM #TempLargeData;


---

7. Update Statistics and Use Query Plans

-- Update statistics
UPDATE STATISTICS Products;

-- View execution plan in SSMS (Ctrl + M before running query)


---

8. Use WITH (NOLOCK) Carefully for Read-Only Queries

-- Avoids locking (but allows dirty reads)
SELECT * FROM Orders WITH (NOLOCK);





//////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
////////////////////////////////////////////////////////.NetCore
///////////////////////////////////////////////////////
////////What is .NetCore
--> .Net Core is a free, open-sourse,and cross-plateform framework for building diffrent types of applications like web apps, Apis and cloud services
--> it runs on windowns , Linux and Mac.

//////////Key Point
Open-Sourse
Cross-plateform
Used for building modern web apps,APIs,cloud services, console apps and more. 
/////////////////////////////////////////////////////How to handle the error in Asp.netcore.

Global- Error Handling - so the whole app doesn't crash:

if(app.Enviroment.IsDevelopment())
{
app.UseDeveloperExceptionPage();//Show detailed error in development;
}
else
{
 app.UseExceptionHandler("/Home/Error");//Show friendly erro page in Production.
}

Try-catch Block -for specific code
try
{

}
catch(Exception ex)
{
_logger.LogError(ex,"Something went wrong.");
return StatusCode(500, "An error occured.");
}

-> Global error handling saves the full app.
-> Try-Catch handles errors in specific code blocks.
-> Logging helps us track the issue.

////////////////////////////////////
///////////////////////////////////Some of important question
///////////////////////////////////
What is diffrence between rest api and Soap api.

//Rest Api
--> Works over HTTP protocol.
--> Sends data in JSON format(easy to read/write).
--> It's lightweight and faster.
--> Used in modern web and mobile apps.


//Soap API
-->Used only XML format.
-->Has strict rules and security.
-->More heavyweigth and slower than REST.
--> Often used in bancking, finance, enterprise systems.
--> Example: XML request with a predefined structure.

Simple Analogy:
REST is like a WhatsApp message - quick and simple.
SOAP is like a legal document - formal, secure and structure.

Summary(one-liner for interview)
REST is faster and simple; Soap is strict and more secure.

//////////////////////////////////////
First() and FirstOrDefault() are used to get the first matching element from a list or collection.


///First()
--> Meaning : Return the first element that matches your condition.
-->If no match is found : It will throw an exception.
-->When to use : When you are sure the collection will have at lease one matching item.
 
example :
var number = new List<int>{1,2,3,4,5};
var firstEven = numbers.First(n => n % == 0);

2) FirstOrfault()
 --> Meaning : Return the first element that matches your condition.
 --> If no match is found : It will return the default value(like null for classes, 0 for numbers).
 When to use --> When you're not sure if the list contains a match, and you want to avoid errors.

example :
 var number = new List<int> {1,3,5};
 var firstEven = number.FirstOrDefault(n => n % 2 == 0);

////////////////////////////////////////////////////////////////////////////////////////////////////////Performance and Security Question for L2 Round
Q> How do you improve the performance of .net Core application?
-> Caching strategies(In-Memory, Distribution Cache).
-> Async programming and Task Parallel Library.
->Reducing database calls and optimizing LINQ queries.
->Using IQueryable vs IEnumerable.

Q>What are the best practices for optimizing SQL queries ?
->Proper indexing(Clustered , Non-Clustered).
->Avoiding SELECT *; using only required coloums.
->Using Stored Procedure instead of raw queries.
->Optimizing joins and subqueries.

Q>How can you improve the startup time of an ASP.NET Core application?
->Minimize middleware components.
->Use AddRazorRuntimeCompilation() only in development.
->Eager loading vs Lazy loading optimization.

Q>What is lazy loading and eager loading in Entity Framework, and which one is better for performance?
-> Explanation of both approaches.
->Scenarios where each is optimal for performance.

Q> How do you handle large data loads efficiently in .NET Core and SQL Server?
Using pagination with Skip and Take.
-> Using pagination with Skip and Take.
-> Implementing bulk inserts with sqlBulkCopy.
->Leveraging Asynchronous data`base operations.


////////////////////Security Best Practises
1.> How do you secure WEB APIs in .NET Core ?
-> Authentication(JWT,OAuth2 , OpenID Connect).
->Authorization with poicies and roles.
->Preventing over-posting with DTOs.

2>What is CORS AND WHY is it important in Angular applications ?
Explanation of Corss-Origin Resourse Sharing.
How to Configure CORS in .NET Core.

3>What is CORS and why is it important in Angular applications?
Explanation of Cross-Origin Resource Sharing.
How to configure CORS in .NET Core.

4>What are the common vulnerabilities in web applications and how do you prevent them?

SQL Injection → Parameterized Queries.
Cross-Site Scripting (XSS) → Proper Encoding and Validation.
Cross-Site Request Forgery (CSRF) → Anti-Forgery Tokens.
5>How do you handle data encryption in .NET Core applications?

Usage of AES, RSA for data encryption.
Hashing passwords with Identity or BCrypt.

6>What is the difference between Authentication and Authorization?

Explanation with real-world examples.
Role-based vs Policy-based authorization in .NET Core.

///////////////////////////////////////////////////Angular Specific (Performance + Security):
1>How do you optimize Angular applications for better performance?

Lazy Loading of modules.
Ahead-of-Time (AOT) Compilation.
Change detection strategy (OnPush).

2>How do you prevent XSS attacks in Angular?
Angular's DOM sanitization.
Safe navigation ([innerHTML] with caution).

3>How do you handle large list rendering in Angular?
Using ngFor with trackBy.
Virtual scrolling for large lists.









///////////////////////////////pls check this solution
// Problem:

// Design a basic task scheduler where tasks can be added with a scheduled time, and the scheduler will return tasks in execution order.

// Requirements:

// void AddTask(string taskName, DateTime executeAt)
// string? GetNextTask() — returns the next task to execute based on time

// Expectation:

// Candidate should use a priority queue or sorted data structure, and follow good OO design.
// Promises , emitter, even emitter, canActivate, 










