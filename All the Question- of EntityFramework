////////////////////////////////////////////Previous Interview Question
It is their in diffrence sheet.

/////////////////////////////////////////////////Interview Previous
//Introduction
Entity Framework(EF) is an open source object-Relational Mapper(ORM)for .net application.

//Key Feature of Entity Framework
=> Code-First Approach : Define your database structure using c# or VB.Net classes and EF will generate the database schema.

=>Database-First Approaches : Reverse-engine an existing database into a .Net model.
=>Query Support : use LINQ for database operation.

//Why we use Entity Framework
1) Productivity : Eliminate the need to write repetitive SQL Code.

//How does EntityFramework work High Level understanding

Context class : Acts as session to connect with database(e.g DbContext)
Entity Classes:  Represent the table in the coloum.
Linq Query : Translate LInq state into Sql Command.
Database Provider : Hnadle the connection and interaction  with the actual database.

//////////////////////////////Use and Limitations
//Use
-> Rapid application development.
//Limitation
->May not perform as well as raw SQL for highly Complex queries.

//How does EntityFramework work Low Level understanding
1) Model Creation :-> The developer creates entity classes(code-First) or generative Classes from an existing 
database Schema(Database - First).

2) Query Execution : LINQ query or method calls are processed by the Query processor.
The Query processor Convert this into SQL.

////////////////////////////////Implementation (I have already tested)

//Model
 public class Property
 {
     [Key]
     public int Id { get; set; }
     
     public string Title { get; set; }
     
     public string Description { get; set; }
     
     public string Location { get; set; }
    
    
     public int Price { get; set; }

     public DateTime CreateAt { get; set; } = DateTime.Now;

 }

//ApplicationDbContest

   public class ApplicationDbContext : DbContext
   {
       public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }
       public DbSet<Property> Property { get; set; }
   }

//Reposetory
 public class PropertyRepository : IProperty
 {
     private readonly ApplicationDbContext _context;

     public PropertyRepository(ApplicationDbContext context)
     {
         _context = context;
     }

     public async Task<IEnumerable<Property>> GetAllPropertyAsync()
     {
         return await _context.Property.ToListAsync();
     }

     public async Task Create(Property property)
     {
         _context.Property.Add(property);
         await _context.SaveChangesAsync();
     }

     public async Task<Property> Edit(int? id)
     {
         return await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
     }

     public async Task Update(Property property)
     {
         var existingProperty = await _context.Property.Where(p => p.Id == property.Id).FirstOrDefaultAsync();
         if (existingProperty != null)
         {
             existingProperty.Title = property.Title;
             existingProperty.Description = property.Description;
             existingProperty.Location = property.Location;
             existingProperty.Price = property.Price;
             await _context.SaveChangesAsync();
         }
     }

     public async Task<Property> GetPropertyById(int? id)
     {
         return await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
     }

     public async Task Delete(int id)
     {
         var property = await _context.Property.Where(p => p.Id == id).FirstOrDefaultAsync();
         if (property != null)
         {
             _context.Property.Remove(property);
             await _context.SaveChangesAsync();
         }
     }

     
 }



////////////////////////////////////////////////////////ChatGpt Question
Beginner-Level Questions

////////////////////////////////////////////////////////1. What is Entity Framework?

Entity Framework(EF) is an open source object-Relational Mapper(ORM)for .net application.


2. What are the different approaches in EF?

=> Code-First Approach : Define your database structure using c# or VB.Net classes and EF will generate the database schema.

=>Database-First Approaches : Reverse-engine an existing database into a .Net model.

Model First



3. What is DbContext and DbSet?

DbContect : Thinks of DbContext as your main connection between your c# code and database.
DbSet<T> represents a table in the database where T is the model/class.

4. What is the difference between Code First and Database First approach?


5. How do you perform CRUD operations in Entity Framework?


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6. What is Lazy Loading, Eager Loading, and Explicit Loading?
Simple Definition for Interview

üî∏ Lazy Loading:
Related data is loaded automatically when accessed.

üî∏ Eager Loading:
Related data is loaded immediately when the main data is fetched using .Include().

üî∏ Explicit Loading:
You manually load related data after the main object is loaded.


---

‚úÖ Real-life Analogy (interview-friendly)

Think of Student and Courses:

Lazy Loading: You visit the student, and only when you ask about their courses, they go fetch it.

Eager Loading: You tell them to bring their course list at the time you meet them.

Explicit Loading: You visit the student, and later say, ‚ÄúHey, now show me your courses.‚Äù


Lazy LOADING :

EXAMPLE :
---

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Lazy loading: virtual navigation property
    public virtual ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    
    public int AuthorId { get; set; }
    public virtual Author Author { get; set; }
}
üîë Important for Lazy Loading: Navigation properties must be virtual and EF proxies must be enabled.

Step 3: Setup DbContext
using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseLazyLoadingProxies()
                      .UseSqlServer("Server=.;Database=LazyLoadingDemoDb;Trusted_Connection=True;");
    }
}
UseLazyLoadingProxies() is required for lazy loading to work.

Step 4: Add Controller with GET Method
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Lazy loading: Books will be loaded only when accessed
        var authors = _context.Authors.ToList();

        // Example access to trigger lazy loading
        foreach (var author in authors)
        {
            var bookCount = author.Books.Count; // EF will load books here
        }

        return Ok(authors);
    }
}
Step 5: Explanation of Lazy Loading
Lazy Loading in EF Core:

Data is not loaded automatically when querying the parent.
Only when you access a navigation property, EF will query the database for that data.
In our example:
_context.Authors.ToList() ‚Üí loads only authors
author.Books.Count ‚Üí triggers EF to load books for that author on demand
Pros:

Reduces initial query load.
Loads related data only when needed.
Cons:

Can cause N+1 query problem if not careful.
---
///
‚úÖ 2. Eager Loading (load early with Include)

Code:

var student = await context.Students
    .Include(s => s.Courses)
    .FirstOrDefaultAsync(s => s.Id == 1);

üß† Best for performance when you know you‚Äôll need related data.


---
Step 2: Create Models

We don‚Äôt make navigation properties virtual, because we won‚Äôt use lazy loading:

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Eager loading: no virtual keyword needed
    public ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }
    
    public int AuthorId { get; set; }
    public Author Author { get; set; }
}


---

Step 3: Setup DbContext

using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=EagerLoadingDemoDb;Trusted_Connection=True;");
    }
}

> No UseLazyLoadingProxies() needed.




---

Step 4: Add Controller with GET Method

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Eager loading: load authors and their books together
        var authors = _context.Authors
                              .Include(a => a.Books) // Eagerly load books
                              .ToList();

        return Ok(authors);
    }
}

> Include(a => a.Books) tells EF to load related books immediately with authors.




---

Step 5: Explanation of Eager Loading

Eager Loading in EF Core:

1. Data is loaded together with the parent in a single query.


2. In our example:

_context.Authors.Include(a => a.Books).ToList() ‚Üí loads authors and their books in one query.



3. Pros:

Avoids multiple queries (no N+1 problem).

Better for small-to-medium datasets where you know related data is needed.



4. Cons:

Loads all related data even if you don‚Äôt need it ‚Üí more memory.

//
Step 1: Models (same as eager example, no virtual keyword)

public class Author
{
    public int Id { get; set; }
    public string Name { get; set; }
    public ICollection<Book> Books { get; set; }
}

public class Book
{
    public int Id { get; set; }
    public string Title { get; set; }

    public int AuthorId { get; set; }
    public Author Author { get; set; }
}


---

Step 2: DbContext (same as eager example)

using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=ExplicitLoadingDemoDb;Trusted_Connection=True;");
    }
}


---

Step 3: Controller with GET Method (Explicit Loading)

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class AuthorsController : ControllerBase
{
    private readonly AppDbContext _context;

    public AuthorsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult GetAuthors()
    {
        // Step 1: Load only authors (Books are not loaded yet)
        var authors = _context.Authors.ToList();

        // Step 2: Explicitly load Books for each author
        foreach (var author in authors)
        {
            _context.Entry(author)
                    .Collection(a => a.Books) // navigation collection
                    .Load(); // manually load
        }

        return Ok(authors);
    }
}


---

Step 4: Explanation of Explicit Loading

How it works:

1. First query ‚Üí loads only authors.


2. For each author, when we call .Collection(a => a.Books).Load(), EF makes another query to load that author‚Äôs books.






---

‚úÖ Interview Summary (One-liner ready):

Loading Type Loads When? How?

Lazy Loading When navigation accessed virtual + proxy
Eager Loading With main query .Include()
Explicit Loading Manually later .Entry().LoadAsync()



---

Would you like a diagram or real-world scenario to help remember this even better?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7. What is a navigation property in EF?
Here‚Äôs how you can explain Navigation Property in Entity Framework in the most interview-friendly and simple way, with easy words and code examples:


---

‚úÖ What is a Navigation Property? (Simple Answer)

> A navigation property is like a link between two tables in your database.
It helps you move from one entity to another related entity (like from Student to their Courses).



It is used to access related data using foreign key relationships.


---

‚úÖ Real-life Example (for Interview)

Imagine a Student is enrolled in many Courses.

In code, you want to get a student and see their courses.

Navigation property lets you do this easily using object relationships ‚Äî not raw SQL joins.



---

‚úÖ Code Example

üëâ Student Entity

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Navigation Property (1 student -> many courses)
    public ICollection<Course> Courses { get; set; }
}

üëâ Course Entity

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; }

    // Foreign Key
    public int StudentId { get; set; }

    // Navigation Property (each course belongs to one student)
    public Student Student { get; set; }
}


---

‚úÖ Why is it useful?

Using navigation properties, you can do this:

var student = await context.Students
    .Include(s => s.Courses)
    .FirstOrDefaultAsync(s => s.Id == 1);

Console.WriteLine("Courses:");
foreach (var course in student.Courses)
{
    Console.WriteLine(course.Title);
}

‚úî No need to write complex joins. ‚úî Easy to read and maintain.


---

‚úÖ Interview Summary:

> Navigation properties connect related tables (entities) in your code.
They help you easily fetch and work with related data, just like objects in C#.




---

Would you like me to also explain the difference between navigation property and foreign key, or how to define one-to-many / one-to-one relationships in real project scenarios?



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8. How do you configure relationships (One-to-Many, Many-to-Many) in EF?
Here‚Äôs the most human-friendly and interview-ready answer to:


---

‚úÖ How to Configure Relationships in Entity Framework?

(With simple code and words for One-to-Many and Many-to-Many)


---

üîπ One-to-Many Relationship

Example:
One Department has many Employees.

‚úÖ Code:

public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }

    // One Department ‚Üí Many Employees
    public ICollection<Employee> Employees { get; set; }
}

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Foreign Key
    public int DepartmentId { get; set; }

    // Navigation property
    public Department Department { get; set; }
}

üéØ EF Core will automatically understand this relationship by convention (because of the FK and navigation property).


---

üîπ Many-to-Many Relationship (EF Core 5+ makes this easy)

Example:
One Student can join many Courses,
One Course can have many Students.

‚úÖ Code:

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Many-to-Many
    public ICollection<Course> Courses { get; set; }
}

public class Course
{
    public int Id { get; set; }
    public string Title { get; set; }

    // Many-to-Many
    public ICollection<Student> Students { get; set; }
}

üéØ EF Core will auto-create a junction table (like StudentCourse) behind the scenes!


---

‚úÖ How to Explain in Interview (Simple Way):

> üîπ One-to-Many is like: A manager can have many employees.
üîπ Many-to-Many is like: A student can take many courses, and a course can have many students.



EF Core lets you define relationships using navigation properties and foreign keys ‚Äî and builds SQL joins for you automatically.


---

‚úÖ Want Bonus Tip?

You can also configure relationships using Fluent API:

modelBuilder.Entity<Employee>()
    .HasOne(e => e.Department)
    .WithMany(d => d.Employees)
    .HasForeignKey(e => e.DepartmentId);


---

Would you like examples for One-to-One relationship and how to handle it with code + Fluent API too?





---

‚öôÔ∏è Intermediate-Level Questions

9. What is the difference between EF Core and EF6?


10. What are Migrations in EF Core?

How to create and apply migrations?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////11. How does EF handle concurrency?
Great question! Here's a very simple and interview-friendly explanation of how Entity Framework (EF Core) handles concurrency, with a real-world code example.


---

‚úÖ What is Concurrency?

> Concurrency happens when two users try to update the same data at the same time.



üß† Example:
Imagine two users are updating the same "Property Price" at once.
We must avoid one user's update overwriting another's by mistake.


---

‚úÖ How EF Core Handles Concurrency?

EF Core helps by using a special column like a timestamp or version.
This way, it checks:

"Is this row still the same version as when you read it?"

If yes, update is safe.

If no, throw an error (so you can handle it).



---

‚úÖ Code Example

1. Add a concurrency token to your model:

public class Property
{
    public int Id { get; set; }
    public string Title { get; set; }
    public double Price { get; set; }

    [Timestamp] // EF will track this column to handle concurrency
    public byte[] RowVersion { get; set; }
}


---

2. Add to your DB context:

public DbSet<Property> Properties { get; set; }

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Property>()
        .Property(p => p.RowVersion)
        .IsRowVersion();
}


---

3. Handling the error:

try
{
    _context.Update(property);
    await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException ex)
{
    Console.WriteLine("‚ö†Ô∏è Someone else already updated this record.");
    // You can choose to reload, retry, or show message to user
}


---

‚úÖ How to Say in Interview (Simple Answer)

> "EF Core supports concurrency by using a special column called RowVersion or Timestamp.
When two users try to update the same data, EF compares the row version.
If someone else has already changed the data, EF throws a DbUpdateConcurrencyException ‚Äî so we don‚Äôt accidentally overwrite someone‚Äôs changes."




---

‚úÖ Real-Life Analogy

üß† "It's like two people editing a Google Doc ‚Äî if the document has changed since you last saw it, Google warns you before saving. EF does the same with concurrency checks."


---

Let me know if you want me to show this using SQL Server + .NET Core sample CRUD project.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////12. What are shadow properties?
Great question! Let me explain Shadow Properties in Entity Framework (EF Core) in very simple, human-friendly words ‚Äî with code examples.


---

‚úÖ What is a Shadow Property in EF Core?

A shadow property is a column in the database that:

Exists in the EF model,

But does NOT exist in your C# class.


In short:

> "EF tracks and stores the property in the database, but you don‚Äôt see it in your class."




---

‚úÖ Why Use Shadow Properties?

1. To store metadata like CreatedDate, ModifiedBy, etc.


2. To keep your C# class clean from internal or system-related fields.


3. To track things without exposing them in your code.




---

‚úÖ How to Define a Shadow Property

You define it in the OnModelCreating() method in DbContext.

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Property>()
        .Property<DateTime>("LastUpdated"); // üëà Shadow Property
}

Here, LastUpdated does not exist in the Property class, but EF will still treat it like a normal column.


---

‚úÖ How to Set or Use a Shadow Property in Code

You can access or set it using EF's Entry() API:

var property = await _context.Properties.FindAsync(1);

// Set the shadow property
_context.Entry(property).Property("LastUpdated").CurrentValue = DateTime.UtcNow;

await _context.SaveChangesAsync();


---

‚úÖ Example: Clean Model with Shadow Property

// No LastUpdated here
public class Property
{
    public int Id { get; set; }
    public string Title { get; set; }
    public double Price { get; set; }
}

But this will still save LastUpdated in the DB!


---

‚úÖ How to Say in the Interview (Simple Words)

> ‚ÄúShadow properties are extra columns that EF tracks and stores in the database, but they are not declared in your C# class.
They're useful for things like timestamps or audit info, when you want to keep your models clean.‚Äù




---

‚úÖ Real-Life Analogy

üß† "It‚Äôs like adding an invisible tracking chip to a package ‚Äî the customer doesn‚Äôt see it, but the system tracks it in the background."


---

Would you like me to extend this into a full CRUD example with CreatedBy, LastUpdated, etc., using shadow properties and EF Core 8?



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////13. What is change tracking in EF?
Great question! Let's break down Change Tracking in Entity Framework (EF) using simple human-friendly words and real code examples ‚Äî so you can explain it confidently in an interview.


---

‚úÖ What is Change Tracking in EF?

Change Tracking means:

> EF keeps track of the changes you make to your objects (entities) after retrieving them from the database, so that it knows what to update when you call SaveChanges().




---

‚úÖ How It Works (Simple Steps)

1. EF loads an object from the database.


2. You change a property (like name or price).


3. EF tracks the change in memory.


4. When you call SaveChanges(), EF automatically generates SQL UPDATE for the changed fields.




---

‚úÖ Code Example

var property = await _context.Properties.FindAsync(1); // Step 1: EF tracks this entity

property.Price = 500000; // Step 2: You make a change

await _context.SaveChangesAsync(); // Step 3 & 4: EF detects change & updates DB

Behind the scenes, EF tracks the Price change and creates this SQL:

UPDATE Properties SET Price = 500000 WHERE Id = 1;


---

‚úÖ Interview-Friendly Explanation

> ‚ÄúEF uses Change Tracking to monitor changes I make to my entities in memory.
So when I call SaveChanges(), EF knows what to update in the database ‚Äî without me writing SQL manually.‚Äù




---

‚úÖ Real-Life Analogy

üß† *‚ÄúIt‚Äôs like a teacher watching students write their answers




14. What is the difference between Add(), Attach(), and Update() methods?


15. How do you configure Fluent API vs Data Annotations?


16. How can you execute raw SQL queries in EF Core?


17. What is the use of AsNoTracking()?




---

üöÄ Advanced/Real-World Development Questions

18. How do you optimize performance in Entity Framework Core?


19. How to handle transactions in EF?


20. How do you seed initial data in EF Core?


21. How do you implement Unit of Work and Repository Pattern with EF?


22. How do you test Entity Framework code (Mocking DbContext)?


23. What are global query filters in EF Core?


24. What is Query Splitting in EF Core?


25. How does EF Core handle connection pooling and resource management?


////////////////////////////////////////////////////////
///////////////////////////////////////////////////////Interview Bit
//////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////1)which according to you is considered the best approach in Entity framework.
->In real world , code-First is considered the best approach because 
-> Developers control the model using c# classes.
-> Database schema  is created/updated automatically using migration.
-> Works well with agile projects where database design keeps migrations.
-> Easier for version control(Git) since everything is in code.
////////////////////////////////////////////////////////////////////////////2) Explain the advantages of the Entity Framework.
Advantages
///////////1) No need to write SQL manually
-> Normally, we have to write  long SQL quesries to fetch, insert , or update  data.
-> With EF, we can just write long c# code(dbContext.Products.ToList()) and it will generate the SQL behind the scenes.
->Save time and reduces human errors in SQL.
//Faster development (Productivity boost)
->Developers can focus on business logic instead of spending hours writing and debugging  SQL queries.
->EF provided LINQ (Language Integrated Query), which makes queries easier and type-safe.
//Database independent (Multiple DB support)
//Strong Types and IntelliSense support
//Change Tracking 
//Better for Complex Apps
////////////////////////////////////////////////////////////////////////////////////////////////3) Describe some of the disadvantages of the entity Framework.
//Slower than ADO.net 
//Less control over SQL.
//Performance issue in very large apps.
//Learning curve 
//Overhead(extra memory and processing).
//////////////////////////////////////////////////////////////////////////////////////////////////4) what are the feature of the entity framework ?

/////////////////////////////////////////////////////////////////////////////////////////5) what are the main component of Entity Framework
///EDM has tree part
1)Conceptual Model.
2) Storage Module.
3) Mapping Module.
Conceptual model (c# world)
Storage Model(DB world)
Mapping Model(the transator in between).
//2)Linq to Entities.
//3)Entity SQL
//4)Object Service
//5)ADO.NET Data Provider
/////////////////////////////////////////////////////////////////////////////////////6) explain diffrent parts of the entity data model.
1) Conceptual Model(CSDL)
This is how you see the data in c#(your entity classes).
public class Student
{
 public int Id {get ; set ;}
 public string Name {get ; set;}
}

2) Storage Model(SSDL)
This is how the database actually look(tablets, columns , data types)
 create table Student
 (StudentId INT )
3)
///////////////////////////////////////////////////////////////////////////////////////7) Explain what the .edmx file contains.
An .edmx file in Entity Framework is an XML-based file that contains three parts :
CSDL(Conceptual Model : C# classes)
SSDL(Stored Model : Database  tables)
MSL(Mapping between them) : It basically acs as a bridge between the database and the application.
///////////////////////////////////////////////////////////////////////////////////////////////////////8) what do you mean by migration ? Write its type ?
Migration in Entity Framework is a ways to update and manage database schema changes in sync with your application's data model.
->Automatic Migration :  Database updates automatically(good for quick dev, not production).
->Code-Based Migration : Mamnual control using migration files (preferred).
->Initial Migration : First migration to create DB.
->Seed Migration : To add initial data.

9) what do you mean by Deferred Execution in EF ?
=> EXAMPLE :
Var query = context.Employees.Where(e => e.Department == "IT");
At this line -> No SQL query is send to the database yet.
When you actually do something like :
foreach(var emp in query)
{
Console.WriteLine(emp.Name);
}
Only then the query is executes, and EFsends SQL to the database.

//Why Deferred Excution is Useful ?
Performance Optimization -> Query is executed only when needed.
Flexibility -> You can build queries step by step before execution.
Less Load -> Prevents unnessary
///////////////////////////////////////////////////////////////////////////////////////////10) What do you mean by the term navigation property in the entity framework ?
11) What are diffrent entity state in EF ?
12) Write the importance of the t4 entity in Entity Framework.
13)Explain CSDL, SSDL , MSL selection in an Edmx file
14) Write some XML generation methods provided b the dataset object.
15) what do you mean by migration history table in Entity framework.
16) Explain how EF suppots transactions.
17) Write the steps to retrive data from database using Entity Framework in MVC.
18) Explain the role of pluralize and Singularize in  the entity framework.
19)What is the diffrence between Dapper and Entity Framework.
20) Explain the POCO Clsses in EF.
21) In EF , what are the ways to use stored Procedures ?
22) Explain database concurrency and the ways to handle it.
23) What are diffrence type of loading available to load related entities in EF.
24) What do you mean by lazy loading and explicit loading.
25) What are the pros and cons of different type of loading.
26) Write diffrent type of inheritane support by entity Framework.
27) Write Complex Type in Entity Framework.
28) What do you mean by Micro ORM.
29) Explain EF Data access Artichecture.
30)What do you mean by SQL inject attack ?
31) What is the best ways to handle SQL injection attacks in Entity Framework.
32) Explain the OnjectSet in EF.
33) Whta the namespace that is used to include .NET Data Provider for SQL server in .NET code.
34) Eplain EDM and write the process to create it.
35) What do you mean by DbEntityEntry Class in EF ?
